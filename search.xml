<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>记录自用的终端美化方案</title>
    <url>//post/BeautifyBash/</url>
    <content><![CDATA[<p><s>生产队的驴准备为自己选一个更趁手的磨盘</s>，所谓工作环境当然要赏心悦目才能更高效，下面分享一下自己在用的终端美化方案</p>
<h2 id="WSL-Ubuntu">WSL-Ubuntu</h2>
<p>Ubuntu自带的是bash，我认为zsh更加简洁，所以修改终端为zsh后使用oh-my-zsh主题，效果如图<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/PixPin_2024-10-09_10-25-18.png"
                        alt="PixPin_2024-10-09_10-25-18"
                 ></p>
<h3 id="环境配置">环境配置</h3>
<h4 id="安装基本工具">安装基本工具</h4>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 更新软件源</span></span><br><span class="line"><span class="built_in">sudo</span> apt update &amp;&amp; <span class="built_in">sudo</span> apt upgrade -y</span><br><span class="line"><span class="comment"># 安装 zsh git curl</span></span><br><span class="line"><span class="built_in">sudo</span> apt install zsh git curl -y</span><br></pre></td></tr></table></figure>
<p>设置默认终端为 zsh（<strong>注意：不要使用 sudo</strong>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">chsh -s /bin/zsh</span><br></pre></td></tr></table></figure>
<h3 id="安装-oh-my-zsh">安装 oh-my-zsh</h3>
<p>官网：<a class="link"   href="http://ohmyz.sh/%E3%80%82" >http://ohmyz.sh/。<i class="fas fa-external-link-alt"></i></a> 安装方式任选一个即可。</p>
<table>
<thead>
<tr>
<th style="text-align:left">方法</th>
<th style="text-align:left">命令</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left"><strong>curl</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(curl -fsSL https://install.ohmyz.sh/)&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>wget</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(wget -O- https://install.ohmyz.sh/)&quot;</code></td>
</tr>
<tr>
<td style="text-align:left"><strong>fetch</strong></td>
<td style="text-align:left"><code>sh -c &quot;$(fetch -o - https://install.ohmyz.sh/)&quot;</code></td>
</tr>
</tbody>
</table>
<p>注意：同意使用 Oh-my-zsh 的配置模板覆盖已有的 <code>.zshrc</code></p>
<h3 id="配置主题">配置主题</h3>
<p>下载完想要的主题后，编辑 <code>~/.zshrc</code> 文件，将 <code>ZSH_THEME</code> 设为 <code>你想要的主题</code>。例如<code>lukerandall</code>、<code>robbyrussell</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">nano ~/.zshrc</span><br><span class="line"></span><br><span class="line">ZSH_THEME=<span class="string">&quot;你想要的主题&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">source</span> ~/.zshrc</span><br></pre></td></tr></table></figure>
<p>我使用的是默认主题。故该部分简略带过</p>
<h3 id="安装插件">安装插件</h3>
<p><code>oh-my-zsh</code> 已经内置了 <code>git</code> 插件，内置插件可以在 <code>～/.oh-my-zsh/plugins</code> 中查看，下面介绍一下我常用的插件，更多插件可以在 <a class="link"   href="https://github.com/unixorn/awesome-zsh-plugins" >awesome-zsh-plugins<i class="fas fa-external-link-alt"></i></a> 里查看。</p>
<h4 id="zsh-autosuggestions">zsh -autosuggestions</h4>
<p><a class="link"   href="https://github.com/zsh-users/zsh-autosuggestions" >zsh-autosuggestions<i class="fas fa-external-link-alt"></i></a> 是一个命令提示插件，当你输入命令时，会自动推测你可能需要输入的命令，按下右键可以快速采用建议。效果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009103559263.png"
                        alt="image-20241009103559263"
                 ></p>
<p>安装方式：把插件下载到本地的 <code>~/.oh-my-zsh/custom/plugins</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-autosuggestions <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-autosuggestions</span><br></pre></td></tr></table></figure>
<h4 id="zsh-syntax-highlighting">zsh-syntax-highlighting</h4>
<p><a class="link"   href="https://github.com/zsh-users/zsh-syntax-highlighting" >zsh-syntax-highlighting<i class="fas fa-external-link-alt"></i></a> 是一个命令语法校验插件，在输入命令的过程中，若指令不合法，则指令显示为红色，若指令合法就会显示为绿色。效果如下：</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009103726396.png"
                        alt="image-20241009103726396"
                 ></p>
<p>安装方式：把插件下载到本地的 <code>~/.oh-my-zsh/custom/plugins</code> 目录。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/zsh-users/zsh-syntax-highlighting.git <span class="variable">$&#123;ZSH_CUSTOM:-~/.oh-my-zsh/custom&#125;</span>/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure>
<h4 id="z">z</h4>
<p><code>oh-my-zsh</code> 内置了 <code>z</code> 插件。<code>z</code> 是一个文件夹快捷跳转插件，对于曾经跳转过的目录，只需要输入最终目标文件夹名称，就可以快速跳转，避免再输入长串路径，提高切换文件夹的效率。</p>
<h4 id="extract">extract</h4>
<p><code>oh-my-zsh</code> 内置了 <code>extract</code> 插件。<code>extract</code> 用于解压任何压缩文件，不必根据压缩文件的后缀名来记忆压缩软件。使用 <code>x</code> 命令即可解压文件。</p>
<h4 id="web-search">web-search</h4>
<p>oh-my-zsh 内置了 <code>web-search</code> 插件。<code>web-search</code> 能让我们在命令行中使用搜索引擎进行搜索。使用<code>搜索引擎关键字+搜索内容</code> 即可自动打开浏览器进行搜索。</p>
<h3 id="启动插件">启动插件</h3>
<p>修改<code>~/.zshrc</code>中插件列表为：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">plugins=(git zsh-autosuggestions zsh-syntax-highlighting z extract web-search)</span><br></pre></td></tr></table></figure>
<p>部分插件需要参考插件介绍进行安装</p>
<p>然后重启终端即可使用</p>
<h3 id="ROOT用户启用">ROOT用户启用</h3>
<p>重复上述步骤即可</p>
<h2 id="Windows-PowerShell">Windows-PowerShell</h2>
<p>使用oh-my-posh默认主题美化，效果如图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104518993.png"
                        alt="image-20241009104518993"
                 ></p>
<h3 id="环境配置-2">环境配置</h3>
<p>首先在Microsoft Store搜索下载oh-my-posh</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104304519.png"
                        alt="image-20241009104304519"
                 ></p>
<p>打开一个PowerShell，输入<code>$PORFILE</code>，查看配置文件所在位置</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104438608.png"
                        alt="image-20241009104438608"
                 ></p>
<p>也可以用everything直接找，如果不存在则手动创建即可</p>
<p>在配置文件中写入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">C:\\Users\\67300\\AppData\\Local\\Programs\\oh-my-posh\\bin\\oh-my-posh.exe init pwsh --config $env:POSH_THEMES_PATH\montys.omp.json | Invoke-Expression</span><br><span class="line"></span><br><span class="line">需要自己根据情况更改，注意文件地址表示是否正确</span><br></pre></td></tr></table></figure>
<p>随后重启终端查看配置文件能否正常运行，如果顺利则可以正常使用</p>
<h3 id="报错处理">报错处理</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009104830606.png"
                        alt="image-20241009104830606"
                 ></p>
<p>以管理员身份打开一个新的终端，输入以下命令</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">start-process</span> PowerShell <span class="literal">-verb</span> runas</span><br><span class="line"></span><br><span class="line"><span class="built_in">set-executionpolicy</span> remotesigned</span><br></pre></td></tr></table></figure>
<p>然后重启终端即可。</p>
<p>如果遇到无法正常显示，显示为乱码或方框，则需要修改终端默认字体</p>
<p><a class="link"   href="https://www.nerdfonts.com/font-downloads" >Nerd Fonts - Iconic font aggregator, glyphs/icons collection, &amp; fonts patcher<i class="fas fa-external-link-alt"></i></a> 在这个网站上，ctrl + F 搜索<code>JetBrainsMono Nerd Font Mono</code>，然后下载并安装该字体</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009105545990.png"
                        alt="image-20241009105545990"
                 ></p>
<p>右键安装后在PowerShell中打开设置</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009105635329.png"
                        alt="image-20241009105635329"
                 ></p>
<p>找到PowerShell的外观设置，<strong>这里还能进行背景图，透明度等相关设置</strong></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110113349.png"
                        alt="image-20241009110113349"
                 ></p>
<p>选择JetBrainsMono Nerd Font Mono字体并保存</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110129639.png"
                        alt="image-20241009110129639"
                 ></p>
<h3 id="修改主题">修改主题</h3>
<p>找到oh-my-posh安装路径下的thems文件夹并打开，每一个json文件名都是一个主题，将需要的主题名复制填写到配置文件的对应位置即可。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110243978.png"
                        alt="image-20241009110243978"
                 ></p>
<h3 id="安装扩展">安装扩展</h3>
<h4 id="安装Git扩展">安装Git扩展</h4>
<p>posh-git 是一款专为 Windows 系统的 PowerShell 设计的 Git 扩展模块。它的主要目标是在 PowerShell 中提供更为友好、直观的 Git 命令行界面，通过整合 Git 相关的信息到命令提示符中，并提供方便快捷的键绑定，使得日常 Git 操作更为高效、直观。</p>
<p>安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> posh<span class="literal">-git</span> <span class="literal">-Scope</span> CurrentUser</span><br></pre></td></tr></table></figure>
<p>安装完成后，重启 PowerShell 并输入以下命令启用 posh-git：<code>Import-Module posh-git</code></p>
<p>不生效的话可以在前面的配置文件 <code>Microsoft.PowerShell_profile.ps1</code>中追加以下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> posh<span class="literal">-git</span> <span class="comment"># 引入 posh-git</span></span><br></pre></td></tr></table></figure>
<h4 id="历史命令联想">历史命令联想</h4>
<p><code>oh-my-zsh</code> 有一个很便利的功能就是输入部分命令后、按 <code>↑</code> 或 <code>↓</code> 就可以联想历史的完整命令，其实在 <code>oh-my-posh</code> 中也能实现。</p>
<p>首先在 <code>PowerShell</code> 执行以下命令安装插件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Install-Module</span> <span class="literal">-Name</span> PowerShellGet <span class="literal">-Force</span></span><br><span class="line"><span class="built_in">Install-Module</span> PSReadLine <span class="literal">-AllowPrerelease</span> <span class="literal">-Force</span></span><br></pre></td></tr></table></figure>
<p>然后修改前面的配置文件 <code>Microsoft.PowerShell_profile.ps1</code>，在末尾追加以下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Import-Module</span> PSReadLine <span class="comment"># 历史命令联想</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置预测文本来源为历史记录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-PredictionSource</span> <span class="built_in">History</span> </span><br><span class="line"><span class="comment"># 设置 Tab 为菜单补全和 Intellisense </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> <span class="string">&quot;Tab&quot;</span> <span class="literal">-Function</span> MenuComplete </span><br><span class="line"><span class="comment"># 每次回溯输入历史，光标定位于输入内容末尾 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineOption</span> <span class="literal">-HistorySearchCursorMovesToEnd</span> </span><br><span class="line"><span class="comment"># 设置向上键为后向搜索历史记录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> UpArrow <span class="literal">-Function</span> HistorySearchBackward </span><br><span class="line"><span class="comment"># 设置向下键为前向搜索历史纪录 </span></span><br><span class="line"><span class="built_in">Set-PSReadLineKeyHandler</span> <span class="literal">-Key</span> DownArrow <span class="literal">-Function</span> HistorySearchForward</span><br></pre></td></tr></table></figure>
<h4 id="卸载">卸载</h4>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Uninstall-Module</span> <span class="built_in">oh</span><span class="literal">-my-posh</span> <span class="literal">-AllVersions</span></span><br></pre></td></tr></table></figure>
<h2 id="Windows-CMD">Windows-CMD</h2>
<p>使用clink + oh-my-posh进行美化，效果如图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241009110926127.png"
                        alt="image-20241009110926127"
                 ></p>
<p>首先，安装<a class="link"   href="https://cloud.tencent.com/developer/tools/blog-entry?target=https%3A%2F%2Fgithub.com%2Fchrisant996%2Fclink%2Freleases&amp;source=article&amp;objectId=2442201" >clink<i class="fas fa-external-link-alt"></i></a>，下载exe安装包即可，然后进入 <code>clink</code> 安装目录，创建 <code>oh-my-posh.lua</code> 文件，添加如下内容：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">load(io.popen(<span class="string">&#x27;oh-my-posh init cmd&#x27;</span>):read(<span class="string">&quot;*a&quot;</span>))()</span><br></pre></td></tr></table></figure>
<p>如果使用的是自定义主题，则添加如下内容</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">load(io.popen(<span class="string">&#x27;oh-my-posh init cmd --config C:\\Users\\&#123;你的用户名&#125;\\AppData\\Local\\Programs\\oh-my-posh\\themes\\montys.omp.json&#x27;</span>):read(<span class="string">&quot;*a&quot;</span>))()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>使用Hexo和Github Page免费搭建博客</title>
    <url>//post/HexoBuild/</url>
    <content><![CDATA[<h4 id="一、安装准备">一、安装准备</h4>
<h5 id="1-Node-js和Git安装">1.Node.js和Git安装</h5>
<p>hexes博客依赖于Node.js和Git，故需要在本地先进行环境搭建。</p>
<p>·Node.js官网：<a class="link"   href="https://nodejs.org/zh-cn" >Node.js (nodejs.org)<i class="fas fa-external-link-alt"></i></a></p>
<p>·Git官网：<a class="link"   href="https://git-scm.com/downloads" >Git - Downloads (git-scm.com)<i class="fas fa-external-link-alt"></i></a></p>
<p>完整以上程序的安装后，可以在cmd中输入：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">node -v</span><br><span class="line">npm -v</span><br><span class="line">git --version</span><br></pre></td></tr></table></figure>
<p>进行验证，若安装成功则会显示对应版本号。</p>
<h5 id="2-GIthub注册及仓库的创建">2.GIthub注册及仓库的创建</h5>
<p>完成github注册后，新建一个Repository，命名为：<a class="link"   href="http://xxx.github.io/" >xxx.github.io<i class="fas fa-external-link-alt"></i></a>，xxx为你的github用户名。</p>
<h4 id="二、链接至Github">二、链接至Github</h4>
<h5 id="1-设置GitHub邮箱">1.设置GitHub邮箱</h5>
<p>新建一个文件夹作为博客程序在本地的位置，在空白处右击选择Open Git Bash Here，开始设置GitHub账户的用户名和邮箱。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global user.name &quot;GitHub用户名&quot;</span><br><span class="line">git config --global user.email &quot;GitHub邮箱&quot;</span><br></pre></td></tr></table></figure>
<h5 id="2-创建SSH密匙">2.创建SSH密匙</h5>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;Github邮箱&quot;</span><br></pre></td></tr></table></figure>
<p>然后一路回车</p>
<p>进入 [C:\Users\用户名.ssh] 目录（要勾选显示“隐藏的项目”），用记事本打开公钥 id_rsa.pub 文件并复制里面的内容。</p>
<p>登陆 GitHub ，进入 Settings 页面，选择左边栏的 SSH and GPG keys，点击 New SSH key。</p>
<p>Title 随便取个名字，粘贴复制的 id_rsa.pub 内容到 Key 中，点击 Add SSH key 完成添加。</p>
<p>注：可使用<code>ssh -T git@github.com</code>验证是否连接成功</p>
<h4 id="三、安装hexo">三、安装hexo</h4>
<h5 id="1-安装hexo程序">1.安装hexo程序</h5>
<p>在git中输入npm命令进行安装，在安装过程中没有任何提示，故耐心等待完成，如果国内网络环境不佳，可以跳转至文末更换npm源。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<h5 id="2-初始化和本地部署">2.初始化和本地部署</h5>
<p>初始化和安装，<code>hexo init</code>的时候需要进行<code>git clone</code>，如果<code>git clone</code>在当地网络环境无法正常使用请跳转至文末设置本机代理 或 开启Clash的TUN模式。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo init		#初始化</span><br><span class="line">npm install		#安装相关组件</span><br></pre></td></tr></table></figure>
<p>启动本地服务器进行预览</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo g		#渲染界面</span><br><span class="line">hexo s		#启动预览</span><br></pre></td></tr></table></figure>
<p>在运行的git窗口中访问<a class="link"   href="http://localhost:4000/" >http://localhost:4000/<i class="fas fa-external-link-alt"></i></a></p>
<p>就可以看到hexo的默认页面</p>
<p>注：如果页面加载错误可能是端口被占用，可使用命令：<code>hexo s -p 5000</code>进行修改</p>
<p>常用命令：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo new &quot;name&quot;       # 新建文章</span><br><span class="line">hexo new page &quot;name&quot;  # 新建页面</span><br><span class="line">hexo g                # 渲染页面</span><br><span class="line">hexo d                # 部署</span><br><span class="line">hexo g -d             # 生成页面并部署</span><br><span class="line">hexo s                # 本地预览</span><br><span class="line">hexo clean            # 清除缓存和已生成的静态文件</span><br><span class="line">hexo help             # 帮助</span><br></pre></td></tr></table></figure>
<h4 id="四、上传到Github">四、上传到Github</h4>
<h5 id="1-必要组件">1.必要组件</h5>
<p>首先需要安装deployer-git组件，在git窗口中：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>
<h5 id="2-修改必要信息并上传">2.修改必要信息并上传</h5>
<p>在本地文件夹中修改_config.yml文件末尾的Deployment部分，如下</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repository: &#x27;https://github.com/用户名/用户名.github.io&#x27;</span><br><span class="line">  branch: main</span><br><span class="line">  #现版本的GitHub仓库默认main分支，如果定义为master也可在GitHub中修改默认选项</span><br></pre></td></tr></table></figure>
<p>修改保存后在git窗口中运行</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">hexo d		#推到github</span><br></pre></td></tr></table></figure>
<p>完成后即可访问：<a class="link"   href="https://xn--eqr924avxo.github.io/" >https://用户名.github.io<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="五、阿里云图床配置">五、阿里云图床配置</h4>
<h5 id="1-购买并配置阿里云OSS">1.购买并配置阿里云OSS</h5>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956646891.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956646891.png"
                        alt="1706956646891"
                 ></a></p>
<p>创建Bucket时，选择离自己最近的地域，读写权限一定要开启公共读，否则将无法访问</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956819030.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956819030.png"
                        alt="1706956819030"
                 ></a></p>
<p>在资源包管理界面购买合适的资源包</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184157330.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184157330.png"
                        alt="image-20240203184157330"
                 ></a></p>
<p>点击头像中的访问控制，找到左侧”用户“，点选创建用户，在创建用户时一定要在访问方式中<strong>打开OpenAPI调用访问</strong></p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956991492.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706956991492.png"
                        alt="1706956991492"
                 ></a></p>
<p>随后在用户管理界面右侧点击添加权限，授权<code>AliyunOSSFullAccess</code>后退出，在用户界面创建AccessKey并记录AccessKey和AccessSceret，这两个东西只会生成一次，所以一定要记录下来，如果没有记录只能禁用后重新生成</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706957282210.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/1706957282210.png"
                        alt="1706957282210"
                 ></a></p>
<p>在Bucket管理界面新增文件夹img</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184645964.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203184645964.png"
                        alt="image-20240203184645964"
                 ></a></p>
<h5 id="2-Typora-PicGo实现自动上传">2.Typora+PicGo实现自动上传</h5>
<p>打开Typora，点选左上角 文件 - 偏好设置 并按照下图设置，设置完成后点击下载或更新</p>
<p><a href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203185042334.png"><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240203185042334.png"
                        alt="image-20240203185042334"
                 ></a></p>
<p>下载完成后打开配置文件，将配置文件按照以下形式修改</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;picBed&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;uploader&quot;</span><span class="punctuation">:</span> <span class="string">&quot;aliyun&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;aliyun&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;accessKeyId&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的AccessKey&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;accessKeySecret&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的AccessSecret&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;bucket&quot;</span><span class="punctuation">:</span> <span class="string">&quot;你的Bucket名&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;area&quot;</span><span class="punctuation">:</span> <span class="string">&quot;阿里云地域名&quot;</span><span class="punctuation">,</span> <span class="comment">//只需要地域名，如oss-cn-hangzhou</span></span><br><span class="line">      <span class="attr">&quot;path&quot;</span><span class="punctuation">:</span> <span class="string">&quot;img/&quot;</span><span class="punctuation">,</span> <span class="comment">//路径</span></span><br><span class="line">      <span class="attr">&quot;customUrl&quot;</span><span class="punctuation">:</span> <span class="string">&quot;https://你的Bucket域名&quot;</span><span class="punctuation">,</span> <span class="comment">//需要手动添加https://</span></span><br><span class="line">          <span class="comment">//以上信息在Bucket概览中</span></span><br><span class="line">      <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&quot;</span> <span class="comment">//留空，记得删除所有注释</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;picgoPlugins&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<p>完成设置后可以验证图片上传选项，如果没有遇到报错则所有图片均会由Typora上传到阿里云OSS，hexo博客中可以正常渲染。</p>
<h5 id="3-若无法正常渲染，考虑是否安装hexo主题的渲染插件">3.若无法正常渲染，考虑是否安装hexo主题的渲染插件</h5>
<p>例如butterfly主题依赖pug 以及 stylus 的渲染器，则可在Git窗口中运行以下命令：</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-pug hexo-renderer-stylus --save</span><br></pre></td></tr></table></figure>
<h4 id="六、域名解析">六、域名解析</h4>
<p>若是放在GitHub Pages上的网页可以使用CNAME记录进行域名解析，若是放在云服务器上可以使用A记录进行解析，此处仅做CNAME记录的教程。</p>
<p>在完成域名实名以后可以进入DNS云解析界面，如图设置一条@记录一条www记录</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-15-36.png"
                        alt="Clip_2024-08-25_11-15-36"
                 ></p>
<p>随后在博客的source文件夹内新建一个<code>CNAME</code>文件（没有后缀名）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-16-37.png"
                        alt="Clip_2024-08-25_11-16-37"
                 ></p>
<p>使用记事本打开后输入域名，例如<code>c3ngh.top</code>，保存后退出，重新进行hexo三连即可推送并进行域名解析。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/Clip_2024-08-25_11-18-09.png"
                        alt="Clip_2024-08-25_11-18-09"
                 ></p>
<h4 id="七、本地搜索">七、本地搜索</h4>
<ul>
<li>
<p>安装依赖</p>
<p>在博客根目录大概Git Bash后执行</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>写入配置</p>
<p>在站点配置文件中添加如下代码：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span></span><br><span class="line">  <span class="attr">content:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span></span><br></pre></td></tr></table></figure>
<p>参数说明：</p>
<ul>
<li><code>path</code> - 文件路径：可以生成 xml 和 json 两种格式，默认情况下是 <code>search.xml</code> 。如果文件扩展名为 <code>.json</code> ，则输出格式将为JSON。否则，将导出 XML格式化文件。</li>
<li><code>field</code> - 搜索范围：
<ul>
<li><code>post</code>（默认）- 涵盖所有文章</li>
<li><code>page</code> - 涵盖所有页面</li>
<li><code>all</code> - 涵盖所有文章和页面</li>
</ul>
</li>
<li><code>content</code> - 是否包含每篇文章的全部内容，<code>false</code>生成的结果仅包含标题和创建时间等信息，没有文章内容，默认为<code>true</code></li>
<li><code>fotmat</code> - 搜索到的内容和选项的格式
<ul>
<li><code>html</code>（默认） - 将html原文本缩略</li>
<li><code>strptags</code> - 将html原文本缩略，并删除所有标记</li>
<li><code>raw</code> - 记录下每一篇文章和页面的文字</li>
</ul>
</li>
</ul>
</li>
<li>
<p>开启搜索</p>
<p>在主题配置文件中修改以下内容：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="bullet">-</span>  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"><span class="string">+</span>  <span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="八、评论系统">八、评论系统</h4>
<p>waline的官方教程写的非常详细，可以直接参考<a class="link"   href="https://waline.js.org/guide/get-started" >快速上手 | Waline<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="九、报错解决">九、报错解决</h4>
<p>1.推送报错问题</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Error: Spawn failed</span><br><span class="line">Failed to connect to github.com port 443 after 23565 ms: Couldn’t connect to server</span><br></pre></td></tr></table></figure>
<p>可能是本机代理存在问题导致服务器连接不上，我使用的是Clash，端口7891，则在git窗口中输入</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global http.proxy http://127.0.0.1:7891</span><br><span class="line">git config --global https.proxy https://127.0.0.1:7891</span><br></pre></td></tr></table></figure>
<p>两条命令会设置git的http和https的代理为本机的7891端口，然后可以进行正常的hexo三连</p>
<p>也可以在Clash中<strong>开启TUN模式</strong>（推荐）</p>
<p>注意：Clash默认端口为7890，会与宽带拨号上网端口冲突，为了在PPPoE情况下使用代理，可以将Clash端口修改为其他数值，此时git命令后的数值也要随之变换。</p>
<p><strong>取消代理</strong></p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">git config --global --unset http.proxy</span><br><span class="line">git config --global --unset https.proxy</span><br></pre></td></tr></table></figure>
<p>其他报错：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Fatal: The remote end hung up unexpectedly</span><br></pre></td></tr></table></figure>
<p>造成此报错的原因是推送的文件太大，在排除掉网络和代理问题后，就是缓存不够</p>
<p>我们可以在克隆/创建版本库生成的 .git目录下面修改生成的config文件</p>
<p>hexo博客该目录所在位置为： /.deploy_git/.git/config</p>
<p>记事本打开后在文件末尾新增：</p>
<figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">[http]  </span><br><span class="line">postBuffer = 524288000</span><br></pre></td></tr></table></figure>
<p>该操作会使缓存大小设置为500MB。</p>
<h5 id="2-npm报错问题">2.npm报错问题</h5>
<p>如果在执行以下步骤时遇到报错</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>
<p>可能是因为此前换成旧淘宝源（已停用），所以要重新修改为官方源。</p>
<p>如果遇到npm速度过慢，可以尝试更换为国内源。</p>
<figure class="highlight plaintext"><figcaption><span>Bash</span></figcaption><table><tr><td class="code"><pre><span class="line">npm config set registry https://registry.npmjs.org/</span><br><span class="line">//官方源</span><br><span class="line">npm config set registry https://registry.npmmirror.com</span><br><span class="line">//淘宝最新源</span><br><span class="line">npm config set registry https://registry.npm.taobao.org</span><br><span class="line">//淘宝旧源</span><br><span class="line">npm config set registry https://npm.aliyun.com</span><br><span class="line">//阿里云</span><br><span class="line">npm config set registry https://mirrors.huaweicloud.com/repository/npm/</span><br><span class="line">//华为云</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>如何优雅的重装系统</title>
    <url>//post/SystemReinstall/</url>
    <content><![CDATA[<h3 id="一、事先准备">一、事先准备</h3>
<ul>
<li>一个大于8G的空U盘</li>
<li>Windows系统镜像及驱动</li>
<li>一颗敢于折腾的心</li>
<li><s>一台电脑</s></li>
</ul>
<h3 id="二、下载系统镜像及驱动">二、下载系统镜像及驱动</h3>
<h4 id="系统镜像下载">系统镜像下载</h4>
<p>点击链接跳转至 <a class="link"   href="https://next.itellyou.cn/" >MSDN，我告诉你<i class="fas fa-external-link-alt"></i></a> 下载微软官方原版镜像</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018010144723.png"
                        alt="image-20241018010144723"
                 ></p>
<p>选择复制ED2K，并使用迅雷下载，如果不想电脑被迅雷占领，则可以使用磁力链接下载</p>
<blockquote>
<p>注意：</p>
<p>优先选择专业版，而不是家庭版</p>
<p>优先选择consumer editions，而不是中文定制版，consumer editions也可以使用英文</p>
<p>万万不可选Windows 11 24H2版本，直至本文发布时，24H2依然有一大堆bug，推荐使用23H2</p>
</blockquote>
<p>原版镜像一定是以<code>.iso</code>为文件后缀名的，而不是<code>.gho</code>，注意甄别</p>
<h4 id="驱动下载">驱动下载</h4>
<p>进入各大品牌官网下载驱动，例如：<a class="link"   href="https://newsupport.lenovo.com.cn/driveDownloads_index.html" >联想官网驱动下载-联想官网 (lenovo.com.cn)<i class="fas fa-external-link-alt"></i></a>，或者直接选择使用360驱动大师一类产品，如果是联想电脑，在出厂时D盘下有一个<code>Drivers</code>目录，里面存放的就是驱动，直接将那个文件夹复制一份到U盘内即可</p>
<h3 id="三、制作WinPE">三、制作WinPE</h3>
<p>点击链接 <a class="link"   href="https://www.wepe.com.cn/" >微PE工具箱 - 超好用的装机维护工具 (wepe.com.cn)<i class="fas fa-external-link-alt"></i></a> 下载微PE</p>
<p>将事先准备好的U盘插入电脑，然后找到并打开下载好的微PE工具箱，选择左下角安装PE到U盘</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018010815350.png"
                        alt="image-20241018010815350"
                 ></p>
<p>完成制作后将下载好的镜像拷贝至U盘，镜像文件名应该类似下图</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011035529.png"
                        alt="image-20241018011035529"
                 ></p>
<h3 id="四、高级启动">四、高级启动</h3>
<p>在设置 - 系统 - 恢复 中，选择高级启动，点击立即重新启动</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011146300.png"
                        alt="image-20241018011146300"
                 ></p>
<p>重启后会自动进入高级启动界面，通常如下图所示</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011330451.png"
                        alt="image-20241018011330451"
                 ></p>
<p>在疑难解答中选择高级选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018011417501.png"
                        alt="image-20241018011417501"
                 ></p>
<p>在高级选项中选择UEFI固件设置，然后敲回车键重启，重启后会自动进入BIOS</p>
<p>也可以在关机状态下，按下开机键后连续按<code>F2</code>进入BIOS（各个品牌按键有所不同，大多集中在<code>F2、F12、DEL</code>键等，具体情况百度），<strong>注意不是按住不松手，是尽可能快的连续多次按下，直至进入BIOS</strong>。</p>
<h3 id="五、BIOS设置">五、BIOS设置</h3>
<p>本文以联想拯救者的BIOS为例</p>
<p>进入BIOS前插入U盘，则此处会多显示一个USB设备，选择箭头将USB设备的启动顺序移动到第一个，点击右上角的保存并退出即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012808710.png"
                        alt="image-20241018012808710"
                 ></p>
<p>如果是第一次重装，系统默认会开启“安全启动”选项，则需要进入高级设置 / 详细设置中，找到安全启动并关闭</p>
<p>注：只有某些特定版本不在Windows引导程序白名单中的PE需要关闭安全启动，目前大多数PE就算不关闭安全启动也可以被正常识别，参考文章：<a class="link"   href="https://mp.weixin.qq.com/s/yaAikTpIe9ALh-volcxirg%EF%BC%88%E6%84%9F%E8%B0%A2LilRan%E5%B8%88%E5%82%85%E7%9A%84%E6%8C%87%E6%AD%A3%EF%BC%89" >https://mp.weixin.qq.com/s/yaAikTpIe9ALh-volcxirg（感谢LilRan师傅的指正）<i class="fas fa-external-link-alt"></i></a></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012833813.png"
                        alt="image-20241018012833813"
                 ></p>
<p>也可以在详细设置中修改启动顺序</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012859515.png"
                        alt="image-20241018012859515"
                 ></p>
<p>最后按F10保存并退出即可</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018012924104.png"
                        alt="image-20241018012924104"
                 ></p>
<h3 id="六、对硬盘重新分区">六、对硬盘重新分区</h3>
<p>进入PE后，打开名如<code>diskgenius</code>，<code>磁盘精灵</code>，<code>磁盘工具</code>一类的橙色软件，双击进入后应如图显示</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013134867.png"
                        alt="image-20241018013134867"
                 ></p>
<p>在左侧选中你电脑的硬盘，然后右键选择删除所有分区</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013208816.png"
                        alt="image-20241018013208816"
                 ></p>
<p>然后按左上角的保存更改，此时磁盘数据已被清空，然后选择工具栏中的快速分区选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018013343232.png"
                        alt="image-20241018013343232"
                 ></p>
<p>一般来说旧电脑是BIOS+MBR启动，新电脑是UEFI+GPT启动，目前接触到的大多数都是后者，所以保持原有选项即可，可以自定义分区数量和大小，这会决定电脑有几个盘，也会决定每个盘的大小，推荐仅保留一个分区（C盘）即可，可以把软件全装C盘也不会满，而且固态硬盘的最理想状态是一条硬盘一个分区。</p>
<h3 id="七、使用WinNTSetup安装系统">七、使用WinNTSetup安装系统</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014326191.png"
                        alt="image-20241018014326191"
                 ></p>
<p>按步骤完成后一路点击安装即可，等待完成安装后会跳出弹窗，选择关闭弹窗</p>
<h3 id="八、注入驱动">八、注入驱动</h3>
<p>打开PE内的dism++，双击运行，选中刚才安装的系统，单击后选择软件中间的“打开会话”选项</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014624577.png"
                        alt="image-20241018014624577"
                 ></p>
<p>选择左边菜单栏内的驱动管理，选择驱动文件所在的文件夹，可以一键注入所有驱动</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018014726100.png"
                        alt=" "
                 ></p>
<blockquote>
<p>注意：</p>
<p>12代以上Intel处理器在安装完成后可能会蓝屏，如果是用镜像刻录安装可能会找不到硬盘，两者原理相通，都是12代以上Intel支持了RAID技术，所以需要额外注入一个RST驱动才可以正常进入系统，或者在BIOS内禁用RAID</p>
</blockquote>
<p>RST驱动下载地址：<a class="link"   href="https://dlcdnets.asus.com/pub/ASUS/GamingNB/FX507ZE/RST_V19.1.0.1001_PV.zip" >RST补丁<i class="fas fa-external-link-alt"></i></a></p>
<p>解压后同样选择文件夹然后导入驱动，完成后在PE内关机，完全关机后拔掉U盘</p>
<p>如果遇到驱动注入失败，可能是驱动格式不被dism++支持，可以跳过这个步骤，等待开机后再安装驱动</p>
<h3 id="九、OOBE阶段注意事项">九、OOBE阶段注意事项</h3>
<h4 id="联网步骤">联网步骤</h4>
<p>开机，然后耐心的等待，会自动进入Windows首次设置的流程，也称OOBE，根据需求一路“下一步”后会来到一个要求联网的界面，如果上一步驱动注入正确，此处应该可以正确识别W-iFi，如果驱动注入未成功，则无法正确显示Wi-Fi，解决方法有三：</p>
<ol>
<li>连接网线：如果电脑有RJ45网口的话，直接连接网线即可，如果没有的话可用扩展坞或USB转接</li>
<li>使用数据线连接手机，在手机弹出的窗口中选择<code>USB网络共享</code>（安卓），然后电脑就会识别到手机共享的网络，但注意：该方法可能需要多次拔插数据线并重复联网步骤，大概需要3-4次</li>
<li>跳过联网：按住<code>shift + F10</code>键，在弹出的命令行窗口中输入<code>OOBE\BYPASSNRO</code>（大小写不敏感）后按下回车，系统会自动重启，再进行一次OOBE，来到联网步骤会发现新增选项：<code>我没有Internet连接</code>，选择该选项即可跳过联网</li>
</ol>
<h4 id="输入用户名">输入用户名</h4>
<p>如果在网络连接步骤中选择连接网络并在接下来的步骤登录Microsoft账号，系统用户名则会被自动命名为登录邮箱的前五位，如果选择跳过连接或选择本地帐号登录，则需要自行命名系统用户名，注意：一定要使用英文或数字，<strong>千万不可使用中文，后续会出现很多环境问题报错</strong></p>
<h3 id="十、优雅的进入系统">十、优雅的进入系统</h3>
<p>完成上述所有步骤后即可正确进入系统，<s>快进到蓝屏重装</s></p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>科学上网指北</title>
    <url>//post/VPNuse/</url>
    <content><![CDATA[<h1>仅供学术讨论使用 造成任何后果自负</h1>
<h3 id="代理软件">代理软件</h3>
<h4 id="Clash-Verge">Clash Verge</h4>
<p>GitHub Releases地址：<a class="link"   href="https://github.com/clash-verge-rev/clash-verge-rev/releases" >Releases · clash-verge-rev/clash-verge-rev<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Windows、MacOS、Linux</p>
<h4 id="Clash-Meta-For-Android">Clash Meta For Android</h4>
<p>GitHub Releases地址：<a class="link"   href="https://github.com/MetaCubeX/ClashMetaForAndroid/releases" >Releases · MetaCubeX/ClashMetaForAndroid<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Android</p>
<h4 id="Surfboard">Surfboard</h4>
<p><a class="link"   href="https://github.com/getsurfboard/surfboard/releases" >Releases · getsurfboard/surfboard<i class="fas fa-external-link-alt"></i></a></p>
<p>适用于Android</p>
<h4 id="Shadowrocket">Shadowrocket</h4>
<p><a class="link"   href="https://apps.apple.com/us/app/shadowrocket/id932747118" >‎Shadowrocket on the App Store<i class="fas fa-external-link-alt"></i></a> （售价2.99美元不含税）</p>
<p>注：iOS需美区ID，此处仅提供App Store链接</p>
<h3 id="机场购买">机场购买</h3>
<p>此处可使用现有机场或进行新购买，在此推广星云：<a class="link"   href="https://www.xxxlssop.one/#/register?code=iGLGFrhC%EF%BC%8C%E6%9C%80%E4%BD%8E5%E5%85%83/%E6%9C%88%E3%80%82%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%AD%A5%E9%AA%A4%E5%B0%86%E4%BB%A5Clash" >https://www.xxxlssop.one/#/register?code=iGLGFrhC，最低5元/月。接下来步骤将以Clash<i class="fas fa-external-link-alt"></i></a> For Windows + 星云为例</p>
<h3 id="配置">配置</h3>
<ul>
<li>购买订阅后，在星云仪表盘中选择一键订阅，在展开框中选择复制订阅地址。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113702905.png"
                        alt="image-20250410113702905"
                 ></p>
<ul>
<li>下载并安装完成Clash Verge后，选择左侧第三个订阅，复制订阅地址后选择导入，点击出现的星云方框后左侧会显示蓝色，此时代表选中。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113841223.png"
                        alt="image-20250410113841223"
                 ></p>
<ul>
<li>在左侧第二个代理中选择可连通且延迟较低的节点并选中。顶部可选择：全局代理，所有流量都会经过代理进行访问，规则代理，访问部分网站时会根据已有规则不经代理访问，直连为直接连接，所有流量不走代理。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410113947586.png"
                        alt="image-20250410113947586"
                 ></p>
<ul>
<li>General界面中，System Proxy为系统代理开关，开启后状态栏内小猫会变成黄色，其他选项如图配置即可，注意Clash默认端口为7890，和宽带连接上网相同，且由于Clash问题，若宽带连接名称为中文也会失效，故需要使用PPPoE的用户建议修改Clash端口，并将宽带连接名称改为英文，如PPPoE。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307223716267.png"
                        alt="image-20240307223716267"
                 ></p>
<ul>
<li>Clash Verge同理，但是Clash Verge默认端口为7897，所以不会存在上述问题</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250410114107049.png"
                        alt="image-20250410114107049"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307223843654.png"
                        alt="image-20240307223843654"
                 ></p>
<ul>
<li>配置完成后可访问<a class="link"   href="https://www.google.com/" >Google<i class="fas fa-external-link-alt"></i></a>进行连通性测试，如果成功连通则会正常显示。</li>
</ul>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20240307224342765.png"
                        alt="image-20240307224342765"
                 ></p>
<p>TUN模式：虚拟网卡模式，本机所有流量（包括浏览器、APP、终端、虚拟机等）都会经过一张“虚拟网卡”再进行代理，可以简单理解为“真·全局模式”，但是部分古久版本开启TUN后会使得网络图标变成小地球，新版本会显示为以太网，这些都是正常选项</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>WSL安装和使用</title>
    <url>//post/WSL/</url>
    <content><![CDATA[<h3 id="启用Windows功能">启用Windows功能</h3>
<p>按Windows键全局搜索“启用或关闭Windows功能”</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016221806427.png"
                        alt="image-20241016221806427"
                 ></p>
<p>打开后开启图中的四个选项，有些系统可能会没有翻译成中文，记得仔细对照<img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016222114609.png"
                        alt="image-20241016222114609"
                 ></p>
<p>然后根据要求重新启动Windows系统</p>
<blockquote>
<p>Windows家庭版默认没有Hyper-V功能，需要自行安装Hyper-V或者改成专业版并重新激活，如果你的电脑环境已经出现了各种难以拯救 / 无法解决 / 工作量太大 / 搜索引擎未收录的报错，更推荐移步至本博客内另一篇文章进行系统重装：<a href="https://c3ngh.top/post/SystemReinstall/">如何优雅的重装系统</a></p>
</blockquote>
<h4 id="Hyper-V安装脚本">Hyper-V安装脚本</h4>
<p>新建一个HyperV-Install.cmd文件，将以下内容复制进去，右键使用管理员身份运行，安装完成后重启计算机即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">pushd</span> <span class="string">&quot;%~dp0&quot;</span></span><br><span class="line"><span class="built_in">dir</span> /b %SystemRoot%\servicing\Packages\*Hyper<span class="literal">-V</span>*.mum &gt;hyper<span class="literal">-v</span>.txt</span><br><span class="line"><span class="keyword">for</span> /f %%i <span class="keyword">in</span> (<span class="string">&#x27;findstr /i . hyper-v.txt 2^&gt;nul&#x27;</span>) <span class="keyword">do</span> dism /online /norestart /<span class="built_in">add-package</span>:<span class="string">&quot;%SystemRoot%\servicing\Packages\%%i&quot;</span></span><br><span class="line"><span class="built_in">del</span> hyper<span class="literal">-v</span>.txt</span><br><span class="line">Dism /online /<span class="built_in">enable-feature</span> /featurename:Microsoft<span class="literal">-Hyper-V</span> <span class="literal">-All</span> /LimitAccess /ALL</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>
<p>如果遇到文件后缀名未显示的情况，打开Windows文件管理器，在正上方的 查看 - 显示 - 文件扩展名，勾选即可</p>
<h4 id="修改为专业版（推荐）">修改为专业版（推荐）</h4>
<p>在设置 - 系统 - 激活页面选择更改产品密钥，在终端管理员内使用以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">slmgr /ipk &lt;产品密钥&gt;</span><br><span class="line"></span><br><span class="line">#以Windows 11专业版为例</span><br><span class="line">slmgr /ipk W269N-WFGWX-YVC9B-4J6C9-T83GX</span><br></pre></td></tr></table></figure>
<p>将密钥修改为以下的你所需要的某一个</p>
<table>
<thead>
<tr>
<th>Windows 11 Edition</th>
<th>KMS Client Key</th>
<th>Generic Key</th>
</tr>
</thead>
<tbody>
<tr>
<td>Windows 11 Home</td>
<td>TX9XD-98N7V-6WMQ6-BX7FG-H8Q99</td>
<td>YTMG3-N6DKC-DKB77-7M9GH-8HVX7</td>
</tr>
<tr>
<td>Windows 11 Home N</td>
<td>3KHY7-WNT83-DGQKR-F7HPR-844BM</td>
<td>4CPRK-NM3K3-X6XXQ-RXX86-WXCHW</td>
</tr>
<tr>
<td>Windows 11 Home Single Language</td>
<td>7HNRX-D7KGG-3K4RQ-4WPJ4-YTDFH</td>
<td>BT79Q-G7N6G-PGBYW-4YWX6-6F4BT</td>
</tr>
<tr>
<td>Windows 11 Home Country Specific</td>
<td>PVMJN-6DFY6-9CCP6-7BKTT-D3WVR</td>
<td>N2434-X9D7W-8PF6X-8DV9T-8TYMD</td>
</tr>
<tr>
<td>Windows 11 Pro</td>
<td>W269N-WFGWX-YVC9B-4J6C9-T83GX</td>
<td>VK7JG-NPHTM-C97JM-9MPGT-3V66T</td>
</tr>
<tr>
<td>Windows 11 Pro N</td>
<td>MH37W-N47XK-V7XM9-C7227-GCQG9</td>
<td>2B87N-8KFHP-DKV6R-Y2C8J-PKCKT</td>
</tr>
<tr>
<td>Windows 11 Pro for Workstations</td>
<td>NRG8B-VKK3Q-CXVCJ-9G2XF-6Q84J</td>
<td>DXG7C-N36C4-C4HTG-X4T3X-2YV77</td>
</tr>
<tr>
<td>Windows 11 Pro for Workstations N</td>
<td>9FNHH-K3HBT-3W4TD-6383H-6XYWF</td>
<td>WYPNQ-8C467-V2W6J-TX4WX-WT2RQ</td>
</tr>
<tr>
<td>Windows 11 Pro Education</td>
<td>6TP4R-GNPTD-KYYHQ-7B7DP-J447Y</td>
<td>8PTT6-RNW4C-6V7J2-C2D3X-MHBPB</td>
</tr>
<tr>
<td>Windows 11 Pro Education N</td>
<td>YVWGF-BXNMC-HTQYQ-CPQ99-66QFC</td>
<td>GJTYN-HDMQY-FRR76-HVGC7-QPF8P</td>
</tr>
<tr>
<td>Windows 11 Education</td>
<td>NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td>
<td>YNMGQ-8RYV3-4PGQ3-C8XTP-7CFBY</td>
</tr>
<tr>
<td>Windows 11 Education N</td>
<td>2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td>
<td>84NGF-MHBT6-FXBX8-QWJK7-DRR8H</td>
</tr>
<tr>
<td>Windows 11 Enterprise</td>
<td>NPPR9-FWDCX-D2C8J-H872K-2YT43</td>
<td>XGVPP-NMH47-7TTHJ-W3FW7-8HV2C</td>
</tr>
<tr>
<td>Windows 11 Enterprise N</td>
<td>DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td>
<td>WGGHN-J84D6-QYCPR-T7PJ7-X766F</td>
</tr>
<tr>
<td>Windows 11 Enterprise G</td>
<td>YYVX9-NTFWV-6MDM3-9PT4T-4M68B</td>
<td>-</td>
</tr>
<tr>
<td>Windows 11 Enterprise G N</td>
<td>44RPN-FTY23-9VTTB-MP9BX-T84FV</td>
<td>FW7NV-4T673-HF4VX-9X4MM-B4H4T</td>
</tr>
<tr>
<td>Windows 11 Enterprise LTSC 2019</td>
<td>M7XTQ-FN8P6-TTKYV-9D4CC-J462D</td>
<td>-</td>
</tr>
<tr>
<td>Windows 11 Enterprise N LTSC 2019</td>
<td>92NFX-8DJQP-P6BBQ-THF9C-7CG2H</td>
<td>-</td>
</tr>
</tbody>
</table>
<p>随后使用Github的开源激活工具：<a class="link"   href="https://github.com/massgravel/Microsoft-Activation-Scripts" >Microsoft-Activation-Scripts - Github<i class="fas fa-external-link-alt"></i></a> 进行激活</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">irm</span> https://get.activated.win | <span class="built_in">iex</span></span><br></pre></td></tr></table></figure>
<p>以管理员身份在Powershell内运行以上命令按步骤激活即可</p>
<h3 id="安装WSL">安装WSL</h3>
<p>在Windows下按 Win 键，点击Windows PowerShell（管理员），在终端输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> <span class="literal">--no-distribution</span></span><br></pre></td></tr></table></figure>
<p>完成上述命令后，系统会自动安装不带任何发行版的Linux虚拟机</p>
<p>如果想查看已安装的发行版以及相应的WSL版本，可以输入：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--list</span> <span class="literal">--verbose</span></span><br></pre></td></tr></table></figure>
<p>安装Ubuntu</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--install</span> Ubuntu<span class="literal">-22</span>.<span class="number">04</span></span><br></pre></td></tr></table></figure>
<h4 id="也可以选择微软商店安装">也可以选择微软商店安装</h4>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241016222658902.png"
                        alt="image-20241016222658902"
                 ></p>
<p>然后就可以快乐的输入用户名和密码使用WSL了，<strong>注意用户名不可以有大写字母</strong></p>
<h3 id="换源">换源</h3>
<p>切换到root用户 <strong>(必须)</strong> ，用以下脚本一把梭</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> su</span><br><span class="line">bash &lt;(curl -sSL https://linuxmirrors.cn/main.sh)</span><br></pre></td></tr></table></figure>
<h3 id="报错解决">报错解决</h3>
<h4 id="一、内核更新">一、内核更新</h4>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">WslRegisterDistribution failed with error: 0x800701bc</span><br></pre></td></tr></table></figure>
<p>以上报错需要下载安装适用于 x64 计算机的最新 WSL2 Linux 内核更新包</p>
<p>安装链接：<a class="link"   href="https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi" >https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi<i class="fas fa-external-link-alt"></i></a></p>
<h4 id="二、回退到无网络">二、回退到无网络</h4>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">C:\Users\67300\.wslconfig</span><br><span class="line">Error code: Wsl/Service/CreateInstance/CreateVm/ConfigureNetworking/HNS/E_ACCESSDENIED</span><br><span class="line"></span><br><span class="line">Error message is in norwegian but transelate to &quot;can not configure network (networkingMode Nat) you can disable networking in .wslconfig&quot;</span><br></pre></td></tr></table></figure>
<p>在C盘用户目录下创建一个<code>.wslconfig</code>文件，输入以下内容</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">[wsl2]</span><br><span class="line">networkingMode=mirrored</span><br></pre></td></tr></table></figure>
<p>然后Powershell输入即可</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">wsl <span class="literal">--shutdown</span></span><br></pre></td></tr></table></figure>
<h4 id="三、Sage虚拟环境冲突">三、Sage虚拟环境冲突</h4>
<p>Windows版SageMath会自带一个<code>VirtualBox</code>的类Unix虚拟环境，会导致Hyper-V停止运行</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20241018121907889.png"
                        alt="image-20241018121907889"
                 ></p>
<p>首先需要使用<code>Geek Uninstaller</code>彻底删除SageMath</p>
<p>需要重新关开<code>Hyper-V</code>和<code>虚拟机平台</code>，如果任务管理器里的虚拟化也被关闭了，则需要进入BIOS重新开启</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/7c359130a6cdeac464bf69a211600f7a.png"
                        alt="7c359130a6cdeac464bf69a211600f7a"
                 ></p>
<h4 id="四、安卓模拟器冲突">四、安卓模拟器冲突</h4>
<p>部分安卓模拟器的虚拟化技术会和<code>Hyper-V</code>冲突，需使用<code>Geek Uninstaller</code>删除后重新在<code>启用Windows功能</code>中开启<code>Hyper-V</code>和<code>虚拟机平台</code>等选项，如果有模拟器需求，可以换用<code>WSA（Windows Subsystem for Android）</code>或支持与<code>Hyper-V</code>兼容的模拟器，目前测试可用：网易MuMu模拟器，逍遥安卓等</p>
<h4 id="五、运行32位i386程序报错">五、运行32位i386程序报错</h4>
<p>如果遇到<code>./可执行文件</code>显示<code>No Such File or Directory</code>，在排除路径和文件自身问题后，可能是windows支持的Linux的系统对32位程序运行的不能直接支持的问题导致的，需要安装相对应的运行库。</p>
<p>按步骤完成以下命令即可：</p>
<p>安装<code>qemu-user-static</code>，用来模拟运行32位的i386可执行程序</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt install qemu-user-static</span><br></pre></td></tr></table></figure>
<p>在系统的<code>binfmt support</code>的服务中增加i386可执行程序文件格式的支持并添加自动启动</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> update-binfmts --install i386 /usr/bin/qemu-i386-static --magic <span class="string">&#x27;\x7fELF\x01\x01\x01\x03\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\x03\x00\x01\x00\x00\x00&#x27;</span> --mask <span class="string">&#x27;\xff\xff\xff\xff\xff\xff\xff\xfc\xff\xff\xff\xff\xff\xff\xff\xff\xf8\xff\xff\xff\xff\xff\xff\xff&#x27;</span></span><br><span class="line"><span class="built_in">sudo</span> service binfmt-support start</span><br></pre></td></tr></table></figure>
<p>增加i386支持并安装i386程序运行需要依赖的软件包</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> dpkg --add-architecture i386</span><br><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install -y libc6:i386 libncurses5:i386 libstdc++6:i386 zlib1g:i386 zlib1g-dev:i386</span><br></pre></td></tr></table></figure>
<h3 id="开启嵌套虚拟化">开启嵌套虚拟化</h3>
<p><a class="link"   href="https://learn.microsoft.com/zh-cn/virtualization/hyper-v-on-windows/user-guide/enable-nested-virtualization" >借助嵌套虚拟化在虚拟机中运行 Hyper-V | Microsoft Learn<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="文件资源管理器中的Linux消失">文件资源管理器中的Linux消失</h3>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250116152411627.png"
                        alt="image-20250116152411627"
                 ></p>
<p>如果该图标消失，可以在文件资源管理器顶部输入<code>\\wsl$</code>进行图形化文件交互，如果想让该图标重新出现，则可以在<a class="link"   href="https://github.com/microsoft/WSL/releases/" >Releases · microsoft/WSL<i class="fas fa-external-link-alt"></i></a>中重新下载WSL，安装后重启文件资源管理器进程即可</p>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>Ollama+AnythingLLM实现本地CTF大模型</title>
    <url>//post/ollama/</url>
    <content><![CDATA[<blockquote>
<p>[!CAUTION]</p>
<p>RAM小于16GB或只有老旧核显的电脑不推荐尝试</p>
</blockquote>
<p>测试环境：</p>
<ul>
<li>
<p>R9-7945HX</p>
</li>
<li>
<p>RTX4060 Laptop 8G</p>
</li>
<li>
<p>32G DDR5 5200MHz</p>
</li>
</ul>
<p>模型推荐：</p>
<ul>
<li><a class="link"   href="https://ollama.com/library/llama3.1" >llama3.1 - 8b<i class="fas fa-external-link-alt"></i></a>：16GB RAM可用，可自定义prompt，较为全面</li>
<li><a class="link"   href="https://ollama.com/library/deepseek-coder-v2" >deepseek-coder-v2 - 16b<i class="fas fa-external-link-alt"></i></a>：32GB RAM可用，代码能力较强，可自定义prompt，安全限制较少</li>
<li><a class="link"   href="https://ollama.com/library/deepseek-r1" >deepseek-r1 - 14b<i class="fas fa-external-link-alt"></i></a>：推理很强，但是生成答案速度比较慢，不太适合用于比赛，但很聪明</li>
</ul>
<h3 id="安装Ollama">安装Ollama</h3>
<p>在该链接中下载<a class="link"   href="https://ollama.com/download" >Download Ollama<i class="fas fa-external-link-alt"></i></a>对应系统版本的Ollama，并将其安装在任意位置，Windows也可以在WSL2中进行安装。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126144708535.png"
                        alt="image-20250126144708535"
                 ></p>
<p>安装完成后双击快捷方式运行Ollama，然后在官网上查询想要部署的开源大模型 <a class="link"   href="https://ollama.com/search" >Models - Ollama<i class="fas fa-external-link-alt"></i></a>，在Powershell中运行官网给出的命令即可进行安装并运行。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126144914598.png"
                        alt="image-20250126144914598"
                 ></p>
<h4 id="安装到其他盘">安装到其他盘</h4>
<p>Ollama会默认安装到<code>C:\Users%username%\AppData\Local\Programs\Ollama</code>目录下，所有下载的模型都会安装到<code>C:\Users%username%.ollama\models</code>目录下，如有需求可以默认将下载的模型保存到其他盘。具体配置方法如下：</p>
<p>打开「系统环境变量」，新建一个系统变量OLLAMA_MODELS ，然后设置Ollama模型的存储路径。</p>
<p>变量名：OLLAMA_MODELS</p>
<p>变量值（路径）：D:\ZJNU\OLLAMA（修改为你需要的路径）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126151645233.png"
                        alt="image-20250126151645233"
                 ></p>
<p>然后再执行<code>ollama run</code>或<code>ollama pull</code>，模型将会默认安装到你设置的路径下</p>
<h3 id="运行Ollama">运行Ollama</h3>
<p>现版本Ollama会默认添加环境变量，只需在命令行窗口中输入<code>ollama run 模型名称</code>即可使用大模型。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126152218867.png"
                        alt="image-20250126152218867"
                 ></p>
<h3 id="安装AnythingLLM">安装AnythingLLM</h3>
<p>该程序可为Ollama提供图形化界面，下载地址：<a class="link"   href="https://anythingllm.com/" >AnythingLLM | The all-in-one AI application for everyone<i class="fas fa-external-link-alt"></i></a>，安装完成后进行如下配置：Provider选择Ollama，Model选择之前安装的，其余配置保持默认即可，如果修改过端口则需要修改对应端口。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153229712.png"
                        alt="image-20250126153229712"
                 ></p>
<p>该配置日后也可以在设置中修改</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153554445.png"
                        alt="image-20250126153554445"
                 ></p>
<h3 id="自定义Prompt和知识库">自定义Prompt和知识库</h3>
<p>在AnythingLLM中设置工作区和Thread后可以设置自定义Prompt和自定义知识库</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126153925169.png"
                        alt="image-20250126153925169"
                 ></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126154204838.png"
                        alt="image-20250126154204838"
                 ></p>
<p>该过程花费时间可能较长，老版本AnythingLLM可能会出现假死机情况，可以少量多次进行移动，新版本有所改善。</p>
<p>完成后在AnythingLLM中提问大模型即可引用自定义上传的资料。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250126154350676.png"
                        alt="image-20250126154350676"
                 ></p>
<h3 id="配置端口（可选）">配置端口（可选）</h3>
<p>Ollama API 的默认访问地址和侦听端口是<a class="link"   href="http://localhost:11434" >http://localhost:11434<i class="fas fa-external-link-alt"></i></a>，只能在装有 Ollama 的系统中直接调用。如果要在网络中提供服务，需在环境变量中修改 API 的侦听地址和端口为：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">变量名：OLLAMA_HOST</span><br><span class="line">变量值（端口）：:8000（注意前面有一个冒号）</span><br></pre></td></tr></table></figure>
<p>只填写端口号可以同时侦听（所有） IPv4 和 IPv6 的:8000 端口。还需在Windows防火墙中开启远程访问。</p>
<h3 id="允许浏览器跨域请求（可选）">允许浏览器跨域请求（可选）</h3>
<p>Ollama 默认只允许来自127.0.0.1和0.0.0.0的跨域请求，如果你计划在其它前端面板中调用 Ollama API，比如Open WebUI，建议放开跨域限制：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">变量名：OLLAMA_ORIGINS</span><br><span class="line">变量值：*</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>Python版本管理器pyenv的安装与使用</title>
    <url>//post/pyenv/</url>
    <content><![CDATA[<p><strong>pyenv</strong> 是一个用于管理多个 Python 版本的工具。它允许你在同一台机器上安装、切换和管理不同的 Python 版本，而不需要依赖系统级的 Python 安装。</p>
<p>GitHub主页：</p>
<p><a class="link"   href="https://github.com/pyenv/pyenv" >pyenv/pyenv: Simple Python version management (github.com)<i class="fas fa-external-link-alt"></i></a></p>
<p><a class="link"   href="https://github.com/pyenv-win/pyenv-win" >pyenv-win/pyenv-win: pyenv for Windows<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="安装pyenv">安装pyenv</h3>
<h4 id="Ubuntu">Ubuntu</h4>
<ul>
<li>
<p>依赖安装</p>
<p>pyenv需要编译安装python，所以需要安装相关库</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> apt update</span><br><span class="line"><span class="built_in">sudo</span> apt install git curl build-essential libssl-dev zlib1g-dev libbz2-dev \</span><br><span class="line">libreadline-dev libsqlite3-dev wget llvm libncurses5-dev libncursesw5-dev \</span><br><span class="line">xz-utils tk-dev libffi-dev liblzma-dev python3-openssl git</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>自动安装脚本</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">curl https://pyenv.run | bash</span><br></pre></td></tr></table></figure>
</li>
<li>
<p>添加环境变量到<code>.bashrc</code>或<code>.zshrc</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">export</span> PYENV_ROOT=<span class="string">&quot;<span class="variable">$HOME</span>/.pyenv&quot;</span></span><br><span class="line">[[ -d <span class="variable">$PYENV_ROOT</span>/bin ]] &amp;&amp; <span class="built_in">export</span> PATH=<span class="string">&quot;<span class="variable">$PYENV_ROOT</span>/bin:<span class="variable">$PATH</span>&quot;</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">&quot;<span class="subst">$(pyenv init -)</span>&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="Windows">Windows</h4>
<ul>
<li>
<p>自动安装脚本</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">Invoke-WebRequest</span> <span class="literal">-UseBasicParsing</span> <span class="literal">-Uri</span> <span class="string">&quot;https://raw.githubusercontent.com/pyenv-win/pyenv-win/master/pyenv-win/install-pyenv-win.ps1&quot;</span> <span class="literal">-OutFile</span> <span class="string">&quot;./install-pyenv-win.ps1&quot;</span>; &amp;<span class="string">&quot;./install-pyenv-win.ps1&quot;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="macOS">macOS</h4>
<ul>
<li>
<p>homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">brew update</span><br><span class="line">brew install openssl readline sqlite3 xz tcl-tk libb2 zstd zlib pkgconfig <span class="comment">#安装编译python所需要的依赖</span></span><br><span class="line">brew install pyenv</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用pyenv">使用pyenv</h3>
<h4 id="安装-Python-版本">安装 Python 版本</h4>
<p>使用 <code>pyenv</code> 可以安装任意支持的 Python 版本：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv install 3.8.12</span><br><span class="line">pyenv install 3.9.7</span><br><span class="line">pyenv install 3.10.0</span><br></pre></td></tr></table></figure>
<p>你可以使用 <code>pyenv install --list</code> 查看所有可用的 Python 版本。</p>
<h4 id="切换-Python-版本">切换 Python 版本</h4>
<p><code>pyenv</code> 支持全局和局部（本地）切换 Python 版本。</p>
<ul>
<li>
<p><strong>全局切换</strong>（影响所有项目）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv global 3.9.7</span><br></pre></td></tr></table></figure>
<p>在Linux下可以多版本共存，例如<code>pyenv global 3.9.13 2.7.18</code>，即可实现两个版本同时存在，在Windows下好像不行，有待研究</p>
</li>
<li>
<p><strong>局部切换</strong>（仅影响当前目录或项目）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv <span class="built_in">local</span> 3.8.12</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>查看当前 Python 版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv version</span><br></pre></td></tr></table></figure>
</li>
<li>
<p><strong>查看所有安装的 Python 版本</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv versions</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="卸载-Python-版本">卸载 Python 版本</h4>
<p>如果你不再需要某个 Python 版本，可以使用以下命令卸载它：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pyenv uninstall 3.8.12</span><br></pre></td></tr></table></figure>
<h3 id="软链接">软链接</h3>
<p>如果输入python3可以正常进入，输入python则不行，需要设置软链接，则可以把python3.9链接到python</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sudo</span> <span class="built_in">ln</span> -s /usr/bin/python3.9  /usr/bin/python</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>环境配置</category>
      </categories>
  </entry>
  <entry>
    <title>devices</title>
    <url>/devices/index.html</url>
    <content><![CDATA[<h2 id="分享我在使用的一些设备">分享我在使用的一些设备</h2>
<p>抛开小米不谈，我还是很喜欢雷总和他说的一些话的，比如：让每个人都能享受科技的乐趣</p>
<h3 id="笔记本电脑">笔记本电脑</h3>
<h4 id="Legion-R9000P-2023">Legion R9000P 2023</h4>
<p>是毕业后购买的，拥有R9-7945HX+RTX 4060，自己更换了32G RAM和1T+2T后约等于什么都能干（你怎么知道我23年暑假485买的金百达KP260 PLUS 2T），要我说16大核真是天才想出来的，但是无论怎么折腾续航都无法超过3.5小时，属于是离电就废…？还有惊人的2.55kg重量，但它见证了我CTF从0到1的生涯，也经历了无数次重装系统。<s>（最爱的一集）</s></p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/r9000p.jpg"
                        alt="r9000p"
                 ></p>
<h4 id="MacBook-Pro-M4-14英寸-24-1T">MacBook Pro M4 14英寸 24+1T</h4>
<p>25年加入的新成员，补足了R9000P在续航和重量方面的不足（但好像它也没多轻薄），好厉害的离电续航！我夸我夸我夸，但是macOS和Misc好像不是很搭，<s>需要我自适应一下</s>，还有它的音质也好好。但默认情况下<code>/usr</code>目录不可写，<code>sudo</code>也不可写真的会让我破防，还要去恢复模式关掉一个什么设置才行。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/macbook_pro.jpg"
                        alt="macbook_pro"
                 ></p>
<p>然后Windows和Mac混用…就不知道该在那边关掉窗口了，也逐渐分不清<code>alt</code>和<code>command</code>了。</p>
<h3 id="台式电脑">台式电脑</h3>
<h4 id="校用">校用</h4>
<p>感觉是25年上半年最优解啊，爽打游戏</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/d9caa1d60b20077cc734e8f6416ec21.jpg"
                        alt="d9caa1d60b20077cc734e8f6416ec21"
                 ></p>
<h4 id="家用">家用</h4>
<p>经典组合，基本1080P畅玩？但后来不怎么玩游戏了，所以一直吃灰也不想更新设备了，是高中时候自己配的。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/computer1.jpg"
                        alt="computer1"
                 ></p>
<h4 id="电视">电视</h4>
<p>搞了一台小主机放在家里的电视机边上给我爸看电视，之前也会偶尔串流玩一会游戏，插个移动硬盘看点电影什么的，甚至搞了个家庭网盘但没有公网IP遂止。提一句：588真的可以带动4K电视（确信）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/computer2.jpg"
                        alt="computer2"
                 ></p>
<h4 id="散落零部件">散落零部件</h4>
<p>目测家里还有一张矿场下来的3070Ti，RX5700XT，一张GT730，一个650w杂牌电源，六七个至强e5什么什么的，一大堆内存条，比较值钱的可能是ADATA的万紫千红，还有几个240G的SATA固态和两个1T的西数机械硬盘。直接上演《论垃圾佬的一辈子都会在家里留下什么》</p>
<h3 id="显示器">显示器</h3>
<h4 id="小米-Redmi-G24-1080P-165Hz">小米 Redmi G24 1080P 165Hz</h4>
<p>VA面板的，现在看来显示效果已经很差了，但对当时那个中学生来说，这就是顶配。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomixianshiqi.jpg"
                        alt="xiaomixianshiqi"
                 ></p>
<h4 id="AOC-Q27G2S-2K-170Hz">AOC Q27G2S 2K 170Hz</h4>
<p>现在放在宿舍里用，奇怪 我的购物记录呢（挠头），当时怎么要1399啊可恶</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/aocq27g2s.jpg"
                        alt="aocq27g2s"
                 ></p>
<h3 id="键盘">键盘</h3>
<h4 id="RK-R65">RK R65</h4>
<p>我超喜欢小的键盘</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/rkr65.jpg"
                        alt="rkr65"
                 ></p>
<h4 id="黑爵-AKP846">黑爵 AKP846</h4>
<p><s>女朋友</s> 前女友送的生日礼物？居然要999？！(更新于25年1月15日 哈哈 分手快乐)</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/akp846.jpg"
                        alt="akp846"
                 ></p>
<h3 id="鼠标">鼠标</h3>
<h4 id="VGN-蜻蜓F1Pro">VGN 蜻蜓F1Pro</h4>
<p>挺轻的，我很喜欢，可惜不是三模不支持蓝牙，用了一年多充电接口也坏了。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/qingtingf1pro.jpg"
                        alt="qingtingf1pro"
                 ></p>
<h4 id="罗技G102">罗技G102</h4>
<p>62.9，带大鼠标垫，23年618血赚记录</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/luojig102.jpg"
                        alt="luojig102"
                 ></p>
<h3 id="手机">手机</h3>
<p>这可太多了，几乎每个品牌都用过，之前算过应该用过几十台？人生第一台手机是小米1，当时我才小学一年级，2011年买的（对我拿到10周年1999了，但后来小米账号找不到了）</p>
<h4 id="OPPO-Find-X8-白色-16-512">OPPO Find X8 白色 16+512</h4>
<p>换掉了之前笨重又续航差差的X7U，总的来说优点是轻薄+续航，缺点是拍照变差了，短焦指纹和USB 2.0，但是10h续航+轻薄小直屏我也太爱了</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/bbe4aec20f6cf99e8d669624f10fa0f.jpg"
                        alt="bbe4aec20f6cf99e8d669624f10fa0f"
                 ></p>
<h3 id="平板">平板</h3>
<h4 id="OPPO-Pad-4-Pro-16-512G">OPPO Pad 4 Pro 16+512G</h4>
<p>13.2英寸…好大…好爽…这谁能忍住不用来盖泡面啊，就是太大了手持好累，不适合打游戏，心目中最完美的尺寸还是11英寸。C15的互联和生态确实已经比原先那几代系统好太多了，这也让我从iPad换回了安卓板。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fee1b6988bba4f72a35623b3b04d59aa1269531454.png"
                        alt="fee1b6988bba4f72a35623b3b04d59aa1269531454"
                 ></p>
<h4 id="OPPO-Pencil-2-Pro">OPPO Pencil 2 Pro</h4>
<p>素皮，还有震动，389，懂？</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20251001205526304.png"
                        alt="image-20251001205526304"
                 ></p>
<h4 id="键盘-2">键盘</h4>
<p>粉色！美美！<s>（粉色娇嫩，你如今几岁了）</s> 官方说法叫晨曦微光 不过确实好看，有NFC一碰互联一类的功能，蓝牙连接的，敲击手感也还行，好用。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20251001205703262.png"
                        alt="image-20251001205703262"
                 ></p>
<h3 id="手表">手表</h3>
<h4 id="OPPO-Watch3-Pro">OPPO Watch3 Pro</h4>
<p>OPPO历来都是安卓表皇，完整的ColorOS安卓系统而非WearOS让OWatch拥有极高的可玩性，而且我喜欢方表，又不喜欢太重的Watch 4 Pro（虽然它很有质感），所以选择花600元购入95新Watch 3 Pro，依然认为是目前性价比最高的Watch。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20251001205128018.png"
                        alt="image-20251001205128018"
                 ></p>
<h3 id="耳机">耳机</h3>
<h4 id="OPPO-Enco-X3-有线充版">OPPO Enco X3 有线充版</h4>
<p>国补720，对比X2佩戴起来舒适太多了，素皮也很高级，不像X2一样容易划的全是划痕，降噪更自然，耳压很低，总的来说变舒服了，但是降噪好像没X2那么强，我觉得值得（草 右耳在25年9月惨遭暗杀 找不到了 补配花了我210呜呜呜）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/7f16e5923bbfdf132b5b7ddd0e6758d.jpg"
                        alt="7f16e5923bbfdf132b5b7ddd0e6758d"
                 ></p>
<h4 id="Beats-Solo3-Wireless-十周年纪念版">Beats Solo3 Wireless 十周年纪念版</h4>
<p>16岁爸妈送给我的生日礼物，让我正式来到了耳机鄙视链低端，但我依然喜欢它一辈子。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/beatssolo3.jpg"
                        alt="beatssolo3"
                 ></p>
<h3 id="相机">相机</h3>
<h4 id="佳能EOS-RP">佳能EOS RP</h4>
<p>如果你说七千块的RP是一坨狗屎那我赞成，但如果它只需要三千多即可入手，那我会称之为最便宜最有性价比的全画幅！配上了原厂转接环继续用原来的上古战神EF头</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/RP.jpg"
                        alt="RP"
                 ></p>
<h3 id="镜头">镜头</h3>
<h4 id="佳能EF-50mm-F1-8-STM">佳能EF 50mm F1.8 STM</h4>
<p>小痰盂！大光定的感觉真好吧（你没有模特吗）</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250207001354371.png"
                        alt="image-20250207001354371"
                 ></p>
<h4 id="佳能EF-70-200mm-L-F4-USM">佳能EF 70-200mm L F4 USM</h4>
<p>小小白一代，很贫民但是很好用的一颗红圈</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/image-20250207001516621.png"
                        alt="image-20250207001516621"
                 ></p>
<h3 id="路由器">路由器</h3>
<h4 id="小米AX3000">小米AX3000</h4>
<p>长得真帅吧，两个路由器Mesh组网一下稳稳跑满千兆。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomiax3000.jpg"
                        alt="xiaomiax3000"
                 ></p>
<h4 id="小米WR30U">小米WR30U</h4>
<p>性价比最高的OpenWRT机，是联通定制版，网上固件一大堆随便刷，宿舍单人爽用千兆，下附一个很详细的刷机教程：<a class="link"   href="https://blog.qust.me/wr30u" >小米 WR30U 解锁 SSH 刷 openwrt，最有性价比的百元路由器<i class="fas fa-external-link-alt"></i></a></p>
<h3 id="其余配件">其余配件</h3>
<h4 id="OPPO-SuperVOOC-80W超级闪充移动电源-12000mAh">OPPO SuperVOOC 80W超级闪充移动电源 12000mAh</h4>
<p>80W闪充，PD 45W，PPS 33W，45W自充，3颗4000mAh电芯串联，懂我意思吗）</p>
<p>咦，你居然有3C？！</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/27e717e18ba770f50f14fe5f7af07f0c.jpg"
                        alt="27e717e18ba770f50f14fe5f7af07f0c"
                 ></p>
<h4 id="OPPO-100W小方瓶充电器">OPPO 100W小方瓶充电器</h4>
<p>目前在用的真正意义上的万能充，100W SuperVOOC协议，支持65W PD，UFCS，PPS，实测可以给MacBook Pro，iPad Pro，手机，耳机，充电宝等几乎所有设备充电。而且还是磁吸线，强迫症福音。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/080920812829a846d6ee786dfc79605.jpg"
                        alt="080920812829a846d6ee786dfc79605"
                 ></p>
<h4 id="OPPO-50W饼干充电器">OPPO 50W饼干充电器</h4>
<p>居家旅行必备良品，我超爱！口袋一装就能出门。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/supervooc-binggan.jpg"
                        alt="supervooc-binggan"
                 ></p>
<h4 id="联想PD140W充电器">联想PD140W充电器</h4>
<p>显著提高游戏本出门幸福感，私有140W，PD100W也可以给MacBook充电</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/legion140w.jpg"
                        alt="legion140w"
                 ></p>
<h4 id="扩展坞-硬盘盒-线材-支架-绿联-all-in-one">扩展坞&amp;硬盘盒&amp;线材&amp;支架 - 绿联 all in one</h4>
<p>没有人知道我买了多少绿联的配件。</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/ugreenallinone.jpg"
                        alt="ugreenallinone"
                 ></p>
<h4 id="智能家居-其余数码产品-小米-all-in-one">智能家居&amp;其余数码产品 - 小米 all in one</h4>
<p>小米全家桶？反正包括但不仅限于智能门锁、小爱同学、显示器、台灯、挂灯、电动牙刷、充电宝、充电器、路由器、电视、智能猫眼等等等。顺便一提，25年10月1日买了一台65英寸的红米电视，花费1600元，居然4K 144Hz 3+64G，好高的性价比！</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/xiaomiallinone.jpg"
                        alt="xiaomiallinone"
                 ></p>
<h4 id="榨汁杯">榨汁杯</h4>
<p>指标单列，显著提升生活幸福感</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/fcd23f12b72335b9ea42d2f29b662c9.jpg"
                        alt="fcd23f12b72335b9ea42d2f29b662c9"
                 ></p>
<h3 id="一些残骸">一些残骸</h3>
<p>这一面墙都是比较有意义的电子产品的盒子，还有一些因为太大了就扔了或者移动到别的地方了，还有一些二手卖掉了就把盒子也给了所以这只是很小一部分…有机会的话我一定会整理一个我用过的所有电子产品的清单，唉当时我要是没买这些的话，那我高低也是一个富裕的人吧</p>
<p><img  
                       lazyload
                       alt="image"
                       data-src="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/somebox.jpg"
                        alt="somebox"
                 ></p>
<h3 id="写在最后">写在最后</h3>
<p>欲买桂花同载酒，终不似，少年游。如果有什么喜欢的东西，在能力范围内的一定要买给自己！就算是很久很久以后在二手市场看到自己曾经喜欢过的物品也值得购买，因为那些也是曾经一个少年的梦想。对自己好点。</p>
<p>对自己好点。对自己好点。对自己好点。</p>
<p>当时写下的这句话现在看来感触好像更多了，所以重要的事情说三遍！</p>
]]></content>
  </entry>
  <entry>
    <title>abouts</title>
    <url>/about/index.html</url>
    <content><![CDATA[<p>一个菜鸡CTFer，以前是学Misc的，现在学烧烤…</p>
]]></content>
  </entry>
  <entry>
    <title>友情链接</title>
    <url>/links/index.html</url>
    <content><![CDATA[<h3 id="我的友链信息">我的友链信息</h3>
<p>name: C3ngH</p>
<p>avatar: <a class="link"   href="https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/C3ngH.jpg" >https://c3ngh-blog.oss-cn-hangzhou.aliyuncs.com/img/C3ngH.jpg<i class="fas fa-external-link-alt"></i></a></p>
<p>link: <a href="https://c3ngh.top/">https://c3ngh.top/</a></p>
<p>description: 广告位招租</p>
]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tools</title>
    <url>/tools/index.html</url>
    <content><![CDATA[<h2 id="分享一些很清真的工具">分享一些很清真的工具</h2>
<p>好累啊，择日再写~</p>
]]></content>
  </entry>
</search>
